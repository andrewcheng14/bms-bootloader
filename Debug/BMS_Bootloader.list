
BMS_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003924  08003924  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800392c  0800392c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000068  0800399c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  0800399c  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009abf  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001991  00000000  00000000  00029b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000065e  00000000  00000000  0002bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002260d  00000000  00000000  0002c3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae90  00000000  00000000  0004e9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0044  00000000  00000000  0005988b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000278c  00000000  00000000  001298d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0012c05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080038dc 	.word	0x080038dc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080038dc 	.word	0x080038dc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fb78 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f810 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f904 	bl	8000718 <MX_GPIO_Init>
  MX_UART5_Init();
 8000510:	f000 f8d8 	bl	80006c4 <MX_UART5_Init>
  MX_RTC_Init();
 8000514:	f000 f87c 	bl	8000610 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  printf("Starting Bootloader\n");
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);  // Turn on LD2 (Green LED)
 8000518:	2201      	movs	r2, #1
 800051a:	2120      	movs	r1, #32
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <main+0x28>)
 800051e:	f000 fe8d 	bl	800123c <HAL_GPIO_WritePin>
//      HAL_NVIC_SystemReset();
//    }
//  }

  // Jump to app
  goto_application();
 8000522:	f000 f975 	bl	8000810 <goto_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000526:	e7fe      	b.n	8000526 <main+0x26>
 8000528:	40020000 	.word	0x40020000

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	2234      	movs	r2, #52	; 0x34
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fe40 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <SystemClock_Config+0xdc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <SystemClock_Config+0xdc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <SystemClock_Config+0xdc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <SystemClock_Config+0xe0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a24      	ldr	r2, [pc, #144]	; (800060c <SystemClock_Config+0xe0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xe0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800058c:	2309      	movs	r3, #9
 800058e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000596:	2300      	movs	r3, #0
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a8:	2319      	movs	r3, #25
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fd3b 	bl	800203c <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005cc:	f000 f94a 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fe3e 	bl	8001270 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005fa:	f000 f933 	bl	8000864 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_RTC_Init+0xac>)
 800062a:	4a25      	ldr	r2, [pc, #148]	; (80006c0 <MX_RTC_Init+0xb0>)
 800062c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_RTC_Init+0xac>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_RTC_Init+0xac>)
 8000636:	227f      	movs	r2, #127	; 0x7f
 8000638:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_RTC_Init+0xac>)
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_RTC_Init+0xac>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_RTC_Init+0xac>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_RTC_Init+0xac>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000652:	481a      	ldr	r0, [pc, #104]	; (80006bc <MX_RTC_Init+0xac>)
 8000654:	f001 ff90 	bl	8002578 <HAL_RTC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f901 	bl	8000864 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000662:	2300      	movs	r3, #0
 8000664:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000666:	2300      	movs	r3, #0
 8000668:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800066a:	2300      	movs	r3, #0
 800066c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <MX_RTC_Init+0xac>)
 800067e:	f001 fffe 	bl	800267e <HAL_RTC_SetTime>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000688:	f000 f8ec 	bl	8000864 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800068c:	2301      	movs	r3, #1
 800068e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000690:	2301      	movs	r3, #1
 8000692:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000694:	2301      	movs	r3, #1
 8000696:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000698:	2300      	movs	r3, #0
 800069a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_RTC_Init+0xac>)
 80006a4:	f002 f885 	bl	80027b2 <HAL_RTC_SetDate>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80006ae:	f000 f8d9 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000084 	.word	0x20000084
 80006c0:	40002800 	.word	0x40002800

080006c4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_UART5_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_UART5_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_UART5_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_UART5_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_UART5_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_UART5_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_UART5_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_UART5_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_UART5_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_UART5_Init+0x4c>)
 80006fc:	f002 f97e 	bl	80029fc <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f8ad 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000a4 	.word	0x200000a4
 8000714:	40005000 	.word	0x40005000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_GPIO_Init+0xec>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MX_GPIO_Init+0xec>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0xec>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_GPIO_Init+0xec>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <MX_GPIO_Init+0xec>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_GPIO_Init+0xec>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_GPIO_Init+0xec>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a25      	ldr	r2, [pc, #148]	; (8000804 <MX_GPIO_Init+0xec>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_GPIO_Init+0xec>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_GPIO_Init+0xec>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <MX_GPIO_Init+0xec>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_GPIO_Init+0xec>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_GPIO_Init+0xec>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_GPIO_Init+0xec>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_GPIO_Init+0xec>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0xf0>)
 80007c0:	f000 fd3c 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0xf4>)
 80007da:	f000 fb9b 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007de:	2320      	movs	r3, #32
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xf0>)
 80007f6:	f000 fb8d 	bl	8000f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020800 	.word	0x40020800

08000810 <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	printf("Jumping to Application\n");
 8000816:	480f      	ldr	r0, [pc, #60]	; (8000854 <goto_application+0x44>)
 8000818:	f002 fcca 	bl	80031b0 <puts>

	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08008000 + 4U)));
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <goto_application+0x48>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	607b      	str	r3, [r7, #4]

	// turn off LED
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <goto_application+0x4c>)
 8000828:	f000 fd08 	bl	800123c <HAL_GPIO_WritePin>

	HAL_RCC_DeInit();
 800082c:	f001 fb0e 	bl	8001e4c <HAL_RCC_DeInit>
	HAL_DeInit();
 8000830:	f000 fa04 	bl	8000c3c <HAL_DeInit>
//	 __set_MSP(*(volatile uint32_t*) 0x08008000);
	SysTick->CTRL = 0;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <goto_application+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <goto_application+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <goto_application+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]

	// Jump to App
	app_reset_handler();
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4798      	blx	r3
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	080038f4 	.word	0x080038f4
 8000858:	08008004 	.word	0x08008004
 800085c:	40020000 	.word	0x40020000
 8000860:	e000e010 	.word	0xe000e010

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_MspInit+0x4c>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ae:	2007      	movs	r0, #7
 80008b0:	f000 fafc 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b09a      	sub	sp, #104	; 0x68
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	225c      	movs	r2, #92	; 0x5c
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fc75 	bl	80031c0 <memset>
  if(hrtc->Instance==RTC)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a0c      	ldr	r2, [pc, #48]	; (800090c <HAL_RTC_MspInit+0x4c>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d111      	bne.n	8000904 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008e0:	2320      	movs	r3, #32
 80008e2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fdd8 	bl	80014a4 <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80008fa:	f7ff ffb3 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <HAL_RTC_MspInit+0x50>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000904:	bf00      	nop
 8000906:	3768      	adds	r7, #104	; 0x68
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40002800 	.word	0x40002800
 8000910:	42470e3c 	.word	0x42470e3c

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a28      	ldr	r2, [pc, #160]	; (80009d4 <HAL_UART_MspInit+0xc0>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d14a      	bne.n	80009cc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 8000940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800099c:	2308      	movs	r3, #8
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <HAL_UART_MspInit+0xc8>)
 80009a8:	f000 fab4 	bl	8000f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ac:	2304      	movs	r3, #4
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009bc:	2308      	movs	r3, #8
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <HAL_UART_MspInit+0xcc>)
 80009c8:	f000 faa4 	bl	8000f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40005000 	.word	0x40005000
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020c00 	.word	0x40020c00

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f96a 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	e00a      	b.n	8000a60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4a:	f3af 8000 	nop.w
 8000a4e:	4601      	mov	r1, r0
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	b2ca      	uxtb	r2, r1
 8000a58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbf0      	blt.n	8000a4a <_read+0x12>
  }

  return len;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e009      	b.n	8000a98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	60ba      	str	r2, [r7, #8]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf1      	blt.n	8000a84 <_write+0x12>
  }
  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_close>:

int _close(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_isatty>:

int _isatty(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f002 fb44 	bl	80031d0 <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20020000 	.word	0x20020000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	200000ec 	.word	0x200000ec
 8000b7c:	20000240 	.word	0x20000240

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ba8:	f7ff ffea 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	; (8000be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	; (8000bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f002 fb03 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fc93 	bl	8000500 <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000be8:	08003934 	.word	0x08003934
  ldr r2, =_sbss
 8000bec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bf0:	20000240 	.word	0x20000240

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_Init+0x40>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_Init+0x40>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x40>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f943 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f83e 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fe20 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_DeInit+0x50>)
 8000c44:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_DeInit+0x54>)
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_DeInit+0x58>)
 8000c5c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c66:	2281      	movs	r2, #129	; 0x81
 8000c68:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c72:	2203      	movs	r2, #3
 8000c74:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <HAL_DeInit+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000c7c:	f000 f80c 	bl	8000c98 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	3fffc9ff 	.word	0x3fffc9ff
 8000c90:	00c77933 	.word	0x00c77933
 8000c94:	206010ff 	.word	0x206010ff

08000c98 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f917 	bl	8000efa <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce4:	f000 f8ed 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	200000f0 	.word	0x200000f0

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000f0 	.word	0x200000f0

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff47 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff5c 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff8e 	bl	8000e00 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffb0 	bl	8000e68 <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e165      	b.n	80011fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8154 	bne.w	80011f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d005      	beq.n	8000f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d130      	bne.n	8000fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d017      	beq.n	8001004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80ae 	beq.w	80011f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b5d      	ldr	r3, [pc, #372]	; (8001214 <HAL_GPIO_Init+0x300>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a5c      	ldr	r2, [pc, #368]	; (8001214 <HAL_GPIO_Init+0x300>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b5a      	ldr	r3, [pc, #360]	; (8001214 <HAL_GPIO_Init+0x300>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b6:	4a58      	ldr	r2, [pc, #352]	; (8001218 <HAL_GPIO_Init+0x304>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_GPIO_Init+0x308>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d025      	beq.n	800112e <HAL_GPIO_Init+0x21a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	; (8001220 <HAL_GPIO_Init+0x30c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01f      	beq.n	800112a <HAL_GPIO_Init+0x216>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	; (8001224 <HAL_GPIO_Init+0x310>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x212>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_GPIO_Init+0x314>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x20e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	; (800122c <HAL_GPIO_Init+0x318>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x20a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	; (8001230 <HAL_GPIO_Init+0x31c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x206>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a49      	ldr	r2, [pc, #292]	; (8001234 <HAL_GPIO_Init+0x320>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x202>
 8001112:	2306      	movs	r3, #6
 8001114:	e00c      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 8001116:	2307      	movs	r3, #7
 8001118:	e00a      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 800111a:	2305      	movs	r3, #5
 800111c:	e008      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 800111e:	2304      	movs	r3, #4
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 8001122:	2303      	movs	r3, #3
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x21c>
 800112e:	2300      	movs	r3, #0
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	f002 0203 	and.w	r2, r2, #3
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001140:	4935      	ldr	r1, [pc, #212]	; (8001218 <HAL_GPIO_Init+0x304>)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <HAL_GPIO_Init+0x324>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001172:	4a31      	ldr	r2, [pc, #196]	; (8001238 <HAL_GPIO_Init+0x324>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_GPIO_Init+0x324>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x324>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_GPIO_Init+0x324>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <HAL_GPIO_Init+0x324>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_GPIO_Init+0x324>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_GPIO_Init+0x324>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	f67f ae96 	bls.w	8000f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40013800 	.word	0x40013800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40021000 	.word	0x40021000
 8001230:	40021400 	.word	0x40021400
 8001234:	40021800 	.word	0x40021800
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0cc      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90c      	bls.n	80012ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b65      	ldr	r3, [pc, #404]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b8      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c4:	4b59      	ldr	r3, [pc, #356]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a58      	ldr	r2, [pc, #352]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	4b50      	ldr	r3, [pc, #320]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	494d      	ldr	r1, [pc, #308]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d044      	beq.n	8001390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d119      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e07f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132a:	2b03      	cmp	r3, #3
 800132c:	d107      	bne.n	800133e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132e:	4b3f      	ldr	r3, [pc, #252]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e06f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e067      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f023 0203 	bic.w	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4934      	ldr	r1, [pc, #208]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001360:	f7ff fce6 	bl	8000d30 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	e00a      	b.n	800137e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001368:	f7ff fce2 	bl	8000d30 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e04f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 020c 	and.w	r2, r3, #12
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429a      	cmp	r2, r3
 800138e:	d1eb      	bne.n	8001368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d20c      	bcs.n	80013b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e032      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4916      	ldr	r1, [pc, #88]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013f6:	f000 fb7f 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	5ccb      	ldrb	r3, [r1, r3]
 800140a:	fa22 f303 	lsr.w	r3, r2, r3
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_ClockConfig+0x1c8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc46 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023c00 	.word	0x40023c00
 800142c:	40023800 	.word	0x40023800
 8001430:	0800390c 	.word	0x0800390c
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_RCC_GetHCLKFreq+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001458:	f7ff fff0 	bl	800143c <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	0a9b      	lsrs	r3, r3, #10
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	0800391c 	.word	0x0800391c

0800147c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001480:	f7ff ffdc 	bl	800143c <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	0b5b      	lsrs	r3, r3, #13
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	0800391c 	.word	0x0800391c

080014a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d010      	beq.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80014dc:	4b6f      	ldr	r3, [pc, #444]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014e2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ea:	496c      	ldr	r1, [pc, #432]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80014fa:	2301      	movs	r3, #1
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d010      	beq.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800150a:	4b64      	ldr	r3, [pc, #400]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800150c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001510:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	4960      	ldr	r1, [pc, #384]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800151a:	4313      	orrs	r3, r2
 800151c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001528:	2301      	movs	r3, #1
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d017      	beq.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800153a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800153e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4955      	ldr	r1, [pc, #340]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001548:	4313      	orrs	r3, r2
 800154a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001556:	d101      	bne.n	800155c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001558:	2301      	movs	r3, #1
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001564:	2301      	movs	r3, #1
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d017      	beq.n	80015a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001574:	4b49      	ldr	r3, [pc, #292]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800157a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001582:	4946      	ldr	r1, [pc, #280]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001584:	4313      	orrs	r3, r2
 8001586:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001592:	d101      	bne.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0320 	and.w	r3, r3, #32
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 808a 	beq.w	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a38      	ldr	r2, [pc, #224]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a33      	ldr	r2, [pc, #204]	; (80016a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015da:	f7ff fba9 	bl	8000d30 <HAL_GetTick>
 80015de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015e2:	f7ff fba5 	bl	8000d30 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e278      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001608:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d02f      	beq.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001618:	6a3a      	ldr	r2, [r7, #32]
 800161a:	429a      	cmp	r2, r3
 800161c:	d028      	beq.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001626:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d114      	bne.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb73 	bl	8000d30 <HAL_GetTick>
 800164a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fb6f 	bl	8000d30 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e240      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ee      	beq.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800167c:	d114      	bne.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800168e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001692:	4902      	ldr	r1, [pc, #8]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001694:	4313      	orrs	r3, r2
 8001696:	608b      	str	r3, [r1, #8]
 8001698:	e00c      	b.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000
 80016a4:	42470e40 	.word	0x42470e40
 80016a8:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a49      	ldr	r2, [pc, #292]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80016b2:	6093      	str	r3, [r2, #8]
 80016b4:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c0:	4944      	ldr	r1, [pc, #272]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80016d8:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80016da:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00a      	beq.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80016e8:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4937      	ldr	r1, [pc, #220]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800170a:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800170c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001710:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	492e      	ldr	r1, [pc, #184]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800171a:	4313      	orrs	r3, r2
 800171c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d011      	beq.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001732:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173a:	4926      	ldr	r1, [pc, #152]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800173c:	4313      	orrs	r3, r2
 800173e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800174a:	d101      	bne.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800174c:	2301      	movs	r3, #1
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00a      	beq.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001762:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	491a      	ldr	r1, [pc, #104]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800176c:	4313      	orrs	r3, r2
 800176e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177a:	2b00      	cmp	r3, #0
 800177c:	d011      	beq.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001784:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178c:	4911      	ldr	r1, [pc, #68]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800178e:	4313      	orrs	r3, r2
 8001790:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800179c:	d101      	bne.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800179e:	2301      	movs	r3, #1
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d005      	beq.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017b0:	f040 80ff 	bne.w	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80017ba:	f7ff fab9 	bl	8000d30 <HAL_GetTick>
 80017be:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017c0:	e00e      	b.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80017c2:	f7ff fab5 	bl	8000d30 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d907      	bls.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e188      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80017d4:	40023800 	.word	0x40023800
 80017d8:	424711e0 	.word	0x424711e0
 80017dc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017e0:	4b7e      	ldr	r3, [pc, #504]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ea      	bne.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001808:	2b00      	cmp	r3, #0
 800180a:	d028      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d124      	bne.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001814:	4b71      	ldr	r3, [pc, #452]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800181a:	0c1b      	lsrs	r3, r3, #16
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	3301      	adds	r3, #1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001826:	4b6d      	ldr	r3, [pc, #436]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800182c:	0e1b      	lsrs	r3, r3, #24
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	431a      	orrs	r2, r3
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	3b01      	subs	r3, #1
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	431a      	orrs	r2, r3
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	061b      	lsls	r3, r3, #24
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	071b      	lsls	r3, r3, #28
 8001856:	4961      	ldr	r1, [pc, #388]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001858:	4313      	orrs	r3, r2
 800185a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001872:	d00a      	beq.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800187c:	2b00      	cmp	r3, #0
 800187e:	d035      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001888:	d130      	bne.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800188a:	4b54      	ldr	r3, [pc, #336]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800188c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	3301      	adds	r3, #1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800189c:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800189e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018a2:	0f1b      	lsrs	r3, r3, #28
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	019b      	lsls	r3, r3, #6
 80018b4:	431a      	orrs	r2, r3
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	085b      	lsrs	r3, r3, #1
 80018ba:	3b01      	subs	r3, #1
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	061b      	lsls	r3, r3, #24
 80018c6:	431a      	orrs	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	071b      	lsls	r3, r3, #28
 80018cc:	4943      	ldr	r1, [pc, #268]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80018d4:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018da:	f023 021f 	bic.w	r2, r3, #31
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	3b01      	subs	r3, #1
 80018e4:	493d      	ldr	r1, [pc, #244]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d029      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001900:	d124      	bne.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001902:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	3301      	adds	r3, #1
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800191a:	0f1b      	lsrs	r3, r3, #28
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	019b      	lsls	r3, r3, #6
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	041b      	lsls	r3, r3, #16
 8001938:	431a      	orrs	r2, r3
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	431a      	orrs	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	071b      	lsls	r3, r3, #28
 8001944:	4925      	ldr	r1, [pc, #148]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001946:	4313      	orrs	r3, r2
 8001948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001954:	2b00      	cmp	r3, #0
 8001956:	d016      	beq.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	019b      	lsls	r3, r3, #6
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	3b01      	subs	r3, #1
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	071b      	lsls	r3, r3, #28
 800197e:	4917      	ldr	r1, [pc, #92]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001980:	4313      	orrs	r3, r2
 8001982:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800198c:	f7ff f9d0 	bl	8000d30 <HAL_GetTick>
 8001990:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001994:	f7ff f9cc 	bl	8000d30 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e09f      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8095 	bne.w	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019c0:	f7ff f9b6 	bl	8000d30 <HAL_GetTick>
 80019c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019c6:	e00f      	b.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80019c8:	f7ff f9b2 	bl	8000d30 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d908      	bls.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e085      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	42470068 	.word	0x42470068
 80019e4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019e8:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019f4:	d0e8      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d02b      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d127      	bne.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699a      	ldr	r2, [r3, #24]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	4928      	ldr	r1, [pc, #160]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	3b01      	subs	r3, #1
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	4922      	ldr	r1, [pc, #136]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d01d      	beq.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a82:	d118      	bne.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	0e1b      	lsrs	r3, r3, #24
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	019b      	lsls	r3, r3, #6
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4910      	ldr	r1, [pc, #64]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001abc:	f7ff f938 	bl	8000d30 <HAL_GetTick>
 8001ac0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ac4:	f7ff f934 	bl	8000d30 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e007      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ae2:	d1ef      	bne.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3730      	adds	r7, #48	; 0x30
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	42470070 	.word	0x42470070

08001af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001afc:	b0a6      	sub	sp, #152	; 0x98
 8001afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b1e:	4bc8      	ldr	r3, [pc, #800]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	f200 817e 	bhi.w	8001e28 <HAL_RCC_GetSysClockFreq+0x330>
 8001b2c:	a201      	add	r2, pc, #4	; (adr r2, 8001b34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b32:	bf00      	nop
 8001b34:	08001b69 	.word	0x08001b69
 8001b38:	08001e29 	.word	0x08001e29
 8001b3c:	08001e29 	.word	0x08001e29
 8001b40:	08001e29 	.word	0x08001e29
 8001b44:	08001b71 	.word	0x08001b71
 8001b48:	08001e29 	.word	0x08001e29
 8001b4c:	08001e29 	.word	0x08001e29
 8001b50:	08001e29 	.word	0x08001e29
 8001b54:	08001b79 	.word	0x08001b79
 8001b58:	08001e29 	.word	0x08001e29
 8001b5c:	08001e29 	.word	0x08001e29
 8001b60:	08001e29 	.word	0x08001e29
 8001b64:	08001ce3 	.word	0x08001ce3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4bb6      	ldr	r3, [pc, #728]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001b6e:	e15f      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b70:	4bb5      	ldr	r3, [pc, #724]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001b76:	e15b      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b78:	4bb1      	ldr	r3, [pc, #708]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b84:	4bae      	ldr	r3, [pc, #696]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d031      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b90:	4bab      	ldr	r3, [pc, #684]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	099b      	lsrs	r3, r3, #6
 8001b96:	2200      	movs	r2, #0
 8001b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	667b      	str	r3, [r7, #100]	; 0x64
 8001ba8:	4ba7      	ldr	r3, [pc, #668]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8001baa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bae:	462a      	mov	r2, r5
 8001bb0:	fb03 f202 	mul.w	r2, r3, r2
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4aa2      	ldr	r2, [pc, #648]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	fba1 1202 	umull	r1, r2, r1, r2
 8001bc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001bc8:	460a      	mov	r2, r1
 8001bca:	67ba      	str	r2, [r7, #120]	; 0x78
 8001bcc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001bce:	4413      	add	r3, r2
 8001bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001be0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001be4:	f7fe fb0e 	bl	8000204 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bf2:	e064      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8001bfe:	657a      	str	r2, [r7, #84]	; 0x54
 8001c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c08:	2300      	movs	r3, #0
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c0c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001c10:	4622      	mov	r2, r4
 8001c12:	462b      	mov	r3, r5
 8001c14:	f04f 0000 	mov.w	r0, #0
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	0159      	lsls	r1, r3, #5
 8001c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c22:	0150      	lsls	r0, r2, #5
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4621      	mov	r1, r4
 8001c2a:	1a51      	subs	r1, r2, r1
 8001c2c:	6139      	str	r1, [r7, #16]
 8001c2e:	4629      	mov	r1, r5
 8001c30:	eb63 0301 	sbc.w	r3, r3, r1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c42:	4659      	mov	r1, fp
 8001c44:	018b      	lsls	r3, r1, #6
 8001c46:	4651      	mov	r1, sl
 8001c48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c4c:	4651      	mov	r1, sl
 8001c4e:	018a      	lsls	r2, r1, #6
 8001c50:	4651      	mov	r1, sl
 8001c52:	ebb2 0801 	subs.w	r8, r2, r1
 8001c56:	4659      	mov	r1, fp
 8001c58:	eb63 0901 	sbc.w	r9, r3, r1
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c70:	4690      	mov	r8, r2
 8001c72:	4699      	mov	r9, r3
 8001c74:	4623      	mov	r3, r4
 8001c76:	eb18 0303 	adds.w	r3, r8, r3
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	eb49 0303 	adc.w	r3, r9, r3
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c90:	4629      	mov	r1, r5
 8001c92:	028b      	lsls	r3, r1, #10
 8001c94:	4621      	mov	r1, r4
 8001c96:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	028a      	lsls	r2, r1, #10
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8001caa:	647a      	str	r2, [r7, #68]	; 0x44
 8001cac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cb0:	f7fe faa8 	bl	8000204 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbe:	4b60      	ldr	r3, [pc, #384]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	0c1b      	lsrs	r3, r3, #16
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001cd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001ce0:	e0a6      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce2:	4b57      	ldr	r3, [pc, #348]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cee:	4b54      	ldr	r3, [pc, #336]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d02a      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfa:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	099b      	lsrs	r3, r3, #6
 8001d00:	2200      	movs	r2, #0
 8001d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d10:	fb03 f201 	mul.w	r2, r3, r1
 8001d14:	2300      	movs	r3, #0
 8001d16:	fb00 f303 	mul.w	r3, r0, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a4a      	ldr	r2, [pc, #296]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d1e:	fba0 1202 	umull	r1, r2, r0, r2
 8001d22:	677a      	str	r2, [r7, #116]	; 0x74
 8001d24:	460a      	mov	r2, r1
 8001d26:	673a      	str	r2, [r7, #112]	; 0x70
 8001d28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d2a:	4413      	add	r3, r2
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d32:	2200      	movs	r2, #0
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
 8001d36:	637a      	str	r2, [r7, #52]	; 0x34
 8001d38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d3c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001d40:	f7fe fa60 	bl	8000204 <__aeabi_uldivmod>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4613      	mov	r3, r2
 8001d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d4e:	e05b      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d50:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	099b      	lsrs	r3, r3, #6
 8001d56:	2200      	movs	r2, #0
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d62:	623b      	str	r3, [r7, #32]
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d6c:	4642      	mov	r2, r8
 8001d6e:	464b      	mov	r3, r9
 8001d70:	f04f 0000 	mov.w	r0, #0
 8001d74:	f04f 0100 	mov.w	r1, #0
 8001d78:	0159      	lsls	r1, r3, #5
 8001d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d7e:	0150      	lsls	r0, r2, #5
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4641      	mov	r1, r8
 8001d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d8a:	4649      	mov	r1, r9
 8001d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001da4:	ebb2 040a 	subs.w	r4, r2, sl
 8001da8:	eb63 050b 	sbc.w	r5, r3, fp
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	00eb      	lsls	r3, r5, #3
 8001db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dba:	00e2      	lsls	r2, r4, #3
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	4643      	mov	r3, r8
 8001dc2:	18e3      	adds	r3, r4, r3
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	eb45 0303 	adc.w	r3, r5, r3
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dda:	4629      	mov	r1, r5
 8001ddc:	028b      	lsls	r3, r1, #10
 8001dde:	4621      	mov	r1, r4
 8001de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001de4:	4621      	mov	r1, r4
 8001de6:	028a      	lsls	r2, r1, #10
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001df0:	2200      	movs	r2, #0
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	61fa      	str	r2, [r7, #28]
 8001df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dfa:	f7fe fa03 	bl	8000204 <__aeabi_uldivmod>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4613      	mov	r3, r2
 8001e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	0f1b      	lsrs	r3, r3, #28
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001e16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001e26:	e003      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001e2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3798      	adds	r7, #152	; 0x98
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	017d7840 	.word	0x017d7840

08001e4c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001e52:	f7fe ff6d 	bl	8000d30 <HAL_GetTick>
 8001e56:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e58:	4b72      	ldr	r3, [pc, #456]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a71      	ldr	r2, [pc, #452]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e66:	f7fe ff63 	bl	8000d30 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e0d0      	b.n	800201a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001e84:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a66      	ldr	r2, [pc, #408]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001e90:	f7fe ff4e 	bl	8000d30 <HAL_GetTick>
 8001e94:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9e:	f7fe ff47 	bl	8000d30 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0b2      	b.n	800201a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001eb4:	4b5b      	ldr	r3, [pc, #364]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ee      	bne.n	8001e9e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ec0:	f7fe ff36 	bl	8000d30 <HAL_GetTick>
 8001ec4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001ec6:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a56      	ldr	r2, [pc, #344]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001ecc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7fe ff2c 	bl	8000d30 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e099      	b.n	800201a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001ee6:	4b4f      	ldr	r3, [pc, #316]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ef2:	f7fe ff1d 	bl	8000d30 <HAL_GetTick>
 8001ef6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ef8:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a49      	ldr	r2, [pc, #292]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f02:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7fe ff13 	bl	8000d30 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e080      	b.n	800201a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f24:	f7fe ff04 	bl	8000d30 <HAL_GetTick>
 8001f28:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001f2a:	4b3e      	ldr	r3, [pc, #248]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a3d      	ldr	r2, [pc, #244]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f34:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f38:	f7fe fefa 	bl	8000d30 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e067      	b.n	800201a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f56:	f7fe feeb 	bl	8000d30 <HAL_GetTick>
 8001f5a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a30      	ldr	r2, [pc, #192]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f66:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f6a:	f7fe fee1 	bl	8000d30 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e04e      	b.n	800201a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f8a:	4a27      	ldr	r2, [pc, #156]	; (8002028 <HAL_RCC_DeInit+0x1dc>)
 8001f8c:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <HAL_RCC_DeInit+0x1dc>)
 8001f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <HAL_RCC_DeInit+0x1e0>)
 8001f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	4a20      	ldr	r2, [pc, #128]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fa4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001fa8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fb4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fc0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fc8:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8001fcc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fe0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fe4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fea:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <HAL_RCC_DeInit+0x1d8>)
 8001ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffc:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCC_DeInit+0x1e4>)
 8002000:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <HAL_RCC_DeInit+0x1e8>)
 8002002:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_RCC_DeInit+0x1ec>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fe4d 	bl	8000ca8 <HAL_InitTick>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002018:	2300      	movs	r3, #0
  }
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	24003010 	.word	0x24003010
 800202c:	04003010 	.word	0x04003010
 8002030:	20000000 	.word	0x20000000
 8002034:	00f42400 	.word	0x00f42400
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e28d      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8083 	beq.w	8002162 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800205c:	4b94      	ldr	r3, [pc, #592]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b04      	cmp	r3, #4
 8002066:	d019      	beq.n	800209c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002068:	4b91      	ldr	r3, [pc, #580]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002070:	2b08      	cmp	r3, #8
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002074:	4b8e      	ldr	r3, [pc, #568]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002080:	d00c      	beq.n	800209c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002082:	4b8b      	ldr	r3, [pc, #556]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d112      	bne.n	80020b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208e:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800209a:	d10b      	bne.n	80020b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	4b84      	ldr	r3, [pc, #528]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d05b      	beq.n	8002160 <HAL_RCC_OscConfig+0x124>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d157      	bne.n	8002160 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e25a      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020bc:	d106      	bne.n	80020cc <HAL_RCC_OscConfig+0x90>
 80020be:	4b7c      	ldr	r3, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7b      	ldr	r2, [pc, #492]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e01d      	b.n	8002108 <HAL_RCC_OscConfig+0xcc>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0xb4>
 80020d6:	4b76      	ldr	r3, [pc, #472]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a75      	ldr	r2, [pc, #468]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80020dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b73      	ldr	r3, [pc, #460]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a72      	ldr	r2, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0xcc>
 80020f0:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a6e      	ldr	r2, [pc, #440]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80020f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b6c      	ldr	r3, [pc, #432]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a6b      	ldr	r2, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d013      	beq.n	8002138 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe fe0e 	bl	8000d30 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002118:	f7fe fe0a 	bl	8000d30 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	; 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e21f      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b61      	ldr	r3, [pc, #388]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0xdc>
 8002136:	e014      	b.n	8002162 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe fdfa 	bl	8000d30 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002140:	f7fe fdf6 	bl	8000d30 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e20b      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002152:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x104>
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06f      	beq.n	800224e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800216e:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b00      	cmp	r3, #0
 8002178:	d017      	beq.n	80021aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800217a:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002182:	2b08      	cmp	r3, #8
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800219a:	2b0c      	cmp	r3, #12
 800219c:	d11c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219e:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d116      	bne.n	80021d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x186>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e1d3      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4937      	ldr	r1, [pc, #220]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	e03a      	b.n	800224e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e0:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_RCC_OscConfig+0x278>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe fda3 	bl	8000d30 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ee:	f7fe fd9f 	bl	8000d30 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1b4      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4925      	ldr	r1, [pc, #148]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002222:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCC_OscConfig+0x278>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fd82 	bl	8000d30 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe fd7e 	bl	8000d30 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e193      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d036      	beq.n	80022c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_RCC_OscConfig+0x27c>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7fe fd62 	bl	8000d30 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002270:	f7fe fd5e 	bl	8000d30 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e173      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x234>
 800228e:	e01b      	b.n	80022c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_OscConfig+0x27c>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe fd4b 	bl	8000d30 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	e00e      	b.n	80022bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229e:	f7fe fd47 	bl	8000d30 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d907      	bls.n	80022bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e15c      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	42470000 	.word	0x42470000
 80022b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	4b8a      	ldr	r3, [pc, #552]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80022be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1ea      	bne.n	800229e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8097 	beq.w	8002404 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	4b7f      	ldr	r3, [pc, #508]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a7e      	ldr	r2, [pc, #504]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b7c      	ldr	r3, [pc, #496]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002302:	2301      	movs	r3, #1
 8002304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b79      	ldr	r3, [pc, #484]	; (80024ec <HAL_RCC_OscConfig+0x4b0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4b76      	ldr	r3, [pc, #472]	; (80024ec <HAL_RCC_OscConfig+0x4b0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a75      	ldr	r2, [pc, #468]	; (80024ec <HAL_RCC_OscConfig+0x4b0>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7fe fd07 	bl	8000d30 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002326:	f7fe fd03 	bl	8000d30 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e118      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	4b6c      	ldr	r3, [pc, #432]	; (80024ec <HAL_RCC_OscConfig+0x4b0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x31e>
 800234c:	4b66      	ldr	r3, [pc, #408]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002350:	4a65      	ldr	r2, [pc, #404]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6713      	str	r3, [r2, #112]	; 0x70
 8002358:	e01c      	b.n	8002394 <HAL_RCC_OscConfig+0x358>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b05      	cmp	r3, #5
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x340>
 8002362:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a60      	ldr	r2, [pc, #384]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
 800236e:	4b5e      	ldr	r3, [pc, #376]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	4a5d      	ldr	r2, [pc, #372]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6713      	str	r3, [r2, #112]	; 0x70
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0x358>
 800237c:	4b5a      	ldr	r3, [pc, #360]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	4a59      	ldr	r2, [pc, #356]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6713      	str	r3, [r2, #112]	; 0x70
 8002388:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a56      	ldr	r2, [pc, #344]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 800238e:	f023 0304 	bic.w	r3, r3, #4
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7fe fcc8 	bl	8000d30 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7fe fcc4 	bl	8000d30 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0d7      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ba:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0ee      	beq.n	80023a4 <HAL_RCC_OscConfig+0x368>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7fe fcb2 	bl	8000d30 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d0:	f7fe fcae 	bl	8000d30 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0c1      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e6:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1ee      	bne.n	80023d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f8:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a3a      	ldr	r2, [pc, #232]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80023fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80ad 	beq.w	8002568 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800240e:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b08      	cmp	r3, #8
 8002418:	d060      	beq.n	80024dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d145      	bne.n	80024ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <HAL_RCC_OscConfig+0x4b4>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fc82 	bl	8000d30 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fc7e 	bl	8000d30 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e093      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	019b      	lsls	r3, r3, #6
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	3b01      	subs	r3, #1
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	071b      	lsls	r3, r3, #28
 800247a:	491b      	ldr	r1, [pc, #108]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x4b4>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe fc53 	bl	8000d30 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe fc4f 	bl	8000d30 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e064      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x452>
 80024ac:	e05c      	b.n	8002568 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_RCC_OscConfig+0x4b4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fc3c 	bl	8000d30 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe fc38 	bl	8000d30 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e04d      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x480>
 80024da:	e045      	b.n	8002568 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e040      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40007000 	.word	0x40007000
 80024f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <HAL_RCC_OscConfig+0x538>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d030      	beq.n	8002564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d129      	bne.n	8002564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d122      	bne.n	8002564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002524:	4013      	ands	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800252a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800252c:	4293      	cmp	r3, r2
 800252e:	d119      	bne.n	8002564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	3b01      	subs	r3, #1
 800253e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d10f      	bne.n	8002564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e073      	b.n	8002676 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7f5b      	ldrb	r3, [r3, #29]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe f98e 	bl	80008c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d055      	beq.n	8002664 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	22ca      	movs	r2, #202	; 0xca
 80025be:	625a      	str	r2, [r3, #36]	; 0x24
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2253      	movs	r2, #83	; 0x53
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f99d 	bl	8002908 <RTC_EnterInitMode>
 80025ce:	4603      	mov	r3, r0
 80025d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d12c      	bne.n	8002632 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80025e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ea:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6919      	ldr	r1, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	041a      	lsls	r2, r3, #16
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f9a4 	bl	8002976 <RTC_ExitInitMode>
 800262e:	4603      	mov	r3, r0
 8002630:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d110      	bne.n	800265a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	22ff      	movs	r2, #255	; 0xff
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
 8002662:	e001      	b.n	8002668 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800267e:	b590      	push	{r4, r7, lr}
 8002680:	b087      	sub	sp, #28
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	7f1b      	ldrb	r3, [r3, #28]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_RTC_SetTime+0x1c>
 8002696:	2302      	movs	r3, #2
 8002698:	e087      	b.n	80027aa <HAL_RTC_SetTime+0x12c>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2202      	movs	r2, #2
 80026a4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d126      	bne.n	80026fa <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f97b 	bl	80029c0 <RTC_ByteToBcd2>
 80026ca:	4603      	mov	r3, r0
 80026cc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f974 	bl	80029c0 <RTC_ByteToBcd2>
 80026d8:	4603      	mov	r3, r0
 80026da:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80026dc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	789b      	ldrb	r3, [r3, #2]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f96c 	bl	80029c0 <RTC_ByteToBcd2>
 80026e8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026ea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	78db      	ldrb	r3, [r3, #3]
 80026f2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	e018      	b.n	800272c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800271a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002720:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	78db      	ldrb	r3, [r3, #3]
 8002726:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	22ca      	movs	r2, #202	; 0xca
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2253      	movs	r2, #83	; 0x53
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f8e3 	bl	8002908 <RTC_EnterInitMode>
 8002742:	4603      	mov	r3, r0
 8002744:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d120      	bne.n	800278e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002756:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800275a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800276a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	431a      	orrs	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f8f6 	bl	8002976 <RTC_ExitInitMode>
 800278a:	4603      	mov	r3, r0
 800278c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	22ff      	movs	r2, #255	; 0xff
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]

  return status;
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}

080027b2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027b2:	b590      	push	{r4, r7, lr}
 80027b4:	b087      	sub	sp, #28
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	7f1b      	ldrb	r3, [r3, #28]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_RTC_SetDate+0x1c>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e071      	b.n	80028b2 <HAL_RTC_SetDate+0x100>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2202      	movs	r2, #2
 80027d8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10e      	bne.n	80027fe <HAL_RTC_SetDate+0x4c>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	f023 0310 	bic.w	r3, r3, #16
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	330a      	adds	r3, #10
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11c      	bne.n	800283e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	78db      	ldrb	r3, [r3, #3]
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f8d9 	bl	80029c0 <RTC_ByteToBcd2>
 800280e:	4603      	mov	r3, r0
 8002810:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f8d2 	bl	80029c0 <RTC_ByteToBcd2>
 800281c:	4603      	mov	r3, r0
 800281e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002820:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	789b      	ldrb	r3, [r3, #2]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f8ca 	bl	80029c0 <RTC_ByteToBcd2>
 800282c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800282e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	e00e      	b.n	800285c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	78db      	ldrb	r3, [r3, #3]
 8002842:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	785b      	ldrb	r3, [r3, #1]
 8002848:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800284a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002850:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	22ca      	movs	r2, #202	; 0xca
 8002862:	625a      	str	r2, [r3, #36]	; 0x24
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2253      	movs	r2, #83	; 0x53
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f84b 	bl	8002908 <RTC_EnterInitMode>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10c      	bne.n	8002896 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002886:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800288a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f872 	bl	8002976 <RTC_ExitInitMode>
 8002892:	4603      	mov	r3, r0
 8002894:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	22ff      	movs	r2, #255	; 0xff
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]

  return status;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd90      	pop	{r4, r7, pc}
	...

080028bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <HAL_RTC_WaitForSynchro+0x48>)
 80028ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d0:	f7fe fa2e 	bl	8000d30 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80028d6:	e009      	b.n	80028ec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028d8:	f7fe fa2a 	bl	8000d30 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e6:	d901      	bls.n	80028ec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e007      	b.n	80028fc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ee      	beq.n	80028d8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	00017f5f 	.word	0x00017f5f

08002908 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d122      	bne.n	800296c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002934:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002936:	f7fe f9fb 	bl	8000d30 <HAL_GetTick>
 800293a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800293c:	e00c      	b.n	8002958 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800293e:	f7fe f9f7 	bl	8000d30 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800294c:	d904      	bls.n	8002958 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2204      	movs	r2, #4
 8002952:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <RTC_EnterInitMode+0x64>
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d1e8      	bne.n	800293e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002990:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff8b 	bl	80028bc <HAL_RTC_WaitForSynchro>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80029ce:	e005      	b.n	80029dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3301      	adds	r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	3b0a      	subs	r3, #10
 80029da:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2b09      	cmp	r3, #9
 80029e0:	d8f6      	bhi.n	80029d0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b2db      	uxtb	r3, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e042      	b.n	8002a94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fd ff76 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f82b 	bl	8002a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa0:	b0c0      	sub	sp, #256	; 0x100
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	68d9      	ldr	r1, [r3, #12]
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	ea40 0301 	orr.w	r3, r0, r1
 8002ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002af4:	f021 010c 	bic.w	r1, r1, #12
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b02:	430b      	orrs	r3, r1
 8002b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b16:	6999      	ldr	r1, [r3, #24]
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	ea40 0301 	orr.w	r3, r0, r1
 8002b22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b8f      	ldr	r3, [pc, #572]	; (8002d68 <UART_SetConfig+0x2cc>)
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d005      	beq.n	8002b3c <UART_SetConfig+0xa0>
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b8d      	ldr	r3, [pc, #564]	; (8002d6c <UART_SetConfig+0x2d0>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d104      	bne.n	8002b46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b3c:	f7fe fc9e 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 8002b40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b44:	e003      	b.n	8002b4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b46:	f7fe fc85 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
 8002b4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b58:	f040 810c 	bne.w	8002d74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	1891      	adds	r1, r2, r2
 8002b74:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b76:	415b      	adcs	r3, r3
 8002b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b7e:	4621      	mov	r1, r4
 8002b80:	eb12 0801 	adds.w	r8, r2, r1
 8002b84:	4629      	mov	r1, r5
 8002b86:	eb43 0901 	adc.w	r9, r3, r1
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	eb18 0303 	adds.w	r3, r8, r3
 8002ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bac:	462b      	mov	r3, r5
 8002bae:	eb49 0303 	adc.w	r3, r9, r3
 8002bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bca:	460b      	mov	r3, r1
 8002bcc:	18db      	adds	r3, r3, r3
 8002bce:	653b      	str	r3, [r7, #80]	; 0x50
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	eb42 0303 	adc.w	r3, r2, r3
 8002bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8002bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002be0:	f7fd fb10 	bl	8000204 <__aeabi_uldivmod>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <UART_SetConfig+0x2d4>)
 8002bea:	fba3 2302 	umull	r2, r3, r3, r2
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	011c      	lsls	r4, r3, #4
 8002bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c04:	4642      	mov	r2, r8
 8002c06:	464b      	mov	r3, r9
 8002c08:	1891      	adds	r1, r2, r2
 8002c0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c0c:	415b      	adcs	r3, r3
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c14:	4641      	mov	r1, r8
 8002c16:	eb12 0a01 	adds.w	sl, r2, r1
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	eb43 0b01 	adc.w	fp, r3, r1
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c34:	4692      	mov	sl, r2
 8002c36:	469b      	mov	fp, r3
 8002c38:	4643      	mov	r3, r8
 8002c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c42:	464b      	mov	r3, r9
 8002c44:	eb4b 0303 	adc.w	r3, fp, r3
 8002c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c60:	460b      	mov	r3, r1
 8002c62:	18db      	adds	r3, r3, r3
 8002c64:	643b      	str	r3, [r7, #64]	; 0x40
 8002c66:	4613      	mov	r3, r2
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c76:	f7fd fac5 	bl	8000204 <__aeabi_uldivmod>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <UART_SetConfig+0x2d4>)
 8002c82:	fba3 2301 	umull	r2, r3, r3, r1
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2264      	movs	r2, #100	; 0x64
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	1acb      	subs	r3, r1, r3
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c96:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <UART_SetConfig+0x2d4>)
 8002c98:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ca4:	441c      	add	r4, r3
 8002ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cb8:	4642      	mov	r2, r8
 8002cba:	464b      	mov	r3, r9
 8002cbc:	1891      	adds	r1, r2, r2
 8002cbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cc0:	415b      	adcs	r3, r3
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cc8:	4641      	mov	r1, r8
 8002cca:	1851      	adds	r1, r2, r1
 8002ccc:	6339      	str	r1, [r7, #48]	; 0x30
 8002cce:	4649      	mov	r1, r9
 8002cd0:	414b      	adcs	r3, r1
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ce0:	4659      	mov	r1, fp
 8002ce2:	00cb      	lsls	r3, r1, #3
 8002ce4:	4651      	mov	r1, sl
 8002ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cea:	4651      	mov	r1, sl
 8002cec:	00ca      	lsls	r2, r1, #3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	189b      	adds	r3, r3, r2
 8002cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	460a      	mov	r2, r1
 8002d00:	eb42 0303 	adc.w	r3, r2, r3
 8002d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	18db      	adds	r3, r3, r3
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d22:	4613      	mov	r3, r2
 8002d24:	eb42 0303 	adc.w	r3, r2, r3
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d32:	f7fd fa67 	bl	8000204 <__aeabi_uldivmod>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <UART_SetConfig+0x2d4>)
 8002d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	2164      	movs	r1, #100	; 0x64
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	3332      	adds	r3, #50	; 0x32
 8002d4e:	4a08      	ldr	r2, [pc, #32]	; (8002d70 <UART_SetConfig+0x2d4>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	f003 0207 	and.w	r2, r3, #7
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4422      	add	r2, r4
 8002d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d64:	e106      	b.n	8002f74 <UART_SetConfig+0x4d8>
 8002d66:	bf00      	nop
 8002d68:	40011000 	.word	0x40011000
 8002d6c:	40011400 	.word	0x40011400
 8002d70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d86:	4642      	mov	r2, r8
 8002d88:	464b      	mov	r3, r9
 8002d8a:	1891      	adds	r1, r2, r2
 8002d8c:	6239      	str	r1, [r7, #32]
 8002d8e:	415b      	adcs	r3, r3
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d96:	4641      	mov	r1, r8
 8002d98:	1854      	adds	r4, r2, r1
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	eb43 0501 	adc.w	r5, r3, r1
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	00eb      	lsls	r3, r5, #3
 8002daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dae:	00e2      	lsls	r2, r4, #3
 8002db0:	4614      	mov	r4, r2
 8002db2:	461d      	mov	r5, r3
 8002db4:	4643      	mov	r3, r8
 8002db6:	18e3      	adds	r3, r4, r3
 8002db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	eb45 0303 	adc.w	r3, r5, r3
 8002dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002de2:	4629      	mov	r1, r5
 8002de4:	008b      	lsls	r3, r1, #2
 8002de6:	4621      	mov	r1, r4
 8002de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dec:	4621      	mov	r1, r4
 8002dee:	008a      	lsls	r2, r1, #2
 8002df0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002df4:	f7fd fa06 	bl	8000204 <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4b60      	ldr	r3, [pc, #384]	; (8002f80 <UART_SetConfig+0x4e4>)
 8002dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	011c      	lsls	r4, r3, #4
 8002e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e18:	4642      	mov	r2, r8
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	1891      	adds	r1, r2, r2
 8002e1e:	61b9      	str	r1, [r7, #24]
 8002e20:	415b      	adcs	r3, r3
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e28:	4641      	mov	r1, r8
 8002e2a:	1851      	adds	r1, r2, r1
 8002e2c:	6139      	str	r1, [r7, #16]
 8002e2e:	4649      	mov	r1, r9
 8002e30:	414b      	adcs	r3, r1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e40:	4659      	mov	r1, fp
 8002e42:	00cb      	lsls	r3, r1, #3
 8002e44:	4651      	mov	r1, sl
 8002e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e4a:	4651      	mov	r1, sl
 8002e4c:	00ca      	lsls	r2, r1, #3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	4642      	mov	r2, r8
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e5c:	464b      	mov	r3, r9
 8002e5e:	460a      	mov	r2, r1
 8002e60:	eb42 0303 	adc.w	r3, r2, r3
 8002e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e80:	4649      	mov	r1, r9
 8002e82:	008b      	lsls	r3, r1, #2
 8002e84:	4641      	mov	r1, r8
 8002e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	008a      	lsls	r2, r1, #2
 8002e8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e92:	f7fd f9b7 	bl	8000204 <__aeabi_uldivmod>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <UART_SetConfig+0x4e4>)
 8002e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2264      	movs	r2, #100	; 0x64
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	1acb      	subs	r3, r1, r3
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	3332      	adds	r3, #50	; 0x32
 8002eb0:	4a33      	ldr	r2, [pc, #204]	; (8002f80 <UART_SetConfig+0x4e4>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ebc:	441c      	add	r4, r3
 8002ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ec6:	677a      	str	r2, [r7, #116]	; 0x74
 8002ec8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ecc:	4642      	mov	r2, r8
 8002ece:	464b      	mov	r3, r9
 8002ed0:	1891      	adds	r1, r2, r2
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	415b      	adcs	r3, r3
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002edc:	4641      	mov	r1, r8
 8002ede:	1851      	adds	r1, r2, r1
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	414b      	adcs	r3, r1
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	00cb      	lsls	r3, r1, #3
 8002ef8:	4651      	mov	r1, sl
 8002efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002efe:	4651      	mov	r1, sl
 8002f00:	00ca      	lsls	r2, r1, #3
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	4642      	mov	r2, r8
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f0e:	464b      	mov	r3, r9
 8002f10:	460a      	mov	r2, r1
 8002f12:	eb42 0303 	adc.w	r3, r2, r3
 8002f16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	663b      	str	r3, [r7, #96]	; 0x60
 8002f22:	667a      	str	r2, [r7, #100]	; 0x64
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f30:	4649      	mov	r1, r9
 8002f32:	008b      	lsls	r3, r1, #2
 8002f34:	4641      	mov	r1, r8
 8002f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	008a      	lsls	r2, r1, #2
 8002f3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f42:	f7fd f95f 	bl	8000204 <__aeabi_uldivmod>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <UART_SetConfig+0x4e4>)
 8002f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f50:	095b      	lsrs	r3, r3, #5
 8002f52:	2164      	movs	r1, #100	; 0x64
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	3332      	adds	r3, #50	; 0x32
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <UART_SetConfig+0x4e4>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	f003 020f 	and.w	r2, r3, #15
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4422      	add	r2, r4
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f80:	51eb851f 	.word	0x51eb851f

08002f84 <std>:
 8002f84:	2300      	movs	r3, #0
 8002f86:	b510      	push	{r4, lr}
 8002f88:	4604      	mov	r4, r0
 8002f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f92:	6083      	str	r3, [r0, #8]
 8002f94:	8181      	strh	r1, [r0, #12]
 8002f96:	6643      	str	r3, [r0, #100]	; 0x64
 8002f98:	81c2      	strh	r2, [r0, #14]
 8002f9a:	6183      	str	r3, [r0, #24]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	305c      	adds	r0, #92	; 0x5c
 8002fa2:	f000 f90d 	bl	80031c0 <memset>
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <std+0x58>)
 8002fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <std+0x5c>)
 8002fac:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <std+0x60>)
 8002fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <std+0x64>)
 8002fb4:	6323      	str	r3, [r4, #48]	; 0x30
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <std+0x68>)
 8002fb8:	6224      	str	r4, [r4, #32]
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d006      	beq.n	8002fcc <std+0x48>
 8002fbe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002fc2:	4294      	cmp	r4, r2
 8002fc4:	d002      	beq.n	8002fcc <std+0x48>
 8002fc6:	33d0      	adds	r3, #208	; 0xd0
 8002fc8:	429c      	cmp	r4, r3
 8002fca:	d105      	bne.n	8002fd8 <std+0x54>
 8002fcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd4:	f000 b926 	b.w	8003224 <__retarget_lock_init_recursive>
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	bf00      	nop
 8002fdc:	080034e1 	.word	0x080034e1
 8002fe0:	08003503 	.word	0x08003503
 8002fe4:	0800353b 	.word	0x0800353b
 8002fe8:	0800355f 	.word	0x0800355f
 8002fec:	200000f4 	.word	0x200000f4

08002ff0 <stdio_exit_handler>:
 8002ff0:	4a02      	ldr	r2, [pc, #8]	; (8002ffc <stdio_exit_handler+0xc>)
 8002ff2:	4903      	ldr	r1, [pc, #12]	; (8003000 <stdio_exit_handler+0x10>)
 8002ff4:	4803      	ldr	r0, [pc, #12]	; (8003004 <stdio_exit_handler+0x14>)
 8002ff6:	f000 b869 	b.w	80030cc <_fwalk_sglue>
 8002ffa:	bf00      	nop
 8002ffc:	2000000c 	.word	0x2000000c
 8003000:	08003479 	.word	0x08003479
 8003004:	20000018 	.word	0x20000018

08003008 <cleanup_stdio>:
 8003008:	6841      	ldr	r1, [r0, #4]
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <cleanup_stdio+0x34>)
 800300c:	4299      	cmp	r1, r3
 800300e:	b510      	push	{r4, lr}
 8003010:	4604      	mov	r4, r0
 8003012:	d001      	beq.n	8003018 <cleanup_stdio+0x10>
 8003014:	f000 fa30 	bl	8003478 <_fflush_r>
 8003018:	68a1      	ldr	r1, [r4, #8]
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <cleanup_stdio+0x38>)
 800301c:	4299      	cmp	r1, r3
 800301e:	d002      	beq.n	8003026 <cleanup_stdio+0x1e>
 8003020:	4620      	mov	r0, r4
 8003022:	f000 fa29 	bl	8003478 <_fflush_r>
 8003026:	68e1      	ldr	r1, [r4, #12]
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <cleanup_stdio+0x3c>)
 800302a:	4299      	cmp	r1, r3
 800302c:	d004      	beq.n	8003038 <cleanup_stdio+0x30>
 800302e:	4620      	mov	r0, r4
 8003030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003034:	f000 ba20 	b.w	8003478 <_fflush_r>
 8003038:	bd10      	pop	{r4, pc}
 800303a:	bf00      	nop
 800303c:	200000f4 	.word	0x200000f4
 8003040:	2000015c 	.word	0x2000015c
 8003044:	200001c4 	.word	0x200001c4

08003048 <global_stdio_init.part.0>:
 8003048:	b510      	push	{r4, lr}
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <global_stdio_init.part.0+0x30>)
 800304c:	4c0b      	ldr	r4, [pc, #44]	; (800307c <global_stdio_init.part.0+0x34>)
 800304e:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <global_stdio_init.part.0+0x38>)
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	4620      	mov	r0, r4
 8003054:	2200      	movs	r2, #0
 8003056:	2104      	movs	r1, #4
 8003058:	f7ff ff94 	bl	8002f84 <std>
 800305c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003060:	2201      	movs	r2, #1
 8003062:	2109      	movs	r1, #9
 8003064:	f7ff ff8e 	bl	8002f84 <std>
 8003068:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800306c:	2202      	movs	r2, #2
 800306e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003072:	2112      	movs	r1, #18
 8003074:	f7ff bf86 	b.w	8002f84 <std>
 8003078:	2000022c 	.word	0x2000022c
 800307c:	200000f4 	.word	0x200000f4
 8003080:	08002ff1 	.word	0x08002ff1

08003084 <__sfp_lock_acquire>:
 8003084:	4801      	ldr	r0, [pc, #4]	; (800308c <__sfp_lock_acquire+0x8>)
 8003086:	f000 b8ce 	b.w	8003226 <__retarget_lock_acquire_recursive>
 800308a:	bf00      	nop
 800308c:	20000231 	.word	0x20000231

08003090 <__sfp_lock_release>:
 8003090:	4801      	ldr	r0, [pc, #4]	; (8003098 <__sfp_lock_release+0x8>)
 8003092:	f000 b8c9 	b.w	8003228 <__retarget_lock_release_recursive>
 8003096:	bf00      	nop
 8003098:	20000231 	.word	0x20000231

0800309c <__sinit>:
 800309c:	b510      	push	{r4, lr}
 800309e:	4604      	mov	r4, r0
 80030a0:	f7ff fff0 	bl	8003084 <__sfp_lock_acquire>
 80030a4:	6a23      	ldr	r3, [r4, #32]
 80030a6:	b11b      	cbz	r3, 80030b0 <__sinit+0x14>
 80030a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030ac:	f7ff bff0 	b.w	8003090 <__sfp_lock_release>
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <__sinit+0x28>)
 80030b2:	6223      	str	r3, [r4, #32]
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <__sinit+0x2c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f5      	bne.n	80030a8 <__sinit+0xc>
 80030bc:	f7ff ffc4 	bl	8003048 <global_stdio_init.part.0>
 80030c0:	e7f2      	b.n	80030a8 <__sinit+0xc>
 80030c2:	bf00      	nop
 80030c4:	08003009 	.word	0x08003009
 80030c8:	2000022c 	.word	0x2000022c

080030cc <_fwalk_sglue>:
 80030cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030d0:	4607      	mov	r7, r0
 80030d2:	4688      	mov	r8, r1
 80030d4:	4614      	mov	r4, r2
 80030d6:	2600      	movs	r6, #0
 80030d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030dc:	f1b9 0901 	subs.w	r9, r9, #1
 80030e0:	d505      	bpl.n	80030ee <_fwalk_sglue+0x22>
 80030e2:	6824      	ldr	r4, [r4, #0]
 80030e4:	2c00      	cmp	r4, #0
 80030e6:	d1f7      	bne.n	80030d8 <_fwalk_sglue+0xc>
 80030e8:	4630      	mov	r0, r6
 80030ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ee:	89ab      	ldrh	r3, [r5, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d907      	bls.n	8003104 <_fwalk_sglue+0x38>
 80030f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030f8:	3301      	adds	r3, #1
 80030fa:	d003      	beq.n	8003104 <_fwalk_sglue+0x38>
 80030fc:	4629      	mov	r1, r5
 80030fe:	4638      	mov	r0, r7
 8003100:	47c0      	blx	r8
 8003102:	4306      	orrs	r6, r0
 8003104:	3568      	adds	r5, #104	; 0x68
 8003106:	e7e9      	b.n	80030dc <_fwalk_sglue+0x10>

08003108 <_puts_r>:
 8003108:	6a03      	ldr	r3, [r0, #32]
 800310a:	b570      	push	{r4, r5, r6, lr}
 800310c:	6884      	ldr	r4, [r0, #8]
 800310e:	4605      	mov	r5, r0
 8003110:	460e      	mov	r6, r1
 8003112:	b90b      	cbnz	r3, 8003118 <_puts_r+0x10>
 8003114:	f7ff ffc2 	bl	800309c <__sinit>
 8003118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800311a:	07db      	lsls	r3, r3, #31
 800311c:	d405      	bmi.n	800312a <_puts_r+0x22>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	0598      	lsls	r0, r3, #22
 8003122:	d402      	bmi.n	800312a <_puts_r+0x22>
 8003124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003126:	f000 f87e 	bl	8003226 <__retarget_lock_acquire_recursive>
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	0719      	lsls	r1, r3, #28
 800312e:	d513      	bpl.n	8003158 <_puts_r+0x50>
 8003130:	6923      	ldr	r3, [r4, #16]
 8003132:	b18b      	cbz	r3, 8003158 <_puts_r+0x50>
 8003134:	3e01      	subs	r6, #1
 8003136:	68a3      	ldr	r3, [r4, #8]
 8003138:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800313c:	3b01      	subs	r3, #1
 800313e:	60a3      	str	r3, [r4, #8]
 8003140:	b9e9      	cbnz	r1, 800317e <_puts_r+0x76>
 8003142:	2b00      	cmp	r3, #0
 8003144:	da2e      	bge.n	80031a4 <_puts_r+0x9c>
 8003146:	4622      	mov	r2, r4
 8003148:	210a      	movs	r1, #10
 800314a:	4628      	mov	r0, r5
 800314c:	f000 fa0b 	bl	8003566 <__swbuf_r>
 8003150:	3001      	adds	r0, #1
 8003152:	d007      	beq.n	8003164 <_puts_r+0x5c>
 8003154:	250a      	movs	r5, #10
 8003156:	e007      	b.n	8003168 <_puts_r+0x60>
 8003158:	4621      	mov	r1, r4
 800315a:	4628      	mov	r0, r5
 800315c:	f000 fa40 	bl	80035e0 <__swsetup_r>
 8003160:	2800      	cmp	r0, #0
 8003162:	d0e7      	beq.n	8003134 <_puts_r+0x2c>
 8003164:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316a:	07da      	lsls	r2, r3, #31
 800316c:	d405      	bmi.n	800317a <_puts_r+0x72>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	059b      	lsls	r3, r3, #22
 8003172:	d402      	bmi.n	800317a <_puts_r+0x72>
 8003174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003176:	f000 f857 	bl	8003228 <__retarget_lock_release_recursive>
 800317a:	4628      	mov	r0, r5
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	2b00      	cmp	r3, #0
 8003180:	da04      	bge.n	800318c <_puts_r+0x84>
 8003182:	69a2      	ldr	r2, [r4, #24]
 8003184:	429a      	cmp	r2, r3
 8003186:	dc06      	bgt.n	8003196 <_puts_r+0x8e>
 8003188:	290a      	cmp	r1, #10
 800318a:	d004      	beq.n	8003196 <_puts_r+0x8e>
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	6022      	str	r2, [r4, #0]
 8003192:	7019      	strb	r1, [r3, #0]
 8003194:	e7cf      	b.n	8003136 <_puts_r+0x2e>
 8003196:	4622      	mov	r2, r4
 8003198:	4628      	mov	r0, r5
 800319a:	f000 f9e4 	bl	8003566 <__swbuf_r>
 800319e:	3001      	adds	r0, #1
 80031a0:	d1c9      	bne.n	8003136 <_puts_r+0x2e>
 80031a2:	e7df      	b.n	8003164 <_puts_r+0x5c>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	250a      	movs	r5, #10
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	6022      	str	r2, [r4, #0]
 80031ac:	701d      	strb	r5, [r3, #0]
 80031ae:	e7db      	b.n	8003168 <_puts_r+0x60>

080031b0 <puts>:
 80031b0:	4b02      	ldr	r3, [pc, #8]	; (80031bc <puts+0xc>)
 80031b2:	4601      	mov	r1, r0
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f7ff bfa7 	b.w	8003108 <_puts_r>
 80031ba:	bf00      	nop
 80031bc:	20000064 	.word	0x20000064

080031c0 <memset>:
 80031c0:	4402      	add	r2, r0
 80031c2:	4603      	mov	r3, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <__errno>:
 80031d0:	4b01      	ldr	r3, [pc, #4]	; (80031d8 <__errno+0x8>)
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000064 	.word	0x20000064

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4d0d      	ldr	r5, [pc, #52]	; (8003214 <__libc_init_array+0x38>)
 80031e0:	4c0d      	ldr	r4, [pc, #52]	; (8003218 <__libc_init_array+0x3c>)
 80031e2:	1b64      	subs	r4, r4, r5
 80031e4:	10a4      	asrs	r4, r4, #2
 80031e6:	2600      	movs	r6, #0
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	4d0b      	ldr	r5, [pc, #44]	; (800321c <__libc_init_array+0x40>)
 80031ee:	4c0c      	ldr	r4, [pc, #48]	; (8003220 <__libc_init_array+0x44>)
 80031f0:	f000 fb74 	bl	80038dc <_init>
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	2600      	movs	r6, #0
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f855 3b04 	ldr.w	r3, [r5], #4
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f855 3b04 	ldr.w	r3, [r5], #4
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	0800392c 	.word	0x0800392c
 8003218:	0800392c 	.word	0x0800392c
 800321c:	0800392c 	.word	0x0800392c
 8003220:	08003930 	.word	0x08003930

08003224 <__retarget_lock_init_recursive>:
 8003224:	4770      	bx	lr

08003226 <__retarget_lock_acquire_recursive>:
 8003226:	4770      	bx	lr

08003228 <__retarget_lock_release_recursive>:
 8003228:	4770      	bx	lr
	...

0800322c <sbrk_aligned>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	4e0e      	ldr	r6, [pc, #56]	; (8003268 <sbrk_aligned+0x3c>)
 8003230:	460c      	mov	r4, r1
 8003232:	6831      	ldr	r1, [r6, #0]
 8003234:	4605      	mov	r5, r0
 8003236:	b911      	cbnz	r1, 800323e <sbrk_aligned+0x12>
 8003238:	f000 fae2 	bl	8003800 <_sbrk_r>
 800323c:	6030      	str	r0, [r6, #0]
 800323e:	4621      	mov	r1, r4
 8003240:	4628      	mov	r0, r5
 8003242:	f000 fadd 	bl	8003800 <_sbrk_r>
 8003246:	1c43      	adds	r3, r0, #1
 8003248:	d00a      	beq.n	8003260 <sbrk_aligned+0x34>
 800324a:	1cc4      	adds	r4, r0, #3
 800324c:	f024 0403 	bic.w	r4, r4, #3
 8003250:	42a0      	cmp	r0, r4
 8003252:	d007      	beq.n	8003264 <sbrk_aligned+0x38>
 8003254:	1a21      	subs	r1, r4, r0
 8003256:	4628      	mov	r0, r5
 8003258:	f000 fad2 	bl	8003800 <_sbrk_r>
 800325c:	3001      	adds	r0, #1
 800325e:	d101      	bne.n	8003264 <sbrk_aligned+0x38>
 8003260:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003264:	4620      	mov	r0, r4
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	20000238 	.word	0x20000238

0800326c <_malloc_r>:
 800326c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003270:	1ccd      	adds	r5, r1, #3
 8003272:	f025 0503 	bic.w	r5, r5, #3
 8003276:	3508      	adds	r5, #8
 8003278:	2d0c      	cmp	r5, #12
 800327a:	bf38      	it	cc
 800327c:	250c      	movcc	r5, #12
 800327e:	2d00      	cmp	r5, #0
 8003280:	4607      	mov	r7, r0
 8003282:	db01      	blt.n	8003288 <_malloc_r+0x1c>
 8003284:	42a9      	cmp	r1, r5
 8003286:	d905      	bls.n	8003294 <_malloc_r+0x28>
 8003288:	230c      	movs	r3, #12
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	2600      	movs	r6, #0
 800328e:	4630      	mov	r0, r6
 8003290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003294:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003368 <_malloc_r+0xfc>
 8003298:	f000 f916 	bl	80034c8 <__malloc_lock>
 800329c:	f8d8 3000 	ldr.w	r3, [r8]
 80032a0:	461c      	mov	r4, r3
 80032a2:	bb5c      	cbnz	r4, 80032fc <_malloc_r+0x90>
 80032a4:	4629      	mov	r1, r5
 80032a6:	4638      	mov	r0, r7
 80032a8:	f7ff ffc0 	bl	800322c <sbrk_aligned>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	4604      	mov	r4, r0
 80032b0:	d155      	bne.n	800335e <_malloc_r+0xf2>
 80032b2:	f8d8 4000 	ldr.w	r4, [r8]
 80032b6:	4626      	mov	r6, r4
 80032b8:	2e00      	cmp	r6, #0
 80032ba:	d145      	bne.n	8003348 <_malloc_r+0xdc>
 80032bc:	2c00      	cmp	r4, #0
 80032be:	d048      	beq.n	8003352 <_malloc_r+0xe6>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	4631      	mov	r1, r6
 80032c4:	4638      	mov	r0, r7
 80032c6:	eb04 0903 	add.w	r9, r4, r3
 80032ca:	f000 fa99 	bl	8003800 <_sbrk_r>
 80032ce:	4581      	cmp	r9, r0
 80032d0:	d13f      	bne.n	8003352 <_malloc_r+0xe6>
 80032d2:	6821      	ldr	r1, [r4, #0]
 80032d4:	1a6d      	subs	r5, r5, r1
 80032d6:	4629      	mov	r1, r5
 80032d8:	4638      	mov	r0, r7
 80032da:	f7ff ffa7 	bl	800322c <sbrk_aligned>
 80032de:	3001      	adds	r0, #1
 80032e0:	d037      	beq.n	8003352 <_malloc_r+0xe6>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	442b      	add	r3, r5
 80032e6:	6023      	str	r3, [r4, #0]
 80032e8:	f8d8 3000 	ldr.w	r3, [r8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d038      	beq.n	8003362 <_malloc_r+0xf6>
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	42a2      	cmp	r2, r4
 80032f4:	d12b      	bne.n	800334e <_malloc_r+0xe2>
 80032f6:	2200      	movs	r2, #0
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e00f      	b.n	800331c <_malloc_r+0xb0>
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	1b52      	subs	r2, r2, r5
 8003300:	d41f      	bmi.n	8003342 <_malloc_r+0xd6>
 8003302:	2a0b      	cmp	r2, #11
 8003304:	d917      	bls.n	8003336 <_malloc_r+0xca>
 8003306:	1961      	adds	r1, r4, r5
 8003308:	42a3      	cmp	r3, r4
 800330a:	6025      	str	r5, [r4, #0]
 800330c:	bf18      	it	ne
 800330e:	6059      	strne	r1, [r3, #4]
 8003310:	6863      	ldr	r3, [r4, #4]
 8003312:	bf08      	it	eq
 8003314:	f8c8 1000 	streq.w	r1, [r8]
 8003318:	5162      	str	r2, [r4, r5]
 800331a:	604b      	str	r3, [r1, #4]
 800331c:	4638      	mov	r0, r7
 800331e:	f104 060b 	add.w	r6, r4, #11
 8003322:	f000 f8d7 	bl	80034d4 <__malloc_unlock>
 8003326:	f026 0607 	bic.w	r6, r6, #7
 800332a:	1d23      	adds	r3, r4, #4
 800332c:	1af2      	subs	r2, r6, r3
 800332e:	d0ae      	beq.n	800328e <_malloc_r+0x22>
 8003330:	1b9b      	subs	r3, r3, r6
 8003332:	50a3      	str	r3, [r4, r2]
 8003334:	e7ab      	b.n	800328e <_malloc_r+0x22>
 8003336:	42a3      	cmp	r3, r4
 8003338:	6862      	ldr	r2, [r4, #4]
 800333a:	d1dd      	bne.n	80032f8 <_malloc_r+0x8c>
 800333c:	f8c8 2000 	str.w	r2, [r8]
 8003340:	e7ec      	b.n	800331c <_malloc_r+0xb0>
 8003342:	4623      	mov	r3, r4
 8003344:	6864      	ldr	r4, [r4, #4]
 8003346:	e7ac      	b.n	80032a2 <_malloc_r+0x36>
 8003348:	4634      	mov	r4, r6
 800334a:	6876      	ldr	r6, [r6, #4]
 800334c:	e7b4      	b.n	80032b8 <_malloc_r+0x4c>
 800334e:	4613      	mov	r3, r2
 8003350:	e7cc      	b.n	80032ec <_malloc_r+0x80>
 8003352:	230c      	movs	r3, #12
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4638      	mov	r0, r7
 8003358:	f000 f8bc 	bl	80034d4 <__malloc_unlock>
 800335c:	e797      	b.n	800328e <_malloc_r+0x22>
 800335e:	6025      	str	r5, [r4, #0]
 8003360:	e7dc      	b.n	800331c <_malloc_r+0xb0>
 8003362:	605b      	str	r3, [r3, #4]
 8003364:	deff      	udf	#255	; 0xff
 8003366:	bf00      	nop
 8003368:	20000234 	.word	0x20000234

0800336c <__sflush_r>:
 800336c:	898a      	ldrh	r2, [r1, #12]
 800336e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003372:	4605      	mov	r5, r0
 8003374:	0710      	lsls	r0, r2, #28
 8003376:	460c      	mov	r4, r1
 8003378:	d458      	bmi.n	800342c <__sflush_r+0xc0>
 800337a:	684b      	ldr	r3, [r1, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	dc05      	bgt.n	800338c <__sflush_r+0x20>
 8003380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	dc02      	bgt.n	800338c <__sflush_r+0x20>
 8003386:	2000      	movs	r0, #0
 8003388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800338c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800338e:	2e00      	cmp	r6, #0
 8003390:	d0f9      	beq.n	8003386 <__sflush_r+0x1a>
 8003392:	2300      	movs	r3, #0
 8003394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003398:	682f      	ldr	r7, [r5, #0]
 800339a:	6a21      	ldr	r1, [r4, #32]
 800339c:	602b      	str	r3, [r5, #0]
 800339e:	d032      	beq.n	8003406 <__sflush_r+0x9a>
 80033a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033a2:	89a3      	ldrh	r3, [r4, #12]
 80033a4:	075a      	lsls	r2, r3, #29
 80033a6:	d505      	bpl.n	80033b4 <__sflush_r+0x48>
 80033a8:	6863      	ldr	r3, [r4, #4]
 80033aa:	1ac0      	subs	r0, r0, r3
 80033ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033ae:	b10b      	cbz	r3, 80033b4 <__sflush_r+0x48>
 80033b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033b2:	1ac0      	subs	r0, r0, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	4602      	mov	r2, r0
 80033b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033ba:	6a21      	ldr	r1, [r4, #32]
 80033bc:	4628      	mov	r0, r5
 80033be:	47b0      	blx	r6
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	d106      	bne.n	80033d4 <__sflush_r+0x68>
 80033c6:	6829      	ldr	r1, [r5, #0]
 80033c8:	291d      	cmp	r1, #29
 80033ca:	d82b      	bhi.n	8003424 <__sflush_r+0xb8>
 80033cc:	4a29      	ldr	r2, [pc, #164]	; (8003474 <__sflush_r+0x108>)
 80033ce:	410a      	asrs	r2, r1
 80033d0:	07d6      	lsls	r6, r2, #31
 80033d2:	d427      	bmi.n	8003424 <__sflush_r+0xb8>
 80033d4:	2200      	movs	r2, #0
 80033d6:	6062      	str	r2, [r4, #4]
 80033d8:	04d9      	lsls	r1, r3, #19
 80033da:	6922      	ldr	r2, [r4, #16]
 80033dc:	6022      	str	r2, [r4, #0]
 80033de:	d504      	bpl.n	80033ea <__sflush_r+0x7e>
 80033e0:	1c42      	adds	r2, r0, #1
 80033e2:	d101      	bne.n	80033e8 <__sflush_r+0x7c>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	b903      	cbnz	r3, 80033ea <__sflush_r+0x7e>
 80033e8:	6560      	str	r0, [r4, #84]	; 0x54
 80033ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ec:	602f      	str	r7, [r5, #0]
 80033ee:	2900      	cmp	r1, #0
 80033f0:	d0c9      	beq.n	8003386 <__sflush_r+0x1a>
 80033f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033f6:	4299      	cmp	r1, r3
 80033f8:	d002      	beq.n	8003400 <__sflush_r+0x94>
 80033fa:	4628      	mov	r0, r5
 80033fc:	f000 fa22 	bl	8003844 <_free_r>
 8003400:	2000      	movs	r0, #0
 8003402:	6360      	str	r0, [r4, #52]	; 0x34
 8003404:	e7c0      	b.n	8003388 <__sflush_r+0x1c>
 8003406:	2301      	movs	r3, #1
 8003408:	4628      	mov	r0, r5
 800340a:	47b0      	blx	r6
 800340c:	1c41      	adds	r1, r0, #1
 800340e:	d1c8      	bne.n	80033a2 <__sflush_r+0x36>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0c5      	beq.n	80033a2 <__sflush_r+0x36>
 8003416:	2b1d      	cmp	r3, #29
 8003418:	d001      	beq.n	800341e <__sflush_r+0xb2>
 800341a:	2b16      	cmp	r3, #22
 800341c:	d101      	bne.n	8003422 <__sflush_r+0xb6>
 800341e:	602f      	str	r7, [r5, #0]
 8003420:	e7b1      	b.n	8003386 <__sflush_r+0x1a>
 8003422:	89a3      	ldrh	r3, [r4, #12]
 8003424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003428:	81a3      	strh	r3, [r4, #12]
 800342a:	e7ad      	b.n	8003388 <__sflush_r+0x1c>
 800342c:	690f      	ldr	r7, [r1, #16]
 800342e:	2f00      	cmp	r7, #0
 8003430:	d0a9      	beq.n	8003386 <__sflush_r+0x1a>
 8003432:	0793      	lsls	r3, r2, #30
 8003434:	680e      	ldr	r6, [r1, #0]
 8003436:	bf08      	it	eq
 8003438:	694b      	ldreq	r3, [r1, #20]
 800343a:	600f      	str	r7, [r1, #0]
 800343c:	bf18      	it	ne
 800343e:	2300      	movne	r3, #0
 8003440:	eba6 0807 	sub.w	r8, r6, r7
 8003444:	608b      	str	r3, [r1, #8]
 8003446:	f1b8 0f00 	cmp.w	r8, #0
 800344a:	dd9c      	ble.n	8003386 <__sflush_r+0x1a>
 800344c:	6a21      	ldr	r1, [r4, #32]
 800344e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003450:	4643      	mov	r3, r8
 8003452:	463a      	mov	r2, r7
 8003454:	4628      	mov	r0, r5
 8003456:	47b0      	blx	r6
 8003458:	2800      	cmp	r0, #0
 800345a:	dc06      	bgt.n	800346a <__sflush_r+0xfe>
 800345c:	89a3      	ldrh	r3, [r4, #12]
 800345e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003462:	81a3      	strh	r3, [r4, #12]
 8003464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003468:	e78e      	b.n	8003388 <__sflush_r+0x1c>
 800346a:	4407      	add	r7, r0
 800346c:	eba8 0800 	sub.w	r8, r8, r0
 8003470:	e7e9      	b.n	8003446 <__sflush_r+0xda>
 8003472:	bf00      	nop
 8003474:	dfbffffe 	.word	0xdfbffffe

08003478 <_fflush_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	690b      	ldr	r3, [r1, #16]
 800347c:	4605      	mov	r5, r0
 800347e:	460c      	mov	r4, r1
 8003480:	b913      	cbnz	r3, 8003488 <_fflush_r+0x10>
 8003482:	2500      	movs	r5, #0
 8003484:	4628      	mov	r0, r5
 8003486:	bd38      	pop	{r3, r4, r5, pc}
 8003488:	b118      	cbz	r0, 8003492 <_fflush_r+0x1a>
 800348a:	6a03      	ldr	r3, [r0, #32]
 800348c:	b90b      	cbnz	r3, 8003492 <_fflush_r+0x1a>
 800348e:	f7ff fe05 	bl	800309c <__sinit>
 8003492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f3      	beq.n	8003482 <_fflush_r+0xa>
 800349a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800349c:	07d0      	lsls	r0, r2, #31
 800349e:	d404      	bmi.n	80034aa <_fflush_r+0x32>
 80034a0:	0599      	lsls	r1, r3, #22
 80034a2:	d402      	bmi.n	80034aa <_fflush_r+0x32>
 80034a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034a6:	f7ff febe 	bl	8003226 <__retarget_lock_acquire_recursive>
 80034aa:	4628      	mov	r0, r5
 80034ac:	4621      	mov	r1, r4
 80034ae:	f7ff ff5d 	bl	800336c <__sflush_r>
 80034b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034b4:	07da      	lsls	r2, r3, #31
 80034b6:	4605      	mov	r5, r0
 80034b8:	d4e4      	bmi.n	8003484 <_fflush_r+0xc>
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	059b      	lsls	r3, r3, #22
 80034be:	d4e1      	bmi.n	8003484 <_fflush_r+0xc>
 80034c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034c2:	f7ff feb1 	bl	8003228 <__retarget_lock_release_recursive>
 80034c6:	e7dd      	b.n	8003484 <_fflush_r+0xc>

080034c8 <__malloc_lock>:
 80034c8:	4801      	ldr	r0, [pc, #4]	; (80034d0 <__malloc_lock+0x8>)
 80034ca:	f7ff beac 	b.w	8003226 <__retarget_lock_acquire_recursive>
 80034ce:	bf00      	nop
 80034d0:	20000230 	.word	0x20000230

080034d4 <__malloc_unlock>:
 80034d4:	4801      	ldr	r0, [pc, #4]	; (80034dc <__malloc_unlock+0x8>)
 80034d6:	f7ff bea7 	b.w	8003228 <__retarget_lock_release_recursive>
 80034da:	bf00      	nop
 80034dc:	20000230 	.word	0x20000230

080034e0 <__sread>:
 80034e0:	b510      	push	{r4, lr}
 80034e2:	460c      	mov	r4, r1
 80034e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e8:	f000 f978 	bl	80037dc <_read_r>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	bfab      	itete	ge
 80034f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034f2:	89a3      	ldrhlt	r3, [r4, #12]
 80034f4:	181b      	addge	r3, r3, r0
 80034f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034fa:	bfac      	ite	ge
 80034fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80034fe:	81a3      	strhlt	r3, [r4, #12]
 8003500:	bd10      	pop	{r4, pc}

08003502 <__swrite>:
 8003502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003506:	461f      	mov	r7, r3
 8003508:	898b      	ldrh	r3, [r1, #12]
 800350a:	05db      	lsls	r3, r3, #23
 800350c:	4605      	mov	r5, r0
 800350e:	460c      	mov	r4, r1
 8003510:	4616      	mov	r6, r2
 8003512:	d505      	bpl.n	8003520 <__swrite+0x1e>
 8003514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003518:	2302      	movs	r3, #2
 800351a:	2200      	movs	r2, #0
 800351c:	f000 f94c 	bl	80037b8 <_lseek_r>
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800352a:	81a3      	strh	r3, [r4, #12]
 800352c:	4632      	mov	r2, r6
 800352e:	463b      	mov	r3, r7
 8003530:	4628      	mov	r0, r5
 8003532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003536:	f000 b973 	b.w	8003820 <_write_r>

0800353a <__sseek>:
 800353a:	b510      	push	{r4, lr}
 800353c:	460c      	mov	r4, r1
 800353e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003542:	f000 f939 	bl	80037b8 <_lseek_r>
 8003546:	1c43      	adds	r3, r0, #1
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	bf15      	itete	ne
 800354c:	6560      	strne	r0, [r4, #84]	; 0x54
 800354e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003556:	81a3      	strheq	r3, [r4, #12]
 8003558:	bf18      	it	ne
 800355a:	81a3      	strhne	r3, [r4, #12]
 800355c:	bd10      	pop	{r4, pc}

0800355e <__sclose>:
 800355e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003562:	f000 b8f7 	b.w	8003754 <_close_r>

08003566 <__swbuf_r>:
 8003566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003568:	460e      	mov	r6, r1
 800356a:	4614      	mov	r4, r2
 800356c:	4605      	mov	r5, r0
 800356e:	b118      	cbz	r0, 8003578 <__swbuf_r+0x12>
 8003570:	6a03      	ldr	r3, [r0, #32]
 8003572:	b90b      	cbnz	r3, 8003578 <__swbuf_r+0x12>
 8003574:	f7ff fd92 	bl	800309c <__sinit>
 8003578:	69a3      	ldr	r3, [r4, #24]
 800357a:	60a3      	str	r3, [r4, #8]
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	071a      	lsls	r2, r3, #28
 8003580:	d525      	bpl.n	80035ce <__swbuf_r+0x68>
 8003582:	6923      	ldr	r3, [r4, #16]
 8003584:	b31b      	cbz	r3, 80035ce <__swbuf_r+0x68>
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	6922      	ldr	r2, [r4, #16]
 800358a:	1a98      	subs	r0, r3, r2
 800358c:	6963      	ldr	r3, [r4, #20]
 800358e:	b2f6      	uxtb	r6, r6
 8003590:	4283      	cmp	r3, r0
 8003592:	4637      	mov	r7, r6
 8003594:	dc04      	bgt.n	80035a0 <__swbuf_r+0x3a>
 8003596:	4621      	mov	r1, r4
 8003598:	4628      	mov	r0, r5
 800359a:	f7ff ff6d 	bl	8003478 <_fflush_r>
 800359e:	b9e0      	cbnz	r0, 80035da <__swbuf_r+0x74>
 80035a0:	68a3      	ldr	r3, [r4, #8]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	60a3      	str	r3, [r4, #8]
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	6022      	str	r2, [r4, #0]
 80035ac:	701e      	strb	r6, [r3, #0]
 80035ae:	6962      	ldr	r2, [r4, #20]
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d004      	beq.n	80035c0 <__swbuf_r+0x5a>
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	07db      	lsls	r3, r3, #31
 80035ba:	d506      	bpl.n	80035ca <__swbuf_r+0x64>
 80035bc:	2e0a      	cmp	r6, #10
 80035be:	d104      	bne.n	80035ca <__swbuf_r+0x64>
 80035c0:	4621      	mov	r1, r4
 80035c2:	4628      	mov	r0, r5
 80035c4:	f7ff ff58 	bl	8003478 <_fflush_r>
 80035c8:	b938      	cbnz	r0, 80035da <__swbuf_r+0x74>
 80035ca:	4638      	mov	r0, r7
 80035cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ce:	4621      	mov	r1, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	f000 f805 	bl	80035e0 <__swsetup_r>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d0d5      	beq.n	8003586 <__swbuf_r+0x20>
 80035da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80035de:	e7f4      	b.n	80035ca <__swbuf_r+0x64>

080035e0 <__swsetup_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4b2a      	ldr	r3, [pc, #168]	; (800368c <__swsetup_r+0xac>)
 80035e4:	4605      	mov	r5, r0
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	460c      	mov	r4, r1
 80035ea:	b118      	cbz	r0, 80035f4 <__swsetup_r+0x14>
 80035ec:	6a03      	ldr	r3, [r0, #32]
 80035ee:	b90b      	cbnz	r3, 80035f4 <__swsetup_r+0x14>
 80035f0:	f7ff fd54 	bl	800309c <__sinit>
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035fa:	0718      	lsls	r0, r3, #28
 80035fc:	d422      	bmi.n	8003644 <__swsetup_r+0x64>
 80035fe:	06d9      	lsls	r1, r3, #27
 8003600:	d407      	bmi.n	8003612 <__swsetup_r+0x32>
 8003602:	2309      	movs	r3, #9
 8003604:	602b      	str	r3, [r5, #0]
 8003606:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800360a:	81a3      	strh	r3, [r4, #12]
 800360c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003610:	e034      	b.n	800367c <__swsetup_r+0x9c>
 8003612:	0758      	lsls	r0, r3, #29
 8003614:	d512      	bpl.n	800363c <__swsetup_r+0x5c>
 8003616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003618:	b141      	cbz	r1, 800362c <__swsetup_r+0x4c>
 800361a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800361e:	4299      	cmp	r1, r3
 8003620:	d002      	beq.n	8003628 <__swsetup_r+0x48>
 8003622:	4628      	mov	r0, r5
 8003624:	f000 f90e 	bl	8003844 <_free_r>
 8003628:	2300      	movs	r3, #0
 800362a:	6363      	str	r3, [r4, #52]	; 0x34
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003632:	81a3      	strh	r3, [r4, #12]
 8003634:	2300      	movs	r3, #0
 8003636:	6063      	str	r3, [r4, #4]
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	6023      	str	r3, [r4, #0]
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	f043 0308 	orr.w	r3, r3, #8
 8003642:	81a3      	strh	r3, [r4, #12]
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	b94b      	cbnz	r3, 800365c <__swsetup_r+0x7c>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800364e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003652:	d003      	beq.n	800365c <__swsetup_r+0x7c>
 8003654:	4621      	mov	r1, r4
 8003656:	4628      	mov	r0, r5
 8003658:	f000 f840 	bl	80036dc <__smakebuf_r>
 800365c:	89a0      	ldrh	r0, [r4, #12]
 800365e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003662:	f010 0301 	ands.w	r3, r0, #1
 8003666:	d00a      	beq.n	800367e <__swsetup_r+0x9e>
 8003668:	2300      	movs	r3, #0
 800366a:	60a3      	str	r3, [r4, #8]
 800366c:	6963      	ldr	r3, [r4, #20]
 800366e:	425b      	negs	r3, r3
 8003670:	61a3      	str	r3, [r4, #24]
 8003672:	6923      	ldr	r3, [r4, #16]
 8003674:	b943      	cbnz	r3, 8003688 <__swsetup_r+0xa8>
 8003676:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800367a:	d1c4      	bne.n	8003606 <__swsetup_r+0x26>
 800367c:	bd38      	pop	{r3, r4, r5, pc}
 800367e:	0781      	lsls	r1, r0, #30
 8003680:	bf58      	it	pl
 8003682:	6963      	ldrpl	r3, [r4, #20]
 8003684:	60a3      	str	r3, [r4, #8]
 8003686:	e7f4      	b.n	8003672 <__swsetup_r+0x92>
 8003688:	2000      	movs	r0, #0
 800368a:	e7f7      	b.n	800367c <__swsetup_r+0x9c>
 800368c:	20000064 	.word	0x20000064

08003690 <__swhatbuf_r>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	460c      	mov	r4, r1
 8003694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003698:	2900      	cmp	r1, #0
 800369a:	b096      	sub	sp, #88	; 0x58
 800369c:	4615      	mov	r5, r2
 800369e:	461e      	mov	r6, r3
 80036a0:	da0d      	bge.n	80036be <__swhatbuf_r+0x2e>
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	bf0c      	ite	eq
 80036ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80036b2:	2340      	movne	r3, #64	; 0x40
 80036b4:	2000      	movs	r0, #0
 80036b6:	6031      	str	r1, [r6, #0]
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	b016      	add	sp, #88	; 0x58
 80036bc:	bd70      	pop	{r4, r5, r6, pc}
 80036be:	466a      	mov	r2, sp
 80036c0:	f000 f858 	bl	8003774 <_fstat_r>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	dbec      	blt.n	80036a2 <__swhatbuf_r+0x12>
 80036c8:	9901      	ldr	r1, [sp, #4]
 80036ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80036ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80036d2:	4259      	negs	r1, r3
 80036d4:	4159      	adcs	r1, r3
 80036d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036da:	e7eb      	b.n	80036b4 <__swhatbuf_r+0x24>

080036dc <__smakebuf_r>:
 80036dc:	898b      	ldrh	r3, [r1, #12]
 80036de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036e0:	079d      	lsls	r5, r3, #30
 80036e2:	4606      	mov	r6, r0
 80036e4:	460c      	mov	r4, r1
 80036e6:	d507      	bpl.n	80036f8 <__smakebuf_r+0x1c>
 80036e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	6123      	str	r3, [r4, #16]
 80036f0:	2301      	movs	r3, #1
 80036f2:	6163      	str	r3, [r4, #20]
 80036f4:	b002      	add	sp, #8
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	ab01      	add	r3, sp, #4
 80036fa:	466a      	mov	r2, sp
 80036fc:	f7ff ffc8 	bl	8003690 <__swhatbuf_r>
 8003700:	9900      	ldr	r1, [sp, #0]
 8003702:	4605      	mov	r5, r0
 8003704:	4630      	mov	r0, r6
 8003706:	f7ff fdb1 	bl	800326c <_malloc_r>
 800370a:	b948      	cbnz	r0, 8003720 <__smakebuf_r+0x44>
 800370c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003710:	059a      	lsls	r2, r3, #22
 8003712:	d4ef      	bmi.n	80036f4 <__smakebuf_r+0x18>
 8003714:	f023 0303 	bic.w	r3, r3, #3
 8003718:	f043 0302 	orr.w	r3, r3, #2
 800371c:	81a3      	strh	r3, [r4, #12]
 800371e:	e7e3      	b.n	80036e8 <__smakebuf_r+0xc>
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	6020      	str	r0, [r4, #0]
 8003724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003728:	81a3      	strh	r3, [r4, #12]
 800372a:	9b00      	ldr	r3, [sp, #0]
 800372c:	6163      	str	r3, [r4, #20]
 800372e:	9b01      	ldr	r3, [sp, #4]
 8003730:	6120      	str	r0, [r4, #16]
 8003732:	b15b      	cbz	r3, 800374c <__smakebuf_r+0x70>
 8003734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003738:	4630      	mov	r0, r6
 800373a:	f000 f82d 	bl	8003798 <_isatty_r>
 800373e:	b128      	cbz	r0, 800374c <__smakebuf_r+0x70>
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	81a3      	strh	r3, [r4, #12]
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	431d      	orrs	r5, r3
 8003750:	81a5      	strh	r5, [r4, #12]
 8003752:	e7cf      	b.n	80036f4 <__smakebuf_r+0x18>

08003754 <_close_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4d06      	ldr	r5, [pc, #24]	; (8003770 <_close_r+0x1c>)
 8003758:	2300      	movs	r3, #0
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	f7fd f9a3 	bl	8000aaa <_close>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d102      	bne.n	800376e <_close_r+0x1a>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	b103      	cbz	r3, 800376e <_close_r+0x1a>
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	2000023c 	.word	0x2000023c

08003774 <_fstat_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4d07      	ldr	r5, [pc, #28]	; (8003794 <_fstat_r+0x20>)
 8003778:	2300      	movs	r3, #0
 800377a:	4604      	mov	r4, r0
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	602b      	str	r3, [r5, #0]
 8003782:	f7fd f99e 	bl	8000ac2 <_fstat>
 8003786:	1c43      	adds	r3, r0, #1
 8003788:	d102      	bne.n	8003790 <_fstat_r+0x1c>
 800378a:	682b      	ldr	r3, [r5, #0]
 800378c:	b103      	cbz	r3, 8003790 <_fstat_r+0x1c>
 800378e:	6023      	str	r3, [r4, #0]
 8003790:	bd38      	pop	{r3, r4, r5, pc}
 8003792:	bf00      	nop
 8003794:	2000023c 	.word	0x2000023c

08003798 <_isatty_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4d06      	ldr	r5, [pc, #24]	; (80037b4 <_isatty_r+0x1c>)
 800379c:	2300      	movs	r3, #0
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f7fd f99d 	bl	8000ae2 <_isatty>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d102      	bne.n	80037b2 <_isatty_r+0x1a>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b103      	cbz	r3, 80037b2 <_isatty_r+0x1a>
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	2000023c 	.word	0x2000023c

080037b8 <_lseek_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d07      	ldr	r5, [pc, #28]	; (80037d8 <_lseek_r+0x20>)
 80037bc:	4604      	mov	r4, r0
 80037be:	4608      	mov	r0, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	602a      	str	r2, [r5, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7fd f996 	bl	8000af8 <_lseek>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_lseek_r+0x1e>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_lseek_r+0x1e>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	2000023c 	.word	0x2000023c

080037dc <_read_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4d07      	ldr	r5, [pc, #28]	; (80037fc <_read_r+0x20>)
 80037e0:	4604      	mov	r4, r0
 80037e2:	4608      	mov	r0, r1
 80037e4:	4611      	mov	r1, r2
 80037e6:	2200      	movs	r2, #0
 80037e8:	602a      	str	r2, [r5, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f7fd f924 	bl	8000a38 <_read>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_read_r+0x1e>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_read_r+0x1e>
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	2000023c 	.word	0x2000023c

08003800 <_sbrk_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4d06      	ldr	r5, [pc, #24]	; (800381c <_sbrk_r+0x1c>)
 8003804:	2300      	movs	r3, #0
 8003806:	4604      	mov	r4, r0
 8003808:	4608      	mov	r0, r1
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	f7fd f982 	bl	8000b14 <_sbrk>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_sbrk_r+0x1a>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_sbrk_r+0x1a>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	2000023c 	.word	0x2000023c

08003820 <_write_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4d07      	ldr	r5, [pc, #28]	; (8003840 <_write_r+0x20>)
 8003824:	4604      	mov	r4, r0
 8003826:	4608      	mov	r0, r1
 8003828:	4611      	mov	r1, r2
 800382a:	2200      	movs	r2, #0
 800382c:	602a      	str	r2, [r5, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	f7fd f91f 	bl	8000a72 <_write>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_write_r+0x1e>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	b103      	cbz	r3, 800383e <_write_r+0x1e>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	2000023c 	.word	0x2000023c

08003844 <_free_r>:
 8003844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003846:	2900      	cmp	r1, #0
 8003848:	d044      	beq.n	80038d4 <_free_r+0x90>
 800384a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800384e:	9001      	str	r0, [sp, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f1a1 0404 	sub.w	r4, r1, #4
 8003856:	bfb8      	it	lt
 8003858:	18e4      	addlt	r4, r4, r3
 800385a:	f7ff fe35 	bl	80034c8 <__malloc_lock>
 800385e:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <_free_r+0x94>)
 8003860:	9801      	ldr	r0, [sp, #4]
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	b933      	cbnz	r3, 8003874 <_free_r+0x30>
 8003866:	6063      	str	r3, [r4, #4]
 8003868:	6014      	str	r4, [r2, #0]
 800386a:	b003      	add	sp, #12
 800386c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003870:	f7ff be30 	b.w	80034d4 <__malloc_unlock>
 8003874:	42a3      	cmp	r3, r4
 8003876:	d908      	bls.n	800388a <_free_r+0x46>
 8003878:	6825      	ldr	r5, [r4, #0]
 800387a:	1961      	adds	r1, r4, r5
 800387c:	428b      	cmp	r3, r1
 800387e:	bf01      	itttt	eq
 8003880:	6819      	ldreq	r1, [r3, #0]
 8003882:	685b      	ldreq	r3, [r3, #4]
 8003884:	1949      	addeq	r1, r1, r5
 8003886:	6021      	streq	r1, [r4, #0]
 8003888:	e7ed      	b.n	8003866 <_free_r+0x22>
 800388a:	461a      	mov	r2, r3
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	b10b      	cbz	r3, 8003894 <_free_r+0x50>
 8003890:	42a3      	cmp	r3, r4
 8003892:	d9fa      	bls.n	800388a <_free_r+0x46>
 8003894:	6811      	ldr	r1, [r2, #0]
 8003896:	1855      	adds	r5, r2, r1
 8003898:	42a5      	cmp	r5, r4
 800389a:	d10b      	bne.n	80038b4 <_free_r+0x70>
 800389c:	6824      	ldr	r4, [r4, #0]
 800389e:	4421      	add	r1, r4
 80038a0:	1854      	adds	r4, r2, r1
 80038a2:	42a3      	cmp	r3, r4
 80038a4:	6011      	str	r1, [r2, #0]
 80038a6:	d1e0      	bne.n	800386a <_free_r+0x26>
 80038a8:	681c      	ldr	r4, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	6053      	str	r3, [r2, #4]
 80038ae:	440c      	add	r4, r1
 80038b0:	6014      	str	r4, [r2, #0]
 80038b2:	e7da      	b.n	800386a <_free_r+0x26>
 80038b4:	d902      	bls.n	80038bc <_free_r+0x78>
 80038b6:	230c      	movs	r3, #12
 80038b8:	6003      	str	r3, [r0, #0]
 80038ba:	e7d6      	b.n	800386a <_free_r+0x26>
 80038bc:	6825      	ldr	r5, [r4, #0]
 80038be:	1961      	adds	r1, r4, r5
 80038c0:	428b      	cmp	r3, r1
 80038c2:	bf04      	itt	eq
 80038c4:	6819      	ldreq	r1, [r3, #0]
 80038c6:	685b      	ldreq	r3, [r3, #4]
 80038c8:	6063      	str	r3, [r4, #4]
 80038ca:	bf04      	itt	eq
 80038cc:	1949      	addeq	r1, r1, r5
 80038ce:	6021      	streq	r1, [r4, #0]
 80038d0:	6054      	str	r4, [r2, #4]
 80038d2:	e7ca      	b.n	800386a <_free_r+0x26>
 80038d4:	b003      	add	sp, #12
 80038d6:	bd30      	pop	{r4, r5, pc}
 80038d8:	20000234 	.word	0x20000234

080038dc <_init>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr

080038e8 <_fini>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	bf00      	nop
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr

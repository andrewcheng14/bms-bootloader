
BMS_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004878  08004878  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004880  08004880  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a38  20000068  080048f0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  080048f0  00020aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009eac  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001edb  00000000  00000000  00029f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e1  00000000  00000000  0002c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224be  00000000  00000000  0002ce61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc9a  00000000  00000000  0004f31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca9f7  00000000  00000000  0005afb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b50  00000000  00000000  001259b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00128500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080044a0 	.word	0x080044a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080044a0 	.word	0x080044a0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <etx_ota_download_and_flash>:
/**
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
int etx_ota_download_and_flash(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	printf("Starting OTA download\r\n");
 80005b2:	481d      	ldr	r0, [pc, #116]	; (8000628 <etx_ota_download_and_flash+0x7c>)
 80005b4:	f003 f90c 	bl	80037d0 <puts>

	ota_state = START;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <etx_ota_download_and_flash+0x80>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	int bytes_received = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]

	while (ota_state != IDLE) {
 80005c2:	e028      	b.n	8000616 <etx_ota_download_and_flash+0x6a>
		memset(RX_BUFFER, 0, PACKET_MAX_SIZE);
 80005c4:	f640 020b 	movw	r2, #2059	; 0x80b
 80005c8:	2100      	movs	r1, #0
 80005ca:	4819      	ldr	r0, [pc, #100]	; (8000630 <etx_ota_download_and_flash+0x84>)
 80005cc:	f003 f908 	bl	80037e0 <memset>

		bytes_received = receiveOtaPacket(RX_BUFFER, PACKET_MAX_SIZE);
 80005d0:	f640 010b 	movw	r1, #2059	; 0x80b
 80005d4:	4816      	ldr	r0, [pc, #88]	; (8000630 <etx_ota_download_and_flash+0x84>)
 80005d6:	f000 f831 	bl	800063c <receiveOtaPacket>
 80005da:	6078      	str	r0, [r7, #4]

		if (bytes_received > 0) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dd15      	ble.n	800060e <etx_ota_download_and_flash+0x62>
			if (processOtaPacket(RX_BUFFER, bytes_received)) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <etx_ota_download_and_flash+0x84>)
 80005ea:	f000 f8f3 	bl	80007d4 <processOtaPacket>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d008      	beq.n	8000606 <etx_ota_download_and_flash+0x5a>
				printf("Error! HALTING!\n");
 80005f4:	480f      	ldr	r0, [pc, #60]	; (8000634 <etx_ota_download_and_flash+0x88>)
 80005f6:	f003 f8eb 	bl	80037d0 <puts>
				sendOtaResponse(PACKET_NACK);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 f8ac 	bl	8000758 <sendOtaResponse>
				return -1;
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	e00c      	b.n	8000620 <etx_ota_download_and_flash+0x74>
			} else {
				sendOtaResponse(PACKET_ACK);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 f8a6 	bl	8000758 <sendOtaResponse>
 800060c:	e003      	b.n	8000616 <etx_ota_download_and_flash+0x6a>
			}
		} else {
			printf("No bytes received!!");
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <etx_ota_download_and_flash+0x8c>)
 8000610:	f003 f878 	bl	8003704 <iprintf>
			break;
 8000614:	e003      	b.n	800061e <etx_ota_download_and_flash+0x72>
	while (ota_state != IDLE) {
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <etx_ota_download_and_flash+0x80>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1d2      	bne.n	80005c4 <etx_ota_download_and_flash+0x18>
		}
	}

	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	080044b8 	.word	0x080044b8
 800062c:	2000088f 	.word	0x2000088f
 8000630:	20000084 	.word	0x20000084
 8000634:	080044d0 	.word	0x080044d0
 8000638:	080044e0 	.word	0x080044e0

0800063c <receiveOtaPacket>:


static int receiveOtaPacket(uint8_t* buf, uint16_t size) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	807b      	strh	r3, [r7, #2]
	// Parse Ota Packet
	HAL_StatusTypeDef ret;
	uint16_t index = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	81fb      	strh	r3, [r7, #14]
	memset(buf, 0, PACKET_MAX_SIZE);
 800064c:	f640 020b 	movw	r2, #2059	; 0x80b
 8000650:	2100      	movs	r1, #0
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f003 f8c4 	bl	80037e0 <memset>

	// Receive the SOF, packet type, packet number, and payload length (6 bytes)
	ret = HAL_UART_Receive(&huart3, buf + index, 6, HAL_MAX_DELAY);
 8000658:	89fb      	ldrh	r3, [r7, #14]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	18d1      	adds	r1, r2, r3
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000662:	2206      	movs	r2, #6
 8000664:	4838      	ldr	r0, [pc, #224]	; (8000748 <receiveOtaPacket+0x10c>)
 8000666:	f002 fbc4 	bl	8002df2 <HAL_UART_Receive>
 800066a:	4603      	mov	r3, r0
 800066c:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 800066e:	7b7b      	ldrb	r3, [r7, #13]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d004      	beq.n	800067e <receiveOtaPacket+0x42>
		printf("HAL Receive failed!\n");
 8000674:	4835      	ldr	r0, [pc, #212]	; (800074c <receiveOtaPacket+0x110>)
 8000676:	f003 f8ab 	bl	80037d0 <puts>
		return 0;
 800067a:	2300      	movs	r3, #0
 800067c:	e05f      	b.n	800073e <receiveOtaPacket+0x102>
	}
	if (buf[index] != PACKET_SOF) {
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d004      	beq.n	8000694 <receiveOtaPacket+0x58>
		printf("Did not receive SOF!\n");
 800068a:	4831      	ldr	r0, [pc, #196]	; (8000750 <receiveOtaPacket+0x114>)
 800068c:	f003 f8a0 	bl	80037d0 <puts>
		return 0;
 8000690:	2300      	movs	r3, #0
 8000692:	e054      	b.n	800073e <receiveOtaPacket+0x102>
	}
	index += 6;
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	3306      	adds	r3, #6
 8000698:	81fb      	strh	r3, [r7, #14]

	// Get payload length (bytes 4 and 5)
	uint16_t payload_len = *((uint16_t*) &buf[4]);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	889b      	ldrh	r3, [r3, #4]
 800069e:	817b      	strh	r3, [r7, #10]
	// receive payload
	ret = HAL_UART_Receive(&huart3, buf + index, payload_len, HAL_MAX_DELAY);
 80006a0:	89fb      	ldrh	r3, [r7, #14]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	18d1      	adds	r1, r2, r3
 80006a6:	897a      	ldrh	r2, [r7, #10]
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ac:	4826      	ldr	r0, [pc, #152]	; (8000748 <receiveOtaPacket+0x10c>)
 80006ae:	f002 fba0 	bl	8002df2 <HAL_UART_Receive>
 80006b2:	4603      	mov	r3, r0
 80006b4:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80006b6:	7b7b      	ldrb	r3, [r7, #13]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <receiveOtaPacket+0x8a>
		printf("HAL Receive failed!\n");
 80006bc:	4823      	ldr	r0, [pc, #140]	; (800074c <receiveOtaPacket+0x110>)
 80006be:	f003 f887 	bl	80037d0 <puts>
		return 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e03b      	b.n	800073e <receiveOtaPacket+0x102>
	}
	index += payload_len;
 80006c6:	89fa      	ldrh	r2, [r7, #14]
 80006c8:	897b      	ldrh	r3, [r7, #10]
 80006ca:	4413      	add	r3, r2
 80006cc:	81fb      	strh	r3, [r7, #14]

	// receive crc
	ret = HAL_UART_Receive(&huart3, buf + index, 4, HAL_MAX_DELAY);
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	18d1      	adds	r1, r2, r3
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d8:	2204      	movs	r2, #4
 80006da:	481b      	ldr	r0, [pc, #108]	; (8000748 <receiveOtaPacket+0x10c>)
 80006dc:	f002 fb89 	bl	8002df2 <HAL_UART_Receive>
 80006e0:	4603      	mov	r3, r0
 80006e2:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80006e4:	7b7b      	ldrb	r3, [r7, #13]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <receiveOtaPacket+0xb8>
		printf("HAL Receive failed!\n");
 80006ea:	4818      	ldr	r0, [pc, #96]	; (800074c <receiveOtaPacket+0x110>)
 80006ec:	f003 f870 	bl	80037d0 <puts>
		return 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	e024      	b.n	800073e <receiveOtaPacket+0x102>
	}
	index += 4;
 80006f4:	89fb      	ldrh	r3, [r7, #14]
 80006f6:	3304      	adds	r3, #4
 80006f8:	81fb      	strh	r3, [r7, #14]

	// receive EOF
	ret = HAL_UART_Receive(&huart3, buf + index, 1, HAL_MAX_DELAY);
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	18d1      	adds	r1, r2, r3
 8000700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000704:	2201      	movs	r2, #1
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <receiveOtaPacket+0x10c>)
 8000708:	f002 fb73 	bl	8002df2 <HAL_UART_Receive>
 800070c:	4603      	mov	r3, r0
 800070e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d004      	beq.n	8000720 <receiveOtaPacket+0xe4>
		printf("HAL Receive failed!\n");
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <receiveOtaPacket+0x110>)
 8000718:	f003 f85a 	bl	80037d0 <puts>
		return 0;
 800071c:	2300      	movs	r3, #0
 800071e:	e00e      	b.n	800073e <receiveOtaPacket+0x102>
	}
	if (buf[index] != PACKET_EOF) {
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d004      	beq.n	8000736 <receiveOtaPacket+0xfa>
		printf("Did not receive EOF!\n");
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <receiveOtaPacket+0x118>)
 800072e:	f003 f84f 	bl	80037d0 <puts>
		return 0;
 8000732:	2300      	movs	r3, #0
 8000734:	e003      	b.n	800073e <receiveOtaPacket+0x102>
	}
	index++;
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	3301      	adds	r3, #1
 800073a:	81fb      	strh	r3, [r7, #14]

	return index;
 800073c:	89fb      	ldrh	r3, [r7, #14]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200008e4 	.word	0x200008e4
 800074c:	080044f4 	.word	0x080044f4
 8000750:	08004508 	.word	0x08004508
 8000754:	08004520 	.word	0x08004520

08000758 <sendOtaResponse>:

static int sendOtaResponse(uint8_t status) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	OtaResponsePacket response_packet;

    // Build command packet to send
    memset(&response_packet, 0, sizeof(OtaResponsePacket));
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	220c      	movs	r2, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 f838 	bl	80037e0 <memset>
    response_packet.sof         = PACKET_SOF;
 8000770:	2302      	movs	r3, #2
 8000772:	723b      	strb	r3, [r7, #8]
    response_packet.packet_type = OTA_RESPONSE;
 8000774:	2303      	movs	r3, #3
 8000776:	727b      	strb	r3, [r7, #9]
    response_packet.packet_num  = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	817b      	strh	r3, [r7, #10]
    response_packet.payload_len = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	81bb      	strh	r3, [r7, #12]
    response_packet.status      = status;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	73bb      	strb	r3, [r7, #14]
    response_packet.crc32       = 0;  // TBD: Implement CRC32
 8000784:	2300      	movs	r3, #0
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	2300      	movs	r3, #0
 800078a:	743b      	strb	r3, [r7, #16]
 800078c:	2300      	movs	r3, #0
 800078e:	747b      	strb	r3, [r7, #17]
 8000790:	2300      	movs	r3, #0
 8000792:	74bb      	strb	r3, [r7, #18]
    response_packet.eof         = PACKET_EOF;
 8000794:	2303      	movs	r3, #3
 8000796:	74fb      	strb	r3, [r7, #19]

    HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart3, (uint8_t*) &response_packet, sizeof(OtaResponsePacket), HAL_MAX_DELAY);
 8000798:	f107 0108 	add.w	r1, r7, #8
 800079c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a0:	220c      	movs	r2, #12
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <sendOtaResponse+0x74>)
 80007a4:	f002 fa9a 	bl	8002cdc <HAL_UART_Transmit>
 80007a8:	4603      	mov	r3, r0
 80007aa:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d007      	beq.n	80007c2 <sendOtaResponse+0x6a>
		printf("Failed to send Ota response with status: %d!\n", status);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <sendOtaResponse+0x78>)
 80007b8:	f002 ffa4 	bl	8003704 <iprintf>
		return -1;
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c0:	e000      	b.n	80007c4 <sendOtaResponse+0x6c>
	}
	return 0;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200008e4 	.word	0x200008e4
 80007d0:	08004538 	.word	0x08004538

080007d4 <processOtaPacket>:

static int processOtaPacket(uint8_t* buf, uint16_t size) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
    OtaCommandPacket* packet = (OtaCommandPacket*) buf;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	617b      	str	r3, [r7, #20]
    printf("Here!!");
 80007e4:	4851      	ldr	r0, [pc, #324]	; (800092c <processOtaPacket+0x158>)
 80007e6:	f002 ff8d 	bl	8003704 <iprintf>

    // Check if we received a ABORT command
    if (packet->packet_type == OTA_COMMAND && packet->cmd == OTA_ABORT_CMD) {
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10b      	bne.n	800080a <processOtaPacket+0x36>
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	799b      	ldrb	r3, [r3, #6]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d107      	bne.n	800080a <processOtaPacket+0x36>
        printf("Received OTA ABORT command!\n");
 80007fa:	484d      	ldr	r0, [pc, #308]	; (8000930 <processOtaPacket+0x15c>)
 80007fc:	f002 ffe8 	bl	80037d0 <puts>
        ota_state = IDLE;
 8000800:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <processOtaPacket+0x160>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
        return 0;
 8000806:	2300      	movs	r3, #0
 8000808:	e08c      	b.n	8000924 <processOtaPacket+0x150>
    }

    switch(ota_state) {
 800080a:	4b4a      	ldr	r3, [pc, #296]	; (8000934 <processOtaPacket+0x160>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	3b01      	subs	r3, #1
 8000810:	2b03      	cmp	r3, #3
 8000812:	f200 8084 	bhi.w	800091e <processOtaPacket+0x14a>
 8000816:	a201      	add	r2, pc, #4	; (adr r2, 800081c <processOtaPacket+0x48>)
 8000818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081c:	0800082d 	.word	0x0800082d
 8000820:	08000855 	.word	0x08000855
 8000824:	08000899 	.word	0x08000899
 8000828:	080008f7 	.word	0x080008f7
        case START:
            if (packet->packet_type == OTA_COMMAND && packet->cmd == OTA_START_CMD) {
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	785b      	ldrb	r3, [r3, #1]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10b      	bne.n	800084c <processOtaPacket+0x78>
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	799b      	ldrb	r3, [r3, #6]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d107      	bne.n	800084c <processOtaPacket+0x78>
                printf("Received OTA START command!\n");
 800083c:	483e      	ldr	r0, [pc, #248]	; (8000938 <processOtaPacket+0x164>)
 800083e:	f002 ffc7 	bl	80037d0 <puts>
                ota_state = HEADER;
 8000842:	4b3c      	ldr	r3, [pc, #240]	; (8000934 <processOtaPacket+0x160>)
 8000844:	2202      	movs	r2, #2
 8000846:	701a      	strb	r2, [r3, #0]
                return 0;
 8000848:	2300      	movs	r3, #0
 800084a:	e06b      	b.n	8000924 <processOtaPacket+0x150>
            }
            printf("Error: Expected OTA start command!\n");
 800084c:	483b      	ldr	r0, [pc, #236]	; (800093c <processOtaPacket+0x168>)
 800084e:	f002 ffbf 	bl	80037d0 <puts>
            break;
 8000852:	e065      	b.n	8000920 <processOtaPacket+0x14c>

        case HEADER:
            OtaHeaderPacket* header_packet = (OtaHeaderPacket*) buf;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	60bb      	str	r3, [r7, #8]
            if (header_packet->packet_type == OTA_HEADER) {
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d114      	bne.n	800088a <processOtaPacket+0xb6>
                fw_image_meta_data.file_size = header_packet->file_info.file_size;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8000866:	4a36      	ldr	r2, [pc, #216]	; (8000940 <processOtaPacket+0x16c>)
 8000868:	6013      	str	r3, [r2, #0]
                fw_image_meta_data.crc32 = header_packet->file_info.crc32;
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000870:	4a33      	ldr	r2, [pc, #204]	; (8000940 <processOtaPacket+0x16c>)
 8000872:	6053      	str	r3, [r2, #4]
                ota_state = DATA;
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <processOtaPacket+0x160>)
 8000876:	2203      	movs	r2, #3
 8000878:	701a      	strb	r2, [r3, #0]
                printf("Received OTA header! FW Size: %ld bytes\n", fw_image_meta_data.file_size);
 800087a:	4b31      	ldr	r3, [pc, #196]	; (8000940 <processOtaPacket+0x16c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4619      	mov	r1, r3
 8000880:	4830      	ldr	r0, [pc, #192]	; (8000944 <processOtaPacket+0x170>)
 8000882:	f002 ff3f 	bl	8003704 <iprintf>
                return 0;
 8000886:	2300      	movs	r3, #0
 8000888:	e04c      	b.n	8000924 <processOtaPacket+0x150>
            }
            printf("Error: Expected OTA header, received packet type: %d!\n", header_packet->packet_type);
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	4619      	mov	r1, r3
 8000890:	482d      	ldr	r0, [pc, #180]	; (8000948 <processOtaPacket+0x174>)
 8000892:	f002 ff37 	bl	8003704 <iprintf>
            break;
 8000896:	e043      	b.n	8000920 <processOtaPacket+0x14c>

        case DATA:
            OtaDataPacket* data_packet = (OtaDataPacket*) buf;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	613b      	str	r3, [r7, #16]
            if (data_packet->packet_type == OTA_DATA) {
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d124      	bne.n	80008ee <processOtaPacket+0x11a>
            	uint8_t* data = (uint8_t*) &(data_packet->payload);
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	3306      	adds	r3, #6
 80008a8:	60fb      	str	r3, [r7, #12]
            	flashWrite(data, data_packet->payload_len, (ota_fw_received_size == 0));
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	889b      	ldrh	r3, [r3, #4]
 80008ae:	b299      	uxth	r1, r3
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <processOtaPacket+0x178>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf0c      	ite	eq
 80008b8:	2301      	moveq	r3, #1
 80008ba:	2300      	movne	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f000 f84b 	bl	800095c <flashWrite>
                ota_fw_received_size += data_packet->payload_len;
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	889b      	ldrh	r3, [r3, #4]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <processOtaPacket+0x178>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a1d      	ldr	r2, [pc, #116]	; (800094c <processOtaPacket+0x178>)
 80008d6:	6013      	str	r3, [r2, #0]
//                printf("Received %d bytes of data!\n", data_packet->payload_len);
                if (ota_fw_received_size >= fw_image_meta_data.file_size) {
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <processOtaPacket+0x16c>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <processOtaPacket+0x178>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d802      	bhi.n	80008ea <processOtaPacket+0x116>
                    ota_state = END;
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <processOtaPacket+0x160>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	701a      	strb	r2, [r3, #0]
                }
                return 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e01a      	b.n	8000924 <processOtaPacket+0x150>
            }
            printf("Error: Expected OTA data!\n");
 80008ee:	4818      	ldr	r0, [pc, #96]	; (8000950 <processOtaPacket+0x17c>)
 80008f0:	f002 ff6e 	bl	80037d0 <puts>
            break;
 80008f4:	e014      	b.n	8000920 <processOtaPacket+0x14c>

        case END:
            if (packet->packet_type == OTA_COMMAND && packet->cmd == OTA_END_CMD) {
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10b      	bne.n	8000916 <processOtaPacket+0x142>
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	799b      	ldrb	r3, [r3, #6]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d107      	bne.n	8000916 <processOtaPacket+0x142>
                printf("Received OTA END command!\n");
 8000906:	4813      	ldr	r0, [pc, #76]	; (8000954 <processOtaPacket+0x180>)
 8000908:	f002 ff62 	bl	80037d0 <puts>
                // TODO: Verify full package CRC
                ota_state = IDLE;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <processOtaPacket+0x160>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
                return 0;
 8000912:	2300      	movs	r3, #0
 8000914:	e006      	b.n	8000924 <processOtaPacket+0x150>
            }
            printf("Error: Expected OTA end command!\n");
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <processOtaPacket+0x184>)
 8000918:	f002 ff5a 	bl	80037d0 <puts>
            break;
 800091c:	e000      	b.n	8000920 <processOtaPacket+0x14c>

        default:
            break;
 800091e:	bf00      	nop
    }

    // TODO: Add CRC verification

    // if we didn't return early, then we have an error
    return -1;
 8000920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	08004568 	.word	0x08004568
 8000930:	08004570 	.word	0x08004570
 8000934:	2000088f 	.word	0x2000088f
 8000938:	0800458c 	.word	0x0800458c
 800093c:	080045a8 	.word	0x080045a8
 8000940:	20000890 	.word	0x20000890
 8000944:	080045cc 	.word	0x080045cc
 8000948:	080045f8 	.word	0x080045f8
 800094c:	20000898 	.word	0x20000898
 8000950:	08004630 	.word	0x08004630
 8000954:	0800464c 	.word	0x0800464c
 8000958:	08004668 	.word	0x08004668

0800095c <flashWrite>:


static int flashWrite(uint8_t* data, uint16_t data_len, bool first_write) {
 800095c:	b5b0      	push	{r4, r5, r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
 8000968:	4613      	mov	r3, r2
 800096a:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret = HAL_FLASH_Unlock();
 800096c:	f000 fe2c 	bl	80015c8 <HAL_FLASH_Unlock>
 8000970:	4603      	mov	r3, r0
 8000972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret != HAL_OK) {
 8000976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <flashWrite+0x2e>
		printf("Failed to unlock flash!\n");
 800097e:	4839      	ldr	r0, [pc, #228]	; (8000a64 <flashWrite+0x108>)
 8000980:	f002 ff26 	bl	80037d0 <puts>
		return -1;
 8000984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000988:	e068      	b.n	8000a5c <flashWrite+0x100>
	}

	// Erase flash once
	if (first_write) {
 800098a:	787b      	ldrb	r3, [r7, #1]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d028      	beq.n	80009e2 <flashWrite+0x86>
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t sector_error;

		EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.Sector        = FLASH_SECTOR_2;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
		EraseInitStruct.NbSectors     = 6;                    //erase 6 sectors (2, 3, 4, 5, 6, 7)
 8000998:	2306      	movs	r3, #6
 800099a:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]

		printf("Erasing flash memory sectors %ld - %ld", EraseInitStruct.Sector, EraseInitStruct.Sector + EraseInitStruct.NbSectors - 1);
 80009a0:	6979      	ldr	r1, [r7, #20]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	4413      	add	r3, r2
 80009a8:	3b01      	subs	r3, #1
 80009aa:	461a      	mov	r2, r3
 80009ac:	482e      	ldr	r0, [pc, #184]	; (8000a68 <flashWrite+0x10c>)
 80009ae:	f002 fea9 	bl	8003704 <iprintf>
		ret = HAL_FLASHEx_Erase( &EraseInitStruct, &sector_error );
 80009b2:	f107 0208 	add.w	r2, r7, #8
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 ff75 	bl	80018ac <HAL_FLASHEx_Erase>
 80009c2:	4603      	mov	r3, r0
 80009c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if( ret != HAL_OK ) {
 80009c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d005      	beq.n	80009dc <flashWrite+0x80>
			printf("Failed to erase flash!\n");
 80009d0:	4826      	ldr	r0, [pc, #152]	; (8000a6c <flashWrite+0x110>)
 80009d2:	f002 fefd 	bl	80037d0 <puts>
			return -1;  // TODO: return HAL_FLASH_GetError()
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009da:	e03f      	b.n	8000a5c <flashWrite+0x100>
		}
		printf("Erased flash successfully!\n");
 80009dc:	4824      	ldr	r0, [pc, #144]	; (8000a70 <flashWrite+0x114>)
 80009de:	f002 fef7 	bl	80037d0 <puts>
	}

	// Write to flash
	for (int i = 0; i < data_len; i++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
 80009e6:	e025      	b.n	8000a34 <flashWrite+0xd8>
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, APP_FLASH_ADDR + ota_fw_received_size + i, data[i]);
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <flashWrite+0x118>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	4413      	add	r3, r2
 80009f0:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80009f4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2200      	movs	r2, #0
 8000a04:	461c      	mov	r4, r3
 8000a06:	4615      	mov	r5, r2
 8000a08:	4622      	mov	r2, r4
 8000a0a:	462b      	mov	r3, r5
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 fd87 	bl	8001520 <HAL_FLASH_Program>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != HAL_OK) {
 8000a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <flashWrite+0xd2>
			printf("Flash program failed! only %d bytes written to flash!\n", i);
 8000a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a22:	4815      	ldr	r0, [pc, #84]	; (8000a78 <flashWrite+0x11c>)
 8000a24:	f002 fe6e 	bl	8003704 <iprintf>
			return -1;
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2c:	e016      	b.n	8000a5c <flashWrite+0x100>
	for (int i = 0; i < data_len; i++) {
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	3301      	adds	r3, #1
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbd5      	blt.n	80009e8 <flashWrite+0x8c>
		}
	}

    ret = HAL_FLASH_Lock();
 8000a3c:	f000 fde6 	bl	800160c <HAL_FLASH_Lock>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( ret != HAL_OK ) {
 8000a46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d005      	beq.n	8000a5a <flashWrite+0xfe>
    	printf("Failed to lock flash!\n");
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <flashWrite+0x120>)
 8000a50:	f002 febe 	bl	80037d0 <puts>
    	return -1;
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a58:	e000      	b.n	8000a5c <flashWrite+0x100>
    }

    return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bdb0      	pop	{r4, r5, r7, pc}
 8000a64:	0800468c 	.word	0x0800468c
 8000a68:	080046a4 	.word	0x080046a4
 8000a6c:	080046cc 	.word	0x080046cc
 8000a70:	080046e4 	.word	0x080046e4
 8000a74:	20000898 	.word	0x20000898
 8000a78:	08004700 	.word	0x08004700
 8000a7c:	08004738 	.word	0x08004738

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a86:	f000 fb7f 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f85b 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f000 f91b 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a92:	f000 f8c5 	bl	8000c20 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a96:	f000 f8ed 	bl	8000c74 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader\n");
 8000a9a:	4822      	ldr	r0, [pc, #136]	; (8000b24 <main+0xa4>)
 8000a9c:	f002 fe98 	bl	80037d0 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);  // Turn on LD2 (Green LED)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4820      	ldr	r0, [pc, #128]	; (8000b28 <main+0xa8>)
 8000aa6:	f001 f9cf 	bl	8001e48 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aae:	f000 fc13 	bl	80012d8 <HAL_Delay>

  /* Check the GPIO for 3 seconds */
  GPIO_PinState OTA_Pin_state;
  uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8000ab2:	f000 fc05 	bl	80012c0 <HAL_GetTick>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000abc:	60fb      	str	r3, [r7, #12]

  printf("Hold the User Button PC13 to trigger OTA update...\r\n");
 8000abe:	481b      	ldr	r0, [pc, #108]	; (8000b2c <main+0xac>)
 8000ac0:	f002 fe86 	bl	80037d0 <puts>
  do {
	  OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8000ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <main+0xb0>)
 8000aca:	f001 f9a5 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	72fb      	strb	r3, [r7, #11]
	  uint32_t current_tick = HAL_GetTick();
 8000ad2:	f000 fbf5 	bl	80012c0 <HAL_GetTick>
 8000ad6:	6078      	str	r0, [r7, #4]

	  /* Allow 3 seconds for the user to hit the button */
	  if( ( OTA_Pin_state == GPIO_PIN_RESET ) || ( current_tick > end_tick ) ) {
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d004      	beq.n	8000ae8 <main+0x68>
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d800      	bhi.n	8000ae8 <main+0x68>
  do {
 8000ae6:	e7ed      	b.n	8000ac4 <main+0x44>
		  break;
	  }
  } while (1);

  /*Start the Firmware or Application update */
  if( OTA_Pin_state == GPIO_PIN_RESET )
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d110      	bne.n	8000b10 <main+0x90>
  {
    printf("Starting Firmware Download!!!\r\n");
 8000aee:	4811      	ldr	r0, [pc, #68]	; (8000b34 <main+0xb4>)
 8000af0:	f002 fe6e 	bl	80037d0 <puts>
    /* OTA Request. Receive the data from the UART4 and flash */
    if(etx_ota_download_and_flash())
 8000af4:	f7ff fd5a 	bl	80005ac <etx_ota_download_and_flash>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <main+0x86>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <main+0xb8>)
 8000b00:	f002 fe66 	bl	80037d0 <puts>
      while( 1 );
 8000b04:	e7fe      	b.n	8000b04 <main+0x84>
    }
    else
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <main+0xbc>)
 8000b08:	f002 fe62 	bl	80037d0 <puts>
      HAL_NVIC_SystemReset();
 8000b0c:	f000 fcf7 	bl	80014fe <HAL_NVIC_SystemReset>
    }
  }

  // Jump to app
  goto_application();
 8000b10:	f000 f95a 	bl	8000dc8 <goto_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("in main loop\n");
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <main+0xc0>)
 8000b16:	f002 fe5b 	bl	80037d0 <puts>
	  HAL_Delay(10000);
 8000b1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b1e:	f000 fbdb 	bl	80012d8 <HAL_Delay>
	  printf("in main loop\n");
 8000b22:	e7f7      	b.n	8000b14 <main+0x94>
 8000b24:	08004750 	.word	0x08004750
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	08004764 	.word	0x08004764
 8000b30:	40020800 	.word	0x40020800
 8000b34:	08004798 	.word	0x08004798
 8000b38:	080047b8 	.word	0x080047b8
 8000b3c:	080047d8 	.word	0x080047d8
 8000b40:	08004804 	.word	0x08004804

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2234      	movs	r2, #52	; 0x34
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fe44 	bl	80037e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <SystemClock_Config+0xd4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <SystemClock_Config+0xd4>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <SystemClock_Config+0xd4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b90:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bac:	2310      	movs	r3, #16
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fd94 	bl	8002700 <HAL_RCC_OscConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bde:	f000 f91d 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	230f      	movs	r3, #15
 8000be4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f93c 	bl	8001e7c <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c0a:	f000 f907 	bl	8000e1c <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3750      	adds	r7, #80	; 0x50
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40007000 	.word	0x40007000

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_USART2_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c58:	f001 fff0 	bl	8002c3c <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 f8db 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000089c 	.word	0x2000089c
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_USART3_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000cac:	f001 ffc6 	bl	8002c3c <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 f8b1 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200008e4 	.word	0x200008e4
 8000cc4:	40004800 	.word	0x40004800

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a2c      	ldr	r2, [pc, #176]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_GPIO_Init+0xd0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	4812      	ldr	r0, [pc, #72]	; (8000d9c <MX_GPIO_Init+0xd4>)
 8000d54:	f001 f878 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_GPIO_Init+0xd8>)
 8000d6e:	f000 febf 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d72:	2320      	movs	r3, #32
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_GPIO_Init+0xd4>)
 8000d8a:	f000 feb1 	bl	8001af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020800 	.word	0x40020800

08000da4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000dac:	1d39      	adds	r1, r7, #4
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db2:	2201      	movs	r2, #1
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <__io_putchar+0x20>)
 8000db6:	f001 ff91 	bl	8002cdc <HAL_UART_Transmit>
  return ch;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000089c 	.word	0x2000089c

08000dc8 <goto_application>:

static void goto_application(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	printf("Jumping to Application\n");
 8000dce:	480f      	ldr	r0, [pc, #60]	; (8000e0c <goto_application+0x44>)
 8000dd0:	f002 fcfe 	bl	80037d0 <puts>

	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08008000 + 4U)));
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <goto_application+0x48>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	607b      	str	r3, [r7, #4]

	// turn off LED
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2120      	movs	r1, #32
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <goto_application+0x4c>)
 8000de0:	f001 f832 	bl	8001e48 <HAL_GPIO_WritePin>

	HAL_RCC_DeInit();
 8000de4:	f001 fb94 	bl	8002510 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000de8:	f000 f9f0 	bl	80011cc <HAL_DeInit>
	// __set_MSP(*(volatile uint32_t*) 0x08040000);
	SysTick->CTRL = 0;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <goto_application+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <goto_application+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <goto_application+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]

	// Jump to App
	app_reset_handler();
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4798      	blx	r3
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08004814 	.word	0x08004814
 8000e10:	08008004 	.word	0x08008004
 8000e14:	40020000 	.word	0x40020000
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e66:	2007      	movs	r0, #7
 8000e68:	f000 fb22 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a32      	ldr	r2, [pc, #200]	; (8000f60 <HAL_UART_MspInit+0xe8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d12c      	bne.n	8000ef4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a30      	ldr	r2, [pc, #192]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a29      	ldr	r2, [pc, #164]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	481e      	ldr	r0, [pc, #120]	; (8000f68 <HAL_UART_MspInit+0xf0>)
 8000eee:	f000 fdff 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ef2:	e031      	b.n	8000f58 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <HAL_UART_MspInit+0xf4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12c      	bne.n	8000f58 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_UART_MspInit+0xec>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <HAL_UART_MspInit+0xf8>)
 8000f54:	f000 fdcc 	bl	8001af0 <HAL_GPIO_Init>
}
 8000f58:	bf00      	nop
 8000f5a:	3730      	adds	r7, #48	; 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40004400 	.word	0x40004400
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40004800 	.word	0x40004800
 8000f70:	40020800 	.word	0x40020800

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f96a 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e00a      	b.n	8000ff0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fda:	f3af 8000 	nop.w
 8000fde:	4601      	mov	r1, r0
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbf0      	blt.n	8000fda <_read+0x12>
  }

  return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e009      	b.n	8001028 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fec1 	bl	8000da4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf1      	blt.n	8001014 <_write+0x12>
  }
  return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_close>:

int _close(int file)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001062:	605a      	str	r2, [r3, #4]
  return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_isatty>:

int _isatty(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f002 fb8c 	bl	80037f0 <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20020000 	.word	0x20020000
 8001104:	00000400 	.word	0x00000400
 8001108:	2000092c 	.word	0x2000092c
 800110c:	20000aa0 	.word	0x20000aa0

08001110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001138:	f7ff ffea 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	; (8001174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	; (8001180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001162:	f002 fb4b 	bl	80037fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fc8b 	bl	8000a80 <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800116c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001178:	08004888 	.word	0x08004888
  ldr r2, =_sbss
 800117c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001180:	20000aa0 	.word	0x20000aa0

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f97d 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f83e 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fe34 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_DeInit+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_DeInit+0x50>)
 80011d4:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_DeInit+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_DeInit+0x4c>)
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_DeInit+0x54>)
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_DeInit+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_DeInit+0x4c>)
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_DeInit+0x58>)
 80011ec:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_DeInit+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_DeInit+0x4c>)
 80011f6:	2281      	movs	r2, #129	; 0x81
 80011f8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_DeInit+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_DeInit+0x4c>)
 8001202:	2203      	movs	r2, #3
 8001204:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <HAL_DeInit+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800120c:	f000 f80c 	bl	8001228 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	3fffc9ff 	.word	0x3fffc9ff
 8001220:	00c77933 	.word	0x00c77933
 8001224:	206010ff 	.word	0x206010ff

08001228 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f955 	bl	8001506 <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001274:	f000 f927 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000008 	.word	0x20000008
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000930 	.word	0x20000930

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000930 	.word	0x20000930

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001444:	f3bf 8f4f 	dsb	sy
}
 8001448:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <__NVIC_SystemReset+0x24>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001452:	4904      	ldr	r1, [pc, #16]	; (8001464 <__NVIC_SystemReset+0x24>)
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_SystemReset+0x28>)
 8001456:	4313      	orrs	r3, r2
 8001458:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800145a:	f3bf 8f4f 	dsb	sy
}
 800145e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <__NVIC_SystemReset+0x20>
 8001464:	e000ed00 	.word	0xe000ed00
 8001468:	05fa0004 	.word	0x05fa0004

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001490:	f7ff ff78 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff31 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff46 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff78 	bl	80013d8 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff47 	bl	8001384 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001502:	f7ff ff9d 	bl	8001440 <__NVIC_SystemReset>

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffac 	bl	800146c <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <HAL_FLASH_Program+0xa0>)
 8001534:	7e1b      	ldrb	r3, [r3, #24]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_FLASH_Program+0x1e>
 800153a:	2302      	movs	r3, #2
 800153c:	e03b      	b.n	80015b6 <HAL_FLASH_Program+0x96>
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_FLASH_Program+0xa0>)
 8001540:	2201      	movs	r2, #1
 8001542:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001544:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001548:	f000 f870 	bl	800162c <FLASH_WaitForLastOperation>
 800154c:	4603      	mov	r3, r0
 800154e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12b      	bne.n	80015ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800155c:	783b      	ldrb	r3, [r7, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f000 f91b 	bl	800179c <FLASH_Program_Byte>
 8001566:	e016      	b.n	8001596 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d105      	bne.n	800157a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800156e:	883b      	ldrh	r3, [r7, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	68b8      	ldr	r0, [r7, #8]
 8001574:	f000 f8ee 	bl	8001754 <FLASH_Program_HalfWord>
 8001578:	e00d      	b.n	8001596 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d105      	bne.n	800158c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f000 f8c3 	bl	8001710 <FLASH_Program_Word>
 800158a:	e004      	b.n	8001596 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800158c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f000 f88b 	bl	80016ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001596:	f24c 3050 	movw	r0, #50000	; 0xc350
 800159a:	f000 f847 	bl	800162c <FLASH_WaitForLastOperation>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_FLASH_Program+0xa4>)
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_FLASH_Program+0xa4>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_FLASH_Program+0xa0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000934 	.word	0x20000934
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_FLASH_Unlock+0x38>)
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da0b      	bge.n	80015f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_FLASH_Unlock+0x38>)
 80015dc:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_FLASH_Unlock+0x3c>)
 80015de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_FLASH_Unlock+0x38>)
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <HAL_FLASH_Unlock+0x40>)
 80015e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_FLASH_Unlock+0x38>)
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	da01      	bge.n	80015f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40023c00 	.word	0x40023c00
 8001604:	45670123 	.word	0x45670123
 8001608:	cdef89ab 	.word	0xcdef89ab

0800160c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_FLASH_Lock+0x1c>)
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_FLASH_Lock+0x1c>)
 8001616:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800161a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40023c00 	.word	0x40023c00

0800162c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <FLASH_WaitForLastOperation+0x78>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800163e:	f7ff fe3f 	bl	80012c0 <HAL_GetTick>
 8001642:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001644:	e010      	b.n	8001668 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800164c:	d00c      	beq.n	8001668 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <FLASH_WaitForLastOperation+0x38>
 8001654:	f7ff fe34 	bl	80012c0 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d201      	bcs.n	8001668 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e019      	b.n	800169c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <FLASH_WaitForLastOperation+0x7c>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e8      	bne.n	8001646 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <FLASH_WaitForLastOperation+0x7c>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <FLASH_WaitForLastOperation+0x7c>)
 8001682:	2201      	movs	r2, #1
 8001684:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <FLASH_WaitForLastOperation+0x7c>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001692:	f000 f8a5 	bl	80017e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
  
}  
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000934 	.word	0x20000934
 80016a8:	40023c00 	.word	0x40023c00

080016ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <FLASH_Program_DoubleWord+0x60>)
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <FLASH_Program_DoubleWord+0x60>)
 80016be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <FLASH_Program_DoubleWord+0x60>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4a10      	ldr	r2, [pc, #64]	; (800170c <FLASH_Program_DoubleWord+0x60>)
 80016ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <FLASH_Program_DoubleWord+0x60>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <FLASH_Program_DoubleWord+0x60>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80016e2:	f3bf 8f6f 	isb	sy
}
 80016e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80016e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	000a      	movs	r2, r1
 80016f6:	2300      	movs	r3, #0
 80016f8:	68f9      	ldr	r1, [r7, #12]
 80016fa:	3104      	adds	r1, #4
 80016fc:	4613      	mov	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40023c00 	.word	0x40023c00

08001710 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <FLASH_Program_Word+0x40>)
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <FLASH_Program_Word+0x40>)
 8001720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001724:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <FLASH_Program_Word+0x40>)
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <FLASH_Program_Word+0x40>)
 800172c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001730:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <FLASH_Program_Word+0x40>)
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4a06      	ldr	r2, [pc, #24]	; (8001750 <FLASH_Program_Word+0x40>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40023c00 	.word	0x40023c00

08001754 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <FLASH_Program_HalfWord+0x44>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <FLASH_Program_HalfWord+0x44>)
 8001766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800176a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <FLASH_Program_HalfWord+0x44>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	4a09      	ldr	r2, [pc, #36]	; (8001798 <FLASH_Program_HalfWord+0x44>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <FLASH_Program_HalfWord+0x44>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	4a06      	ldr	r2, [pc, #24]	; (8001798 <FLASH_Program_HalfWord+0x44>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	801a      	strh	r2, [r3, #0]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00

0800179c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <FLASH_Program_Byte+0x40>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <FLASH_Program_Byte+0x40>)
 80017ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <FLASH_Program_Byte+0x40>)
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <FLASH_Program_Byte+0x40>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <FLASH_Program_Byte+0x40>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <FLASH_Program_Byte+0x40>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	78fa      	ldrb	r2, [r7, #3]
 80017cc:	701a      	strb	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80017f0:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	f043 0310 	orr.w	r3, r3, #16
 80017f8:	4a2b      	ldr	r2, [pc, #172]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 80017fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 80017fe:	2210      	movs	r2, #16
 8001800:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	4a24      	ldr	r2, [pc, #144]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 8001818:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 800181c:	2220      	movs	r2, #32
 800181e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 8001836:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 8001854:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d009      	beq.n	800187c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 8001872:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 8001876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	f043 0320 	orr.w	r3, r3, #32
 8001890:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <FLASH_SetErrorCode+0xc8>)
 8001892:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <FLASH_SetErrorCode+0xc4>)
 8001896:	2202      	movs	r2, #2
 8001898:	60da      	str	r2, [r3, #12]
  }
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40023c00 	.word	0x40023c00
 80018a8:	20000934 	.word	0x20000934

080018ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_FLASHEx_Erase+0xd8>)
 80018c0:	7e1b      	ldrb	r3, [r3, #24]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_FLASHEx_Erase+0x1e>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e058      	b.n	800197c <HAL_FLASHEx_Erase+0xd0>
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_FLASHEx_Erase+0xd8>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018d4:	f7ff feaa 	bl	800162c <FLASH_WaitForLastOperation>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d148      	bne.n	8001974 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d115      	bne.n	800191e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f000 f844 	bl	800198c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001904:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001908:	f7ff fe90 	bl	800162c <FLASH_WaitForLastOperation>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_FLASHEx_Erase+0xdc>)
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_FLASHEx_Erase+0xdc>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6113      	str	r3, [r2, #16]
 800191c:	e028      	b.n	8001970 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	e01c      	b.n	8001960 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f000 f850 	bl	80019d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001934:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001938:	f7ff fe78 	bl	800162c <FLASH_WaitForLastOperation>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_FLASHEx_Erase+0xdc>)
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_FLASHEx_Erase+0xdc>)
 8001946:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800194a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	601a      	str	r2, [r3, #0]
          break;
 8001958:	e00a      	b.n	8001970 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3301      	adds	r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4413      	add	r3, r2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	d3da      	bcc.n	8001926 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001970:	f000 f878 	bl	8001a64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_FLASHEx_Erase+0xd8>)
 8001976:	2200      	movs	r2, #0
 8001978:	761a      	strb	r2, [r3, #24]

  return status;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000934 	.word	0x20000934
 8001988:	40023c00 	.word	0x40023c00

0800198c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <FLASH_MassErase+0x44>)
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <FLASH_MassErase+0x44>)
 800199e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <FLASH_MassErase+0x44>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <FLASH_MassErase+0x44>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <FLASH_MassErase+0x44>)
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	4313      	orrs	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <FLASH_MassErase+0x44>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6113      	str	r3, [r2, #16]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e010      	b.n	8001a12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d103      	bne.n	80019fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80019f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e009      	b.n	8001a12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d103      	bne.n	8001a0c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e002      	b.n	8001a12 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001a0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a10:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	490f      	ldr	r1, [pc, #60]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <FLASH_Erase_Sector+0x8c>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6113      	str	r3, [r2, #16]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d017      	beq.n	8001aa4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001a7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a19      	ldr	r2, [pc, #100]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001a86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a16      	ldr	r2, [pc, #88]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d017      	beq.n	8001ae0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ad2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <FLASH_FlushCaches+0x88>)
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ade:	6013      	str	r3, [r2, #0]
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e165      	b.n	8001dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 8154 	bne.w	8001dd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d005      	beq.n	8001b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d017      	beq.n	8001be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80ae 	beq.w	8001dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_GPIO_Init+0x300>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a5c      	ldr	r2, [pc, #368]	; (8001df0 <HAL_GPIO_Init+0x300>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <HAL_GPIO_Init+0x300>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c92:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	; (8001df8 <HAL_GPIO_Init+0x308>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d025      	beq.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01f      	beq.n	8001d06 <HAL_GPIO_Init+0x216>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_GPIO_Init+0x310>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d019      	beq.n	8001d02 <HAL_GPIO_Init+0x212>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_GPIO_Init+0x314>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_GPIO_Init+0x20e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_GPIO_Init+0x318>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <HAL_GPIO_Init+0x20a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_GPIO_Init+0x31c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <HAL_GPIO_Init+0x206>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a49      	ldr	r2, [pc, #292]	; (8001e10 <HAL_GPIO_Init+0x320>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_GPIO_Init+0x202>
 8001cee:	2306      	movs	r3, #6
 8001cf0:	e00c      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e00a      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2a:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4e:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f ae96 	bls.w	8001b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40021400 	.word	0x40021400
 8001e10:	40021800 	.word	0x40021800
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	041a      	lsls	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	619a      	str	r2, [r3, #24]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0cc      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b68      	ldr	r3, [pc, #416]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d90c      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b65      	ldr	r3, [pc, #404]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b8      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	494d      	ldr	r1, [pc, #308]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d044      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d119      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e07f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e067      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4934      	ldr	r1, [pc, #208]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7ff f9a8 	bl	80012c0 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7ff f9a4 	bl	80012c0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e04f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d20c      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e032      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4916      	ldr	r1, [pc, #88]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002002:	f000 f855 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8002006:	4602      	mov	r2, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	490a      	ldr	r1, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	5ccb      	ldrb	r3, [r1, r3]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f908 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00
 8002038:	40023800 	.word	0x40023800
 800203c:	0800482c 	.word	0x0800482c
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_GetHCLKFreq+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002064:	f7ff fff0 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0a9b      	lsrs	r3, r3, #10
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4903      	ldr	r1, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	0800483c 	.word	0x0800483c

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800208c:	f7ff ffdc 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0b5b      	lsrs	r3, r3, #13
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4903      	ldr	r1, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40023800 	.word	0x40023800
 80020ac:	0800483c 	.word	0x0800483c

080020b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b4:	b0ae      	sub	sp, #184	; 0xb8
 80020b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d6:	4bcb      	ldr	r3, [pc, #812]	; (8002404 <HAL_RCC_GetSysClockFreq+0x354>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	f200 8206 	bhi.w	80024f0 <HAL_RCC_GetSysClockFreq+0x440>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	08002121 	.word	0x08002121
 80020f0:	080024f1 	.word	0x080024f1
 80020f4:	080024f1 	.word	0x080024f1
 80020f8:	080024f1 	.word	0x080024f1
 80020fc:	08002129 	.word	0x08002129
 8002100:	080024f1 	.word	0x080024f1
 8002104:	080024f1 	.word	0x080024f1
 8002108:	080024f1 	.word	0x080024f1
 800210c:	08002131 	.word	0x08002131
 8002110:	080024f1 	.word	0x080024f1
 8002114:	080024f1 	.word	0x080024f1
 8002118:	080024f1 	.word	0x080024f1
 800211c:	08002321 	.word	0x08002321
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4bb9      	ldr	r3, [pc, #740]	; (8002408 <HAL_RCC_GetSysClockFreq+0x358>)
 8002122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002126:	e1e7      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002128:	4bb8      	ldr	r3, [pc, #736]	; (800240c <HAL_RCC_GetSysClockFreq+0x35c>)
 800212a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800212e:	e1e3      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002130:	4bb4      	ldr	r3, [pc, #720]	; (8002404 <HAL_RCC_GetSysClockFreq+0x354>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213c:	4bb1      	ldr	r3, [pc, #708]	; (8002404 <HAL_RCC_GetSysClockFreq+0x354>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d071      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002148:	4bae      	ldr	r3, [pc, #696]	; (8002404 <HAL_RCC_GetSysClockFreq+0x354>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002154:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800215c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800216a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800216e:	4622      	mov	r2, r4
 8002170:	462b      	mov	r3, r5
 8002172:	f04f 0000 	mov.w	r0, #0
 8002176:	f04f 0100 	mov.w	r1, #0
 800217a:	0159      	lsls	r1, r3, #5
 800217c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002180:	0150      	lsls	r0, r2, #5
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4621      	mov	r1, r4
 8002188:	1a51      	subs	r1, r2, r1
 800218a:	6439      	str	r1, [r7, #64]	; 0x40
 800218c:	4629      	mov	r1, r5
 800218e:	eb63 0301 	sbc.w	r3, r3, r1
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80021a0:	4649      	mov	r1, r9
 80021a2:	018b      	lsls	r3, r1, #6
 80021a4:	4641      	mov	r1, r8
 80021a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021aa:	4641      	mov	r1, r8
 80021ac:	018a      	lsls	r2, r1, #6
 80021ae:	4641      	mov	r1, r8
 80021b0:	1a51      	subs	r1, r2, r1
 80021b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80021b4:	4649      	mov	r1, r9
 80021b6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80021c8:	4649      	mov	r1, r9
 80021ca:	00cb      	lsls	r3, r1, #3
 80021cc:	4641      	mov	r1, r8
 80021ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021d2:	4641      	mov	r1, r8
 80021d4:	00ca      	lsls	r2, r1, #3
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	4622      	mov	r2, r4
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
 80021e2:	462b      	mov	r3, r5
 80021e4:	460a      	mov	r2, r1
 80021e6:	eb42 0303 	adc.w	r3, r2, r3
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021f8:	4629      	mov	r1, r5
 80021fa:	024b      	lsls	r3, r1, #9
 80021fc:	4621      	mov	r1, r4
 80021fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002202:	4621      	mov	r1, r4
 8002204:	024a      	lsls	r2, r1, #9
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800220e:	2200      	movs	r2, #0
 8002210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002214:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002218:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800221c:	f7fe f848 	bl	80002b0 <__aeabi_uldivmod>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4613      	mov	r3, r2
 8002226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800222a:	e067      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222c:	4b75      	ldr	r3, [pc, #468]	; (8002404 <HAL_RCC_GetSysClockFreq+0x354>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	2200      	movs	r2, #0
 8002234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002238:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800223c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002244:	67bb      	str	r3, [r7, #120]	; 0x78
 8002246:	2300      	movs	r3, #0
 8002248:	67fb      	str	r3, [r7, #124]	; 0x7c
 800224a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800224e:	4622      	mov	r2, r4
 8002250:	462b      	mov	r3, r5
 8002252:	f04f 0000 	mov.w	r0, #0
 8002256:	f04f 0100 	mov.w	r1, #0
 800225a:	0159      	lsls	r1, r3, #5
 800225c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002260:	0150      	lsls	r0, r2, #5
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4621      	mov	r1, r4
 8002268:	1a51      	subs	r1, r2, r1
 800226a:	62b9      	str	r1, [r7, #40]	; 0x28
 800226c:	4629      	mov	r1, r5
 800226e:	eb63 0301 	sbc.w	r3, r3, r1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002280:	4649      	mov	r1, r9
 8002282:	018b      	lsls	r3, r1, #6
 8002284:	4641      	mov	r1, r8
 8002286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800228a:	4641      	mov	r1, r8
 800228c:	018a      	lsls	r2, r1, #6
 800228e:	4641      	mov	r1, r8
 8002290:	ebb2 0a01 	subs.w	sl, r2, r1
 8002294:	4649      	mov	r1, r9
 8002296:	eb63 0b01 	sbc.w	fp, r3, r1
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ae:	4692      	mov	sl, r2
 80022b0:	469b      	mov	fp, r3
 80022b2:	4623      	mov	r3, r4
 80022b4:	eb1a 0303 	adds.w	r3, sl, r3
 80022b8:	623b      	str	r3, [r7, #32]
 80022ba:	462b      	mov	r3, r5
 80022bc:	eb4b 0303 	adc.w	r3, fp, r3
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80022ce:	4629      	mov	r1, r5
 80022d0:	028b      	lsls	r3, r1, #10
 80022d2:	4621      	mov	r1, r4
 80022d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d8:	4621      	mov	r1, r4
 80022da:	028a      	lsls	r2, r1, #10
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022e4:	2200      	movs	r2, #0
 80022e6:	673b      	str	r3, [r7, #112]	; 0x70
 80022e8:	677a      	str	r2, [r7, #116]	; 0x74
 80022ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80022ee:	f7fd ffdf 	bl	80002b0 <__aeabi_uldivmod>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4613      	mov	r3, r2
 80022f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022fc:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_GetSysClockFreq+0x354>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	3301      	adds	r3, #1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800230e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002312:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800231e:	e0eb      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002320:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_RCC_GetSysClockFreq+0x354>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232c:	4b35      	ldr	r3, [pc, #212]	; (8002404 <HAL_RCC_GetSysClockFreq+0x354>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d06b      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002338:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_RCC_GetSysClockFreq+0x354>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	2200      	movs	r2, #0
 8002340:	66bb      	str	r3, [r7, #104]	; 0x68
 8002342:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234a:	663b      	str	r3, [r7, #96]	; 0x60
 800234c:	2300      	movs	r3, #0
 800234e:	667b      	str	r3, [r7, #100]	; 0x64
 8002350:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002354:	4622      	mov	r2, r4
 8002356:	462b      	mov	r3, r5
 8002358:	f04f 0000 	mov.w	r0, #0
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	0159      	lsls	r1, r3, #5
 8002362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002366:	0150      	lsls	r0, r2, #5
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4621      	mov	r1, r4
 800236e:	1a51      	subs	r1, r2, r1
 8002370:	61b9      	str	r1, [r7, #24]
 8002372:	4629      	mov	r1, r5
 8002374:	eb63 0301 	sbc.w	r3, r3, r1
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002386:	4659      	mov	r1, fp
 8002388:	018b      	lsls	r3, r1, #6
 800238a:	4651      	mov	r1, sl
 800238c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002390:	4651      	mov	r1, sl
 8002392:	018a      	lsls	r2, r1, #6
 8002394:	4651      	mov	r1, sl
 8002396:	ebb2 0801 	subs.w	r8, r2, r1
 800239a:	4659      	mov	r1, fp
 800239c:	eb63 0901 	sbc.w	r9, r3, r1
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b4:	4690      	mov	r8, r2
 80023b6:	4699      	mov	r9, r3
 80023b8:	4623      	mov	r3, r4
 80023ba:	eb18 0303 	adds.w	r3, r8, r3
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	462b      	mov	r3, r5
 80023c2:	eb49 0303 	adc.w	r3, r9, r3
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80023d4:	4629      	mov	r1, r5
 80023d6:	024b      	lsls	r3, r1, #9
 80023d8:	4621      	mov	r1, r4
 80023da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023de:	4621      	mov	r1, r4
 80023e0:	024a      	lsls	r2, r1, #9
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023ea:	2200      	movs	r2, #0
 80023ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80023ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023f4:	f7fd ff5c 	bl	80002b0 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4613      	mov	r3, r2
 80023fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002402:	e065      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x420>
 8002404:	40023800 	.word	0x40023800
 8002408:	00f42400 	.word	0x00f42400
 800240c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002410:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <HAL_RCC_GetSysClockFreq+0x458>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	2200      	movs	r2, #0
 8002418:	4618      	mov	r0, r3
 800241a:	4611      	mov	r1, r2
 800241c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002420:	653b      	str	r3, [r7, #80]	; 0x50
 8002422:	2300      	movs	r3, #0
 8002424:	657b      	str	r3, [r7, #84]	; 0x54
 8002426:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800242a:	4642      	mov	r2, r8
 800242c:	464b      	mov	r3, r9
 800242e:	f04f 0000 	mov.w	r0, #0
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	0159      	lsls	r1, r3, #5
 8002438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800243c:	0150      	lsls	r0, r2, #5
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4641      	mov	r1, r8
 8002444:	1a51      	subs	r1, r2, r1
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	4649      	mov	r1, r9
 800244a:	eb63 0301 	sbc.w	r3, r3, r1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800245c:	4659      	mov	r1, fp
 800245e:	018b      	lsls	r3, r1, #6
 8002460:	4651      	mov	r1, sl
 8002462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002466:	4651      	mov	r1, sl
 8002468:	018a      	lsls	r2, r1, #6
 800246a:	4651      	mov	r1, sl
 800246c:	1a54      	subs	r4, r2, r1
 800246e:	4659      	mov	r1, fp
 8002470:	eb63 0501 	sbc.w	r5, r3, r1
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	00eb      	lsls	r3, r5, #3
 800247e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002482:	00e2      	lsls	r2, r4, #3
 8002484:	4614      	mov	r4, r2
 8002486:	461d      	mov	r5, r3
 8002488:	4643      	mov	r3, r8
 800248a:	18e3      	adds	r3, r4, r3
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	464b      	mov	r3, r9
 8002490:	eb45 0303 	adc.w	r3, r5, r3
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024a2:	4629      	mov	r1, r5
 80024a4:	028b      	lsls	r3, r1, #10
 80024a6:	4621      	mov	r1, r4
 80024a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024ac:	4621      	mov	r1, r4
 80024ae:	028a      	lsls	r2, r1, #10
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024b8:	2200      	movs	r2, #0
 80024ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80024bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024c2:	f7fd fef5 	bl	80002b0 <__aeabi_uldivmod>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4613      	mov	r3, r2
 80024cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCC_GetSysClockFreq+0x458>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0f1b      	lsrs	r3, r3, #28
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80024de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024ee:	e003      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_GetSysClockFreq+0x45c>)
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	37b8      	adds	r7, #184	; 0xb8
 8002500:	46bd      	mov	sp, r7
 8002502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	00f42400 	.word	0x00f42400

08002510 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002516:	f7fe fed3 	bl	80012c0 <HAL_GetTick>
 800251a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800251c:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a71      	ldr	r2, [pc, #452]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252a:	f7fe fec9 	bl	80012c0 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0d0      	b.n	80026de <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800253c:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002548:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a66      	ldr	r2, [pc, #408]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800254e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002552:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002554:	f7fe feb4 	bl	80012c0 <HAL_GetTick>
 8002558:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002562:	f7fe fead 	bl	80012c0 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0b2      	b.n	80026de <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002578:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002584:	f7fe fe9c 	bl	80012c0 <HAL_GetTick>
 8002588:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800258a:	4b57      	ldr	r3, [pc, #348]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a56      	ldr	r2, [pc, #344]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002590:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002594:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7fe fe92 	bl	80012c0 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e099      	b.n	80026de <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80025aa:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80025b6:	f7fe fe83 	bl	80012c0 <HAL_GetTick>
 80025ba:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025bc:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a49      	ldr	r2, [pc, #292]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80025c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7fe fe79 	bl	80012c0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e080      	b.n	80026de <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80025e8:	f7fe fe6a 	bl	80012c0 <HAL_GetTick>
 80025ec:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80025ee:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a3d      	ldr	r2, [pc, #244]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80025f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025f8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025fc:	f7fe fe60 	bl	80012c0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e067      	b.n	80026de <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800261a:	f7fe fe51 	bl	80012c0 <HAL_GetTick>
 800261e:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262a:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800262e:	f7fe fe47 	bl	80012c0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e04e      	b.n	80026de <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800264e:	4a27      	ldr	r2, [pc, #156]	; (80026ec <HAL_RCC_DeInit+0x1dc>)
 8002650:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002652:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <HAL_RCC_DeInit+0x1dc>)
 8002656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <HAL_RCC_DeInit+0x1e0>)
 800265e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002668:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800266c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002678:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002684:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 800268c:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002690:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 8002698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800269c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80026a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <HAL_RCC_DeInit+0x1d8>)
 80026bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c0:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <HAL_RCC_DeInit+0x1e4>)
 80026c4:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <HAL_RCC_DeInit+0x1e8>)
 80026c6:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_RCC_DeInit+0x1ec>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fdb3 	bl	8001238 <HAL_InitTick>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
  }
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	24003010 	.word	0x24003010
 80026f0:	04003010 	.word	0x04003010
 80026f4:	20000000 	.word	0x20000000
 80026f8:	00f42400 	.word	0x00f42400
 80026fc:	20000004 	.word	0x20000004

08002700 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e28d      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8083 	beq.w	8002826 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002720:	4b94      	ldr	r3, [pc, #592]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b04      	cmp	r3, #4
 800272a:	d019      	beq.n	8002760 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800272c:	4b91      	ldr	r3, [pc, #580]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002734:	2b08      	cmp	r3, #8
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002738:	4b8e      	ldr	r3, [pc, #568]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002744:	d00c      	beq.n	8002760 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002746:	4b8b      	ldr	r3, [pc, #556]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d112      	bne.n	8002778 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275e:	d10b      	bne.n	8002778 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	4b84      	ldr	r3, [pc, #528]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d05b      	beq.n	8002824 <HAL_RCC_OscConfig+0x124>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d157      	bne.n	8002824 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e25a      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d106      	bne.n	8002790 <HAL_RCC_OscConfig+0x90>
 8002782:	4b7c      	ldr	r3, [pc, #496]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a7b      	ldr	r2, [pc, #492]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e01d      	b.n	80027cc <HAL_RCC_OscConfig+0xcc>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0xb4>
 800279a:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a75      	ldr	r2, [pc, #468]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80027a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b73      	ldr	r3, [pc, #460]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a72      	ldr	r2, [pc, #456]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0xcc>
 80027b4:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a6e      	ldr	r2, [pc, #440]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80027ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b6c      	ldr	r3, [pc, #432]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6b      	ldr	r2, [pc, #428]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d013      	beq.n	80027fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fd74 	bl	80012c0 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe fd70 	bl	80012c0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e21f      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0xdc>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fd60 	bl	80012c0 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fd5c 	bl	80012c0 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e20b      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	4b57      	ldr	r3, [pc, #348]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x104>
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d06f      	beq.n	8002912 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002832:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b00      	cmp	r3, #0
 800283c:	d017      	beq.n	800286e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800283e:	4b4d      	ldr	r3, [pc, #308]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002846:	2b08      	cmp	r3, #8
 8002848:	d105      	bne.n	8002856 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800284a:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b44      	ldr	r3, [pc, #272]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x186>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1d3      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_RCC_OscConfig+0x278>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fd09 	bl	80012c0 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fd05 	bl	80012c0 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1b4      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4925      	ldr	r1, [pc, #148]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_RCC_OscConfig+0x278>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fce8 	bl	80012c0 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe fce4 	bl	80012c0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e193      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d036      	beq.n	800298c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_RCC_OscConfig+0x27c>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fcc8 	bl	80012c0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fcc4 	bl	80012c0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e173      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_OscConfig+0x274>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x234>
 8002952:	e01b      	b.n	800298c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_OscConfig+0x27c>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fe fcb1 	bl	80012c0 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	e00e      	b.n	8002980 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002962:	f7fe fcad 	bl	80012c0 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d907      	bls.n	8002980 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e15c      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
 8002974:	40023800 	.word	0x40023800
 8002978:	42470000 	.word	0x42470000
 800297c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b8a      	ldr	r3, [pc, #552]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ea      	bne.n	8002962 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8097 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b83      	ldr	r3, [pc, #524]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b7f      	ldr	r3, [pc, #508]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a7e      	ldr	r2, [pc, #504]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b7c      	ldr	r3, [pc, #496]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b79      	ldr	r3, [pc, #484]	; (8002bb0 <HAL_RCC_OscConfig+0x4b0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_RCC_OscConfig+0x4b0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a75      	ldr	r2, [pc, #468]	; (8002bb0 <HAL_RCC_OscConfig+0x4b0>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fc6d 	bl	80012c0 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7fe fc69 	bl	80012c0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e118      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <HAL_RCC_OscConfig+0x4b0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x31e>
 8002a10:	4b66      	ldr	r3, [pc, #408]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a65      	ldr	r2, [pc, #404]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x358>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x340>
 8002a26:	4b61      	ldr	r3, [pc, #388]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a60      	ldr	r2, [pc, #384]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
 8002a32:	4b5e      	ldr	r3, [pc, #376]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a5d      	ldr	r2, [pc, #372]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x358>
 8002a40:	4b5a      	ldr	r3, [pc, #360]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a59      	ldr	r2, [pc, #356]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	4b57      	ldr	r3, [pc, #348]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a56      	ldr	r2, [pc, #344]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe fc2e 	bl	80012c0 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fe fc2a 	bl	80012c0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0d7      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ee      	beq.n	8002a68 <HAL_RCC_OscConfig+0x368>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fc18 	bl	80012c0 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe fc14 	bl	80012c0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0c1      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	4b40      	ldr	r3, [pc, #256]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ee      	bne.n	8002a94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	4a3a      	ldr	r2, [pc, #232]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80ad 	beq.w	8002c2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d060      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d145      	bne.n	8002b72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <HAL_RCC_OscConfig+0x4b4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fbe8 	bl	80012c0 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fbe4 	bl	80012c0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e093      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b29      	ldr	r3, [pc, #164]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	071b      	lsls	r3, r3, #28
 8002b3e:	491b      	ldr	r1, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x4b4>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fbb9 	bl	80012c0 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe fbb5 	bl	80012c0 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e064      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x452>
 8002b70:	e05c      	b.n	8002c2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_OscConfig+0x4b4>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fba2 	bl	80012c0 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fb9e 	bl	80012c0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e04d      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_OscConfig+0x4ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x480>
 8002b9e:	e045      	b.n	8002c2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e040      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <HAL_RCC_OscConfig+0x538>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d030      	beq.n	8002c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d129      	bne.n	8002c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d122      	bne.n	8002c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d119      	bne.n	8002c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	3b01      	subs	r3, #1
 8002c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d10f      	bne.n	8002c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e042      	b.n	8002cd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe f908 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fa09 	bl	8003098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d175      	bne.n	8002de8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_UART_Transmit+0x2c>
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e06e      	b.n	8002dea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2221      	movs	r2, #33	; 0x21
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe fad1 	bl	80012c0 <HAL_GetTick>
 8002d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d34:	d108      	bne.n	8002d48 <HAL_UART_Transmit+0x6c>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d104      	bne.n	8002d48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	e003      	b.n	8002d50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d50:	e02e      	b.n	8002db0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2180      	movs	r1, #128	; 0x80
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f8df 	bl	8002f20 <UART_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e03a      	b.n	8002dea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e007      	b.n	8002da2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1cb      	bne.n	8002d52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2140      	movs	r1, #64	; 0x40
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f8ab 	bl	8002f20 <UART_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e006      	b.n	8002dea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b08a      	sub	sp, #40	; 0x28
 8002df6:	af02      	add	r7, sp, #8
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	f040 8081 	bne.w	8002f16 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_UART_Receive+0x2e>
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e079      	b.n	8002f18 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2222      	movs	r2, #34	; 0x22
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e38:	f7fe fa42 	bl	80012c0 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e52:	d108      	bne.n	8002e66 <HAL_UART_Receive+0x74>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	e003      	b.n	8002e6e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e6e:	e047      	b.n	8002f00 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2120      	movs	r1, #32
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f850 	bl	8002f20 <UART_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e042      	b.n	8002f18 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10c      	bne.n	8002eb2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	3302      	adds	r3, #2
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	e01f      	b.n	8002ef2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eba:	d007      	beq.n	8002ecc <HAL_UART_Receive+0xda>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <HAL_UART_Receive+0xe8>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e008      	b.n	8002eec <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1b2      	bne.n	8002e70 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f30:	e03b      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f38:	d037      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7fe f9c1 	bl	80012c0 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e03a      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d023      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b80      	cmp	r3, #128	; 0x80
 8002f66:	d020      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d01d      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d116      	bne.n	8002faa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f81d 	bl	8002fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d0b4      	beq.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b095      	sub	sp, #84	; 0x54
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ffa:	643a      	str	r2, [r7, #64]	; 0x40
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e5      	bne.n	8002fda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3314      	adds	r3, #20
 8003014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	61fb      	str	r3, [r7, #28]
   return(result);
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	64bb      	str	r3, [r7, #72]	; 0x48
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3314      	adds	r3, #20
 800302c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800302e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e5      	bne.n	800300e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	2b01      	cmp	r3, #1
 8003048:	d119      	bne.n	800307e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	e853 3f00 	ldrex	r3, [r3]
 8003058:	60bb      	str	r3, [r7, #8]
   return(result);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f023 0310 	bic.w	r3, r3, #16
 8003060:	647b      	str	r3, [r7, #68]	; 0x44
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800306a:	61ba      	str	r2, [r7, #24]
 800306c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306e:	6979      	ldr	r1, [r7, #20]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	e841 2300 	strex	r3, r2, [r1]
 8003076:	613b      	str	r3, [r7, #16]
   return(result);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1e5      	bne.n	800304a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800308c:	bf00      	nop
 800308e:	3754      	adds	r7, #84	; 0x54
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800309c:	b0c0      	sub	sp, #256	; 0x100
 800309e:	af00      	add	r7, sp, #0
 80030a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	68d9      	ldr	r1, [r3, #12]
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	ea40 0301 	orr.w	r3, r0, r1
 80030c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030f0:	f021 010c 	bic.w	r1, r1, #12
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030fe:	430b      	orrs	r3, r1
 8003100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003112:	6999      	ldr	r1, [r3, #24]
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	ea40 0301 	orr.w	r3, r0, r1
 800311e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b8f      	ldr	r3, [pc, #572]	; (8003364 <UART_SetConfig+0x2cc>)
 8003128:	429a      	cmp	r2, r3
 800312a:	d005      	beq.n	8003138 <UART_SetConfig+0xa0>
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b8d      	ldr	r3, [pc, #564]	; (8003368 <UART_SetConfig+0x2d0>)
 8003134:	429a      	cmp	r2, r3
 8003136:	d104      	bne.n	8003142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7fe ffa6 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 800313c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003140:	e003      	b.n	800314a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003142:	f7fe ff8d 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8003146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003154:	f040 810c 	bne.w	8003370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800316a:	4622      	mov	r2, r4
 800316c:	462b      	mov	r3, r5
 800316e:	1891      	adds	r1, r2, r2
 8003170:	65b9      	str	r1, [r7, #88]	; 0x58
 8003172:	415b      	adcs	r3, r3
 8003174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800317a:	4621      	mov	r1, r4
 800317c:	eb12 0801 	adds.w	r8, r2, r1
 8003180:	4629      	mov	r1, r5
 8003182:	eb43 0901 	adc.w	r9, r3, r1
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800319a:	4690      	mov	r8, r2
 800319c:	4699      	mov	r9, r3
 800319e:	4623      	mov	r3, r4
 80031a0:	eb18 0303 	adds.w	r3, r8, r3
 80031a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031a8:	462b      	mov	r3, r5
 80031aa:	eb49 0303 	adc.w	r3, r9, r3
 80031ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031c6:	460b      	mov	r3, r1
 80031c8:	18db      	adds	r3, r3, r3
 80031ca:	653b      	str	r3, [r7, #80]	; 0x50
 80031cc:	4613      	mov	r3, r2
 80031ce:	eb42 0303 	adc.w	r3, r2, r3
 80031d2:	657b      	str	r3, [r7, #84]	; 0x54
 80031d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031dc:	f7fd f868 	bl	80002b0 <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4b61      	ldr	r3, [pc, #388]	; (800336c <UART_SetConfig+0x2d4>)
 80031e6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	011c      	lsls	r4, r3, #4
 80031ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	1891      	adds	r1, r2, r2
 8003206:	64b9      	str	r1, [r7, #72]	; 0x48
 8003208:	415b      	adcs	r3, r3
 800320a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800320c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003210:	4641      	mov	r1, r8
 8003212:	eb12 0a01 	adds.w	sl, r2, r1
 8003216:	4649      	mov	r1, r9
 8003218:	eb43 0b01 	adc.w	fp, r3, r1
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800322c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003230:	4692      	mov	sl, r2
 8003232:	469b      	mov	fp, r3
 8003234:	4643      	mov	r3, r8
 8003236:	eb1a 0303 	adds.w	r3, sl, r3
 800323a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800323e:	464b      	mov	r3, r9
 8003240:	eb4b 0303 	adc.w	r3, fp, r3
 8003244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800325c:	460b      	mov	r3, r1
 800325e:	18db      	adds	r3, r3, r3
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
 8003262:	4613      	mov	r3, r2
 8003264:	eb42 0303 	adc.w	r3, r2, r3
 8003268:	647b      	str	r3, [r7, #68]	; 0x44
 800326a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800326e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003272:	f7fd f81d 	bl	80002b0 <__aeabi_uldivmod>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4611      	mov	r1, r2
 800327c:	4b3b      	ldr	r3, [pc, #236]	; (800336c <UART_SetConfig+0x2d4>)
 800327e:	fba3 2301 	umull	r2, r3, r3, r1
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2264      	movs	r2, #100	; 0x64
 8003286:	fb02 f303 	mul.w	r3, r2, r3
 800328a:	1acb      	subs	r3, r1, r3
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <UART_SetConfig+0x2d4>)
 8003294:	fba3 2302 	umull	r2, r3, r3, r2
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032a0:	441c      	add	r4, r3
 80032a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	1891      	adds	r1, r2, r2
 80032ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80032bc:	415b      	adcs	r3, r3
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032c4:	4641      	mov	r1, r8
 80032c6:	1851      	adds	r1, r2, r1
 80032c8:	6339      	str	r1, [r7, #48]	; 0x30
 80032ca:	4649      	mov	r1, r9
 80032cc:	414b      	adcs	r3, r1
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032dc:	4659      	mov	r1, fp
 80032de:	00cb      	lsls	r3, r1, #3
 80032e0:	4651      	mov	r1, sl
 80032e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e6:	4651      	mov	r1, sl
 80032e8:	00ca      	lsls	r2, r1, #3
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	4642      	mov	r2, r8
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032f8:	464b      	mov	r3, r9
 80032fa:	460a      	mov	r2, r1
 80032fc:	eb42 0303 	adc.w	r3, r2, r3
 8003300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003318:	460b      	mov	r3, r1
 800331a:	18db      	adds	r3, r3, r3
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
 800331e:	4613      	mov	r3, r2
 8003320:	eb42 0303 	adc.w	r3, r2, r3
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800332a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800332e:	f7fc ffbf 	bl	80002b0 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <UART_SetConfig+0x2d4>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	; 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	3332      	adds	r3, #50	; 0x32
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <UART_SetConfig+0x2d4>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 0207 	and.w	r2, r3, #7
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4422      	add	r2, r4
 800335e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003360:	e106      	b.n	8003570 <UART_SetConfig+0x4d8>
 8003362:	bf00      	nop
 8003364:	40011000 	.word	0x40011000
 8003368:	40011400 	.word	0x40011400
 800336c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003374:	2200      	movs	r2, #0
 8003376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800337a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800337e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003382:	4642      	mov	r2, r8
 8003384:	464b      	mov	r3, r9
 8003386:	1891      	adds	r1, r2, r2
 8003388:	6239      	str	r1, [r7, #32]
 800338a:	415b      	adcs	r3, r3
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003392:	4641      	mov	r1, r8
 8003394:	1854      	adds	r4, r2, r1
 8003396:	4649      	mov	r1, r9
 8003398:	eb43 0501 	adc.w	r5, r3, r1
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	00eb      	lsls	r3, r5, #3
 80033a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033aa:	00e2      	lsls	r2, r4, #3
 80033ac:	4614      	mov	r4, r2
 80033ae:	461d      	mov	r5, r3
 80033b0:	4643      	mov	r3, r8
 80033b2:	18e3      	adds	r3, r4, r3
 80033b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033b8:	464b      	mov	r3, r9
 80033ba:	eb45 0303 	adc.w	r3, r5, r3
 80033be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033de:	4629      	mov	r1, r5
 80033e0:	008b      	lsls	r3, r1, #2
 80033e2:	4621      	mov	r1, r4
 80033e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e8:	4621      	mov	r1, r4
 80033ea:	008a      	lsls	r2, r1, #2
 80033ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033f0:	f7fc ff5e 	bl	80002b0 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4b60      	ldr	r3, [pc, #384]	; (800357c <UART_SetConfig+0x4e4>)
 80033fa:	fba3 2302 	umull	r2, r3, r3, r2
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	011c      	lsls	r4, r3, #4
 8003402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003406:	2200      	movs	r2, #0
 8003408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800340c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	1891      	adds	r1, r2, r2
 800341a:	61b9      	str	r1, [r7, #24]
 800341c:	415b      	adcs	r3, r3
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003424:	4641      	mov	r1, r8
 8003426:	1851      	adds	r1, r2, r1
 8003428:	6139      	str	r1, [r7, #16]
 800342a:	4649      	mov	r1, r9
 800342c:	414b      	adcs	r3, r1
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800343c:	4659      	mov	r1, fp
 800343e:	00cb      	lsls	r3, r1, #3
 8003440:	4651      	mov	r1, sl
 8003442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003446:	4651      	mov	r1, sl
 8003448:	00ca      	lsls	r2, r1, #3
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	4603      	mov	r3, r0
 8003450:	4642      	mov	r2, r8
 8003452:	189b      	adds	r3, r3, r2
 8003454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003458:	464b      	mov	r3, r9
 800345a:	460a      	mov	r2, r1
 800345c:	eb42 0303 	adc.w	r3, r2, r3
 8003460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	67bb      	str	r3, [r7, #120]	; 0x78
 800346e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800347c:	4649      	mov	r1, r9
 800347e:	008b      	lsls	r3, r1, #2
 8003480:	4641      	mov	r1, r8
 8003482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003486:	4641      	mov	r1, r8
 8003488:	008a      	lsls	r2, r1, #2
 800348a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800348e:	f7fc ff0f 	bl	80002b0 <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4611      	mov	r1, r2
 8003498:	4b38      	ldr	r3, [pc, #224]	; (800357c <UART_SetConfig+0x4e4>)
 800349a:	fba3 2301 	umull	r2, r3, r3, r1
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2264      	movs	r2, #100	; 0x64
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	1acb      	subs	r3, r1, r3
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	3332      	adds	r3, #50	; 0x32
 80034ac:	4a33      	ldr	r2, [pc, #204]	; (800357c <UART_SetConfig+0x4e4>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b8:	441c      	add	r4, r3
 80034ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034be:	2200      	movs	r2, #0
 80034c0:	673b      	str	r3, [r7, #112]	; 0x70
 80034c2:	677a      	str	r2, [r7, #116]	; 0x74
 80034c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034c8:	4642      	mov	r2, r8
 80034ca:	464b      	mov	r3, r9
 80034cc:	1891      	adds	r1, r2, r2
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	415b      	adcs	r3, r3
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034d8:	4641      	mov	r1, r8
 80034da:	1851      	adds	r1, r2, r1
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	4649      	mov	r1, r9
 80034e0:	414b      	adcs	r3, r1
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034f0:	4659      	mov	r1, fp
 80034f2:	00cb      	lsls	r3, r1, #3
 80034f4:	4651      	mov	r1, sl
 80034f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034fa:	4651      	mov	r1, sl
 80034fc:	00ca      	lsls	r2, r1, #3
 80034fe:	4610      	mov	r0, r2
 8003500:	4619      	mov	r1, r3
 8003502:	4603      	mov	r3, r0
 8003504:	4642      	mov	r2, r8
 8003506:	189b      	adds	r3, r3, r2
 8003508:	66bb      	str	r3, [r7, #104]	; 0x68
 800350a:	464b      	mov	r3, r9
 800350c:	460a      	mov	r2, r1
 800350e:	eb42 0303 	adc.w	r3, r2, r3
 8003512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	663b      	str	r3, [r7, #96]	; 0x60
 800351e:	667a      	str	r2, [r7, #100]	; 0x64
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800352c:	4649      	mov	r1, r9
 800352e:	008b      	lsls	r3, r1, #2
 8003530:	4641      	mov	r1, r8
 8003532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003536:	4641      	mov	r1, r8
 8003538:	008a      	lsls	r2, r1, #2
 800353a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800353e:	f7fc feb7 	bl	80002b0 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <UART_SetConfig+0x4e4>)
 8003548:	fba3 1302 	umull	r1, r3, r3, r2
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	2164      	movs	r1, #100	; 0x64
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	3332      	adds	r3, #50	; 0x32
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <UART_SetConfig+0x4e4>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4422      	add	r2, r4
 800356e:	609a      	str	r2, [r3, #8]
}
 8003570:	bf00      	nop
 8003572:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003576:	46bd      	mov	sp, r7
 8003578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357c:	51eb851f 	.word	0x51eb851f

08003580 <std>:
 8003580:	2300      	movs	r3, #0
 8003582:	b510      	push	{r4, lr}
 8003584:	4604      	mov	r4, r0
 8003586:	e9c0 3300 	strd	r3, r3, [r0]
 800358a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800358e:	6083      	str	r3, [r0, #8]
 8003590:	8181      	strh	r1, [r0, #12]
 8003592:	6643      	str	r3, [r0, #100]	; 0x64
 8003594:	81c2      	strh	r2, [r0, #14]
 8003596:	6183      	str	r3, [r0, #24]
 8003598:	4619      	mov	r1, r3
 800359a:	2208      	movs	r2, #8
 800359c:	305c      	adds	r0, #92	; 0x5c
 800359e:	f000 f91f 	bl	80037e0 <memset>
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <std+0x58>)
 80035a4:	6263      	str	r3, [r4, #36]	; 0x24
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <std+0x5c>)
 80035a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <std+0x60>)
 80035ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <std+0x64>)
 80035b0:	6323      	str	r3, [r4, #48]	; 0x30
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <std+0x68>)
 80035b4:	6224      	str	r4, [r4, #32]
 80035b6:	429c      	cmp	r4, r3
 80035b8:	d006      	beq.n	80035c8 <std+0x48>
 80035ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80035be:	4294      	cmp	r4, r2
 80035c0:	d002      	beq.n	80035c8 <std+0x48>
 80035c2:	33d0      	adds	r3, #208	; 0xd0
 80035c4:	429c      	cmp	r4, r3
 80035c6:	d105      	bne.n	80035d4 <std+0x54>
 80035c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d0:	f000 b938 	b.w	8003844 <__retarget_lock_init_recursive>
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	bf00      	nop
 80035d8:	080040a5 	.word	0x080040a5
 80035dc:	080040c7 	.word	0x080040c7
 80035e0:	080040ff 	.word	0x080040ff
 80035e4:	08004123 	.word	0x08004123
 80035e8:	20000954 	.word	0x20000954

080035ec <stdio_exit_handler>:
 80035ec:	4a02      	ldr	r2, [pc, #8]	; (80035f8 <stdio_exit_handler+0xc>)
 80035ee:	4903      	ldr	r1, [pc, #12]	; (80035fc <stdio_exit_handler+0x10>)
 80035f0:	4803      	ldr	r0, [pc, #12]	; (8003600 <stdio_exit_handler+0x14>)
 80035f2:	f000 b869 	b.w	80036c8 <_fwalk_sglue>
 80035f6:	bf00      	nop
 80035f8:	2000000c 	.word	0x2000000c
 80035fc:	0800403d 	.word	0x0800403d
 8003600:	20000018 	.word	0x20000018

08003604 <cleanup_stdio>:
 8003604:	6841      	ldr	r1, [r0, #4]
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <cleanup_stdio+0x34>)
 8003608:	4299      	cmp	r1, r3
 800360a:	b510      	push	{r4, lr}
 800360c:	4604      	mov	r4, r0
 800360e:	d001      	beq.n	8003614 <cleanup_stdio+0x10>
 8003610:	f000 fd14 	bl	800403c <_fflush_r>
 8003614:	68a1      	ldr	r1, [r4, #8]
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <cleanup_stdio+0x38>)
 8003618:	4299      	cmp	r1, r3
 800361a:	d002      	beq.n	8003622 <cleanup_stdio+0x1e>
 800361c:	4620      	mov	r0, r4
 800361e:	f000 fd0d 	bl	800403c <_fflush_r>
 8003622:	68e1      	ldr	r1, [r4, #12]
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <cleanup_stdio+0x3c>)
 8003626:	4299      	cmp	r1, r3
 8003628:	d004      	beq.n	8003634 <cleanup_stdio+0x30>
 800362a:	4620      	mov	r0, r4
 800362c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003630:	f000 bd04 	b.w	800403c <_fflush_r>
 8003634:	bd10      	pop	{r4, pc}
 8003636:	bf00      	nop
 8003638:	20000954 	.word	0x20000954
 800363c:	200009bc 	.word	0x200009bc
 8003640:	20000a24 	.word	0x20000a24

08003644 <global_stdio_init.part.0>:
 8003644:	b510      	push	{r4, lr}
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <global_stdio_init.part.0+0x30>)
 8003648:	4c0b      	ldr	r4, [pc, #44]	; (8003678 <global_stdio_init.part.0+0x34>)
 800364a:	4a0c      	ldr	r2, [pc, #48]	; (800367c <global_stdio_init.part.0+0x38>)
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	4620      	mov	r0, r4
 8003650:	2200      	movs	r2, #0
 8003652:	2104      	movs	r1, #4
 8003654:	f7ff ff94 	bl	8003580 <std>
 8003658:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800365c:	2201      	movs	r2, #1
 800365e:	2109      	movs	r1, #9
 8003660:	f7ff ff8e 	bl	8003580 <std>
 8003664:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003668:	2202      	movs	r2, #2
 800366a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800366e:	2112      	movs	r1, #18
 8003670:	f7ff bf86 	b.w	8003580 <std>
 8003674:	20000a8c 	.word	0x20000a8c
 8003678:	20000954 	.word	0x20000954
 800367c:	080035ed 	.word	0x080035ed

08003680 <__sfp_lock_acquire>:
 8003680:	4801      	ldr	r0, [pc, #4]	; (8003688 <__sfp_lock_acquire+0x8>)
 8003682:	f000 b8e0 	b.w	8003846 <__retarget_lock_acquire_recursive>
 8003686:	bf00      	nop
 8003688:	20000a91 	.word	0x20000a91

0800368c <__sfp_lock_release>:
 800368c:	4801      	ldr	r0, [pc, #4]	; (8003694 <__sfp_lock_release+0x8>)
 800368e:	f000 b8db 	b.w	8003848 <__retarget_lock_release_recursive>
 8003692:	bf00      	nop
 8003694:	20000a91 	.word	0x20000a91

08003698 <__sinit>:
 8003698:	b510      	push	{r4, lr}
 800369a:	4604      	mov	r4, r0
 800369c:	f7ff fff0 	bl	8003680 <__sfp_lock_acquire>
 80036a0:	6a23      	ldr	r3, [r4, #32]
 80036a2:	b11b      	cbz	r3, 80036ac <__sinit+0x14>
 80036a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a8:	f7ff bff0 	b.w	800368c <__sfp_lock_release>
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <__sinit+0x28>)
 80036ae:	6223      	str	r3, [r4, #32]
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <__sinit+0x2c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f5      	bne.n	80036a4 <__sinit+0xc>
 80036b8:	f7ff ffc4 	bl	8003644 <global_stdio_init.part.0>
 80036bc:	e7f2      	b.n	80036a4 <__sinit+0xc>
 80036be:	bf00      	nop
 80036c0:	08003605 	.word	0x08003605
 80036c4:	20000a8c 	.word	0x20000a8c

080036c8 <_fwalk_sglue>:
 80036c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036cc:	4607      	mov	r7, r0
 80036ce:	4688      	mov	r8, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	2600      	movs	r6, #0
 80036d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036d8:	f1b9 0901 	subs.w	r9, r9, #1
 80036dc:	d505      	bpl.n	80036ea <_fwalk_sglue+0x22>
 80036de:	6824      	ldr	r4, [r4, #0]
 80036e0:	2c00      	cmp	r4, #0
 80036e2:	d1f7      	bne.n	80036d4 <_fwalk_sglue+0xc>
 80036e4:	4630      	mov	r0, r6
 80036e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ea:	89ab      	ldrh	r3, [r5, #12]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d907      	bls.n	8003700 <_fwalk_sglue+0x38>
 80036f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036f4:	3301      	adds	r3, #1
 80036f6:	d003      	beq.n	8003700 <_fwalk_sglue+0x38>
 80036f8:	4629      	mov	r1, r5
 80036fa:	4638      	mov	r0, r7
 80036fc:	47c0      	blx	r8
 80036fe:	4306      	orrs	r6, r0
 8003700:	3568      	adds	r5, #104	; 0x68
 8003702:	e7e9      	b.n	80036d8 <_fwalk_sglue+0x10>

08003704 <iprintf>:
 8003704:	b40f      	push	{r0, r1, r2, r3}
 8003706:	b507      	push	{r0, r1, r2, lr}
 8003708:	4906      	ldr	r1, [pc, #24]	; (8003724 <iprintf+0x20>)
 800370a:	ab04      	add	r3, sp, #16
 800370c:	6808      	ldr	r0, [r1, #0]
 800370e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003712:	6881      	ldr	r1, [r0, #8]
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	f000 f8c1 	bl	800389c <_vfiprintf_r>
 800371a:	b003      	add	sp, #12
 800371c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003720:	b004      	add	sp, #16
 8003722:	4770      	bx	lr
 8003724:	20000064 	.word	0x20000064

08003728 <_puts_r>:
 8003728:	6a03      	ldr	r3, [r0, #32]
 800372a:	b570      	push	{r4, r5, r6, lr}
 800372c:	6884      	ldr	r4, [r0, #8]
 800372e:	4605      	mov	r5, r0
 8003730:	460e      	mov	r6, r1
 8003732:	b90b      	cbnz	r3, 8003738 <_puts_r+0x10>
 8003734:	f7ff ffb0 	bl	8003698 <__sinit>
 8003738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800373a:	07db      	lsls	r3, r3, #31
 800373c:	d405      	bmi.n	800374a <_puts_r+0x22>
 800373e:	89a3      	ldrh	r3, [r4, #12]
 8003740:	0598      	lsls	r0, r3, #22
 8003742:	d402      	bmi.n	800374a <_puts_r+0x22>
 8003744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003746:	f000 f87e 	bl	8003846 <__retarget_lock_acquire_recursive>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	0719      	lsls	r1, r3, #28
 800374e:	d513      	bpl.n	8003778 <_puts_r+0x50>
 8003750:	6923      	ldr	r3, [r4, #16]
 8003752:	b18b      	cbz	r3, 8003778 <_puts_r+0x50>
 8003754:	3e01      	subs	r6, #1
 8003756:	68a3      	ldr	r3, [r4, #8]
 8003758:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800375c:	3b01      	subs	r3, #1
 800375e:	60a3      	str	r3, [r4, #8]
 8003760:	b9e9      	cbnz	r1, 800379e <_puts_r+0x76>
 8003762:	2b00      	cmp	r3, #0
 8003764:	da2e      	bge.n	80037c4 <_puts_r+0x9c>
 8003766:	4622      	mov	r2, r4
 8003768:	210a      	movs	r1, #10
 800376a:	4628      	mov	r0, r5
 800376c:	f000 fcdd 	bl	800412a <__swbuf_r>
 8003770:	3001      	adds	r0, #1
 8003772:	d007      	beq.n	8003784 <_puts_r+0x5c>
 8003774:	250a      	movs	r5, #10
 8003776:	e007      	b.n	8003788 <_puts_r+0x60>
 8003778:	4621      	mov	r1, r4
 800377a:	4628      	mov	r0, r5
 800377c:	f000 fd12 	bl	80041a4 <__swsetup_r>
 8003780:	2800      	cmp	r0, #0
 8003782:	d0e7      	beq.n	8003754 <_puts_r+0x2c>
 8003784:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800378a:	07da      	lsls	r2, r3, #31
 800378c:	d405      	bmi.n	800379a <_puts_r+0x72>
 800378e:	89a3      	ldrh	r3, [r4, #12]
 8003790:	059b      	lsls	r3, r3, #22
 8003792:	d402      	bmi.n	800379a <_puts_r+0x72>
 8003794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003796:	f000 f857 	bl	8003848 <__retarget_lock_release_recursive>
 800379a:	4628      	mov	r0, r5
 800379c:	bd70      	pop	{r4, r5, r6, pc}
 800379e:	2b00      	cmp	r3, #0
 80037a0:	da04      	bge.n	80037ac <_puts_r+0x84>
 80037a2:	69a2      	ldr	r2, [r4, #24]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	dc06      	bgt.n	80037b6 <_puts_r+0x8e>
 80037a8:	290a      	cmp	r1, #10
 80037aa:	d004      	beq.n	80037b6 <_puts_r+0x8e>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	6022      	str	r2, [r4, #0]
 80037b2:	7019      	strb	r1, [r3, #0]
 80037b4:	e7cf      	b.n	8003756 <_puts_r+0x2e>
 80037b6:	4622      	mov	r2, r4
 80037b8:	4628      	mov	r0, r5
 80037ba:	f000 fcb6 	bl	800412a <__swbuf_r>
 80037be:	3001      	adds	r0, #1
 80037c0:	d1c9      	bne.n	8003756 <_puts_r+0x2e>
 80037c2:	e7df      	b.n	8003784 <_puts_r+0x5c>
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	250a      	movs	r5, #10
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	6022      	str	r2, [r4, #0]
 80037cc:	701d      	strb	r5, [r3, #0]
 80037ce:	e7db      	b.n	8003788 <_puts_r+0x60>

080037d0 <puts>:
 80037d0:	4b02      	ldr	r3, [pc, #8]	; (80037dc <puts+0xc>)
 80037d2:	4601      	mov	r1, r0
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	f7ff bfa7 	b.w	8003728 <_puts_r>
 80037da:	bf00      	nop
 80037dc:	20000064 	.word	0x20000064

080037e0 <memset>:
 80037e0:	4402      	add	r2, r0
 80037e2:	4603      	mov	r3, r0
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d100      	bne.n	80037ea <memset+0xa>
 80037e8:	4770      	bx	lr
 80037ea:	f803 1b01 	strb.w	r1, [r3], #1
 80037ee:	e7f9      	b.n	80037e4 <memset+0x4>

080037f0 <__errno>:
 80037f0:	4b01      	ldr	r3, [pc, #4]	; (80037f8 <__errno+0x8>)
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000064 	.word	0x20000064

080037fc <__libc_init_array>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4d0d      	ldr	r5, [pc, #52]	; (8003834 <__libc_init_array+0x38>)
 8003800:	4c0d      	ldr	r4, [pc, #52]	; (8003838 <__libc_init_array+0x3c>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	2600      	movs	r6, #0
 8003808:	42a6      	cmp	r6, r4
 800380a:	d109      	bne.n	8003820 <__libc_init_array+0x24>
 800380c:	4d0b      	ldr	r5, [pc, #44]	; (800383c <__libc_init_array+0x40>)
 800380e:	4c0c      	ldr	r4, [pc, #48]	; (8003840 <__libc_init_array+0x44>)
 8003810:	f000 fe46 	bl	80044a0 <_init>
 8003814:	1b64      	subs	r4, r4, r5
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	2600      	movs	r6, #0
 800381a:	42a6      	cmp	r6, r4
 800381c:	d105      	bne.n	800382a <__libc_init_array+0x2e>
 800381e:	bd70      	pop	{r4, r5, r6, pc}
 8003820:	f855 3b04 	ldr.w	r3, [r5], #4
 8003824:	4798      	blx	r3
 8003826:	3601      	adds	r6, #1
 8003828:	e7ee      	b.n	8003808 <__libc_init_array+0xc>
 800382a:	f855 3b04 	ldr.w	r3, [r5], #4
 800382e:	4798      	blx	r3
 8003830:	3601      	adds	r6, #1
 8003832:	e7f2      	b.n	800381a <__libc_init_array+0x1e>
 8003834:	08004880 	.word	0x08004880
 8003838:	08004880 	.word	0x08004880
 800383c:	08004880 	.word	0x08004880
 8003840:	08004884 	.word	0x08004884

08003844 <__retarget_lock_init_recursive>:
 8003844:	4770      	bx	lr

08003846 <__retarget_lock_acquire_recursive>:
 8003846:	4770      	bx	lr

08003848 <__retarget_lock_release_recursive>:
 8003848:	4770      	bx	lr

0800384a <__sfputc_r>:
 800384a:	6893      	ldr	r3, [r2, #8]
 800384c:	3b01      	subs	r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	b410      	push	{r4}
 8003852:	6093      	str	r3, [r2, #8]
 8003854:	da08      	bge.n	8003868 <__sfputc_r+0x1e>
 8003856:	6994      	ldr	r4, [r2, #24]
 8003858:	42a3      	cmp	r3, r4
 800385a:	db01      	blt.n	8003860 <__sfputc_r+0x16>
 800385c:	290a      	cmp	r1, #10
 800385e:	d103      	bne.n	8003868 <__sfputc_r+0x1e>
 8003860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003864:	f000 bc61 	b.w	800412a <__swbuf_r>
 8003868:	6813      	ldr	r3, [r2, #0]
 800386a:	1c58      	adds	r0, r3, #1
 800386c:	6010      	str	r0, [r2, #0]
 800386e:	7019      	strb	r1, [r3, #0]
 8003870:	4608      	mov	r0, r1
 8003872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003876:	4770      	bx	lr

08003878 <__sfputs_r>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	4606      	mov	r6, r0
 800387c:	460f      	mov	r7, r1
 800387e:	4614      	mov	r4, r2
 8003880:	18d5      	adds	r5, r2, r3
 8003882:	42ac      	cmp	r4, r5
 8003884:	d101      	bne.n	800388a <__sfputs_r+0x12>
 8003886:	2000      	movs	r0, #0
 8003888:	e007      	b.n	800389a <__sfputs_r+0x22>
 800388a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800388e:	463a      	mov	r2, r7
 8003890:	4630      	mov	r0, r6
 8003892:	f7ff ffda 	bl	800384a <__sfputc_r>
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	d1f3      	bne.n	8003882 <__sfputs_r+0xa>
 800389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800389c <_vfiprintf_r>:
 800389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	460d      	mov	r5, r1
 80038a2:	b09d      	sub	sp, #116	; 0x74
 80038a4:	4614      	mov	r4, r2
 80038a6:	4698      	mov	r8, r3
 80038a8:	4606      	mov	r6, r0
 80038aa:	b118      	cbz	r0, 80038b4 <_vfiprintf_r+0x18>
 80038ac:	6a03      	ldr	r3, [r0, #32]
 80038ae:	b90b      	cbnz	r3, 80038b4 <_vfiprintf_r+0x18>
 80038b0:	f7ff fef2 	bl	8003698 <__sinit>
 80038b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038b6:	07d9      	lsls	r1, r3, #31
 80038b8:	d405      	bmi.n	80038c6 <_vfiprintf_r+0x2a>
 80038ba:	89ab      	ldrh	r3, [r5, #12]
 80038bc:	059a      	lsls	r2, r3, #22
 80038be:	d402      	bmi.n	80038c6 <_vfiprintf_r+0x2a>
 80038c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038c2:	f7ff ffc0 	bl	8003846 <__retarget_lock_acquire_recursive>
 80038c6:	89ab      	ldrh	r3, [r5, #12]
 80038c8:	071b      	lsls	r3, r3, #28
 80038ca:	d501      	bpl.n	80038d0 <_vfiprintf_r+0x34>
 80038cc:	692b      	ldr	r3, [r5, #16]
 80038ce:	b99b      	cbnz	r3, 80038f8 <_vfiprintf_r+0x5c>
 80038d0:	4629      	mov	r1, r5
 80038d2:	4630      	mov	r0, r6
 80038d4:	f000 fc66 	bl	80041a4 <__swsetup_r>
 80038d8:	b170      	cbz	r0, 80038f8 <_vfiprintf_r+0x5c>
 80038da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038dc:	07dc      	lsls	r4, r3, #31
 80038de:	d504      	bpl.n	80038ea <_vfiprintf_r+0x4e>
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e4:	b01d      	add	sp, #116	; 0x74
 80038e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ea:	89ab      	ldrh	r3, [r5, #12]
 80038ec:	0598      	lsls	r0, r3, #22
 80038ee:	d4f7      	bmi.n	80038e0 <_vfiprintf_r+0x44>
 80038f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038f2:	f7ff ffa9 	bl	8003848 <__retarget_lock_release_recursive>
 80038f6:	e7f3      	b.n	80038e0 <_vfiprintf_r+0x44>
 80038f8:	2300      	movs	r3, #0
 80038fa:	9309      	str	r3, [sp, #36]	; 0x24
 80038fc:	2320      	movs	r3, #32
 80038fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003902:	f8cd 800c 	str.w	r8, [sp, #12]
 8003906:	2330      	movs	r3, #48	; 0x30
 8003908:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003abc <_vfiprintf_r+0x220>
 800390c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003910:	f04f 0901 	mov.w	r9, #1
 8003914:	4623      	mov	r3, r4
 8003916:	469a      	mov	sl, r3
 8003918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800391c:	b10a      	cbz	r2, 8003922 <_vfiprintf_r+0x86>
 800391e:	2a25      	cmp	r2, #37	; 0x25
 8003920:	d1f9      	bne.n	8003916 <_vfiprintf_r+0x7a>
 8003922:	ebba 0b04 	subs.w	fp, sl, r4
 8003926:	d00b      	beq.n	8003940 <_vfiprintf_r+0xa4>
 8003928:	465b      	mov	r3, fp
 800392a:	4622      	mov	r2, r4
 800392c:	4629      	mov	r1, r5
 800392e:	4630      	mov	r0, r6
 8003930:	f7ff ffa2 	bl	8003878 <__sfputs_r>
 8003934:	3001      	adds	r0, #1
 8003936:	f000 80a9 	beq.w	8003a8c <_vfiprintf_r+0x1f0>
 800393a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800393c:	445a      	add	r2, fp
 800393e:	9209      	str	r2, [sp, #36]	; 0x24
 8003940:	f89a 3000 	ldrb.w	r3, [sl]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a1 	beq.w	8003a8c <_vfiprintf_r+0x1f0>
 800394a:	2300      	movs	r3, #0
 800394c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003954:	f10a 0a01 	add.w	sl, sl, #1
 8003958:	9304      	str	r3, [sp, #16]
 800395a:	9307      	str	r3, [sp, #28]
 800395c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003960:	931a      	str	r3, [sp, #104]	; 0x68
 8003962:	4654      	mov	r4, sl
 8003964:	2205      	movs	r2, #5
 8003966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800396a:	4854      	ldr	r0, [pc, #336]	; (8003abc <_vfiprintf_r+0x220>)
 800396c:	f7fc fc50 	bl	8000210 <memchr>
 8003970:	9a04      	ldr	r2, [sp, #16]
 8003972:	b9d8      	cbnz	r0, 80039ac <_vfiprintf_r+0x110>
 8003974:	06d1      	lsls	r1, r2, #27
 8003976:	bf44      	itt	mi
 8003978:	2320      	movmi	r3, #32
 800397a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397e:	0713      	lsls	r3, r2, #28
 8003980:	bf44      	itt	mi
 8003982:	232b      	movmi	r3, #43	; 0x2b
 8003984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003988:	f89a 3000 	ldrb.w	r3, [sl]
 800398c:	2b2a      	cmp	r3, #42	; 0x2a
 800398e:	d015      	beq.n	80039bc <_vfiprintf_r+0x120>
 8003990:	9a07      	ldr	r2, [sp, #28]
 8003992:	4654      	mov	r4, sl
 8003994:	2000      	movs	r0, #0
 8003996:	f04f 0c0a 	mov.w	ip, #10
 800399a:	4621      	mov	r1, r4
 800399c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039a0:	3b30      	subs	r3, #48	; 0x30
 80039a2:	2b09      	cmp	r3, #9
 80039a4:	d94d      	bls.n	8003a42 <_vfiprintf_r+0x1a6>
 80039a6:	b1b0      	cbz	r0, 80039d6 <_vfiprintf_r+0x13a>
 80039a8:	9207      	str	r2, [sp, #28]
 80039aa:	e014      	b.n	80039d6 <_vfiprintf_r+0x13a>
 80039ac:	eba0 0308 	sub.w	r3, r0, r8
 80039b0:	fa09 f303 	lsl.w	r3, r9, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	9304      	str	r3, [sp, #16]
 80039b8:	46a2      	mov	sl, r4
 80039ba:	e7d2      	b.n	8003962 <_vfiprintf_r+0xc6>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	1d19      	adds	r1, r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	9103      	str	r1, [sp, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bfbb      	ittet	lt
 80039c8:	425b      	neglt	r3, r3
 80039ca:	f042 0202 	orrlt.w	r2, r2, #2
 80039ce:	9307      	strge	r3, [sp, #28]
 80039d0:	9307      	strlt	r3, [sp, #28]
 80039d2:	bfb8      	it	lt
 80039d4:	9204      	strlt	r2, [sp, #16]
 80039d6:	7823      	ldrb	r3, [r4, #0]
 80039d8:	2b2e      	cmp	r3, #46	; 0x2e
 80039da:	d10c      	bne.n	80039f6 <_vfiprintf_r+0x15a>
 80039dc:	7863      	ldrb	r3, [r4, #1]
 80039de:	2b2a      	cmp	r3, #42	; 0x2a
 80039e0:	d134      	bne.n	8003a4c <_vfiprintf_r+0x1b0>
 80039e2:	9b03      	ldr	r3, [sp, #12]
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	9203      	str	r2, [sp, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfb8      	it	lt
 80039ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80039f2:	3402      	adds	r4, #2
 80039f4:	9305      	str	r3, [sp, #20]
 80039f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003acc <_vfiprintf_r+0x230>
 80039fa:	7821      	ldrb	r1, [r4, #0]
 80039fc:	2203      	movs	r2, #3
 80039fe:	4650      	mov	r0, sl
 8003a00:	f7fc fc06 	bl	8000210 <memchr>
 8003a04:	b138      	cbz	r0, 8003a16 <_vfiprintf_r+0x17a>
 8003a06:	9b04      	ldr	r3, [sp, #16]
 8003a08:	eba0 000a 	sub.w	r0, r0, sl
 8003a0c:	2240      	movs	r2, #64	; 0x40
 8003a0e:	4082      	lsls	r2, r0
 8003a10:	4313      	orrs	r3, r2
 8003a12:	3401      	adds	r4, #1
 8003a14:	9304      	str	r3, [sp, #16]
 8003a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a1a:	4829      	ldr	r0, [pc, #164]	; (8003ac0 <_vfiprintf_r+0x224>)
 8003a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a20:	2206      	movs	r2, #6
 8003a22:	f7fc fbf5 	bl	8000210 <memchr>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d03f      	beq.n	8003aaa <_vfiprintf_r+0x20e>
 8003a2a:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <_vfiprintf_r+0x228>)
 8003a2c:	bb1b      	cbnz	r3, 8003a76 <_vfiprintf_r+0x1da>
 8003a2e:	9b03      	ldr	r3, [sp, #12]
 8003a30:	3307      	adds	r3, #7
 8003a32:	f023 0307 	bic.w	r3, r3, #7
 8003a36:	3308      	adds	r3, #8
 8003a38:	9303      	str	r3, [sp, #12]
 8003a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a3c:	443b      	add	r3, r7
 8003a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a40:	e768      	b.n	8003914 <_vfiprintf_r+0x78>
 8003a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a46:	460c      	mov	r4, r1
 8003a48:	2001      	movs	r0, #1
 8003a4a:	e7a6      	b.n	800399a <_vfiprintf_r+0xfe>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	3401      	adds	r4, #1
 8003a50:	9305      	str	r3, [sp, #20]
 8003a52:	4619      	mov	r1, r3
 8003a54:	f04f 0c0a 	mov.w	ip, #10
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a5e:	3a30      	subs	r2, #48	; 0x30
 8003a60:	2a09      	cmp	r2, #9
 8003a62:	d903      	bls.n	8003a6c <_vfiprintf_r+0x1d0>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0c6      	beq.n	80039f6 <_vfiprintf_r+0x15a>
 8003a68:	9105      	str	r1, [sp, #20]
 8003a6a:	e7c4      	b.n	80039f6 <_vfiprintf_r+0x15a>
 8003a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a70:	4604      	mov	r4, r0
 8003a72:	2301      	movs	r3, #1
 8003a74:	e7f0      	b.n	8003a58 <_vfiprintf_r+0x1bc>
 8003a76:	ab03      	add	r3, sp, #12
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	462a      	mov	r2, r5
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <_vfiprintf_r+0x22c>)
 8003a7e:	a904      	add	r1, sp, #16
 8003a80:	4630      	mov	r0, r6
 8003a82:	f3af 8000 	nop.w
 8003a86:	4607      	mov	r7, r0
 8003a88:	1c78      	adds	r0, r7, #1
 8003a8a:	d1d6      	bne.n	8003a3a <_vfiprintf_r+0x19e>
 8003a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a8e:	07d9      	lsls	r1, r3, #31
 8003a90:	d405      	bmi.n	8003a9e <_vfiprintf_r+0x202>
 8003a92:	89ab      	ldrh	r3, [r5, #12]
 8003a94:	059a      	lsls	r2, r3, #22
 8003a96:	d402      	bmi.n	8003a9e <_vfiprintf_r+0x202>
 8003a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a9a:	f7ff fed5 	bl	8003848 <__retarget_lock_release_recursive>
 8003a9e:	89ab      	ldrh	r3, [r5, #12]
 8003aa0:	065b      	lsls	r3, r3, #25
 8003aa2:	f53f af1d 	bmi.w	80038e0 <_vfiprintf_r+0x44>
 8003aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aa8:	e71c      	b.n	80038e4 <_vfiprintf_r+0x48>
 8003aaa:	ab03      	add	r3, sp, #12
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	462a      	mov	r2, r5
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <_vfiprintf_r+0x22c>)
 8003ab2:	a904      	add	r1, sp, #16
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f000 f919 	bl	8003cec <_printf_i>
 8003aba:	e7e4      	b.n	8003a86 <_vfiprintf_r+0x1ea>
 8003abc:	08004844 	.word	0x08004844
 8003ac0:	0800484e 	.word	0x0800484e
 8003ac4:	00000000 	.word	0x00000000
 8003ac8:	08003879 	.word	0x08003879
 8003acc:	0800484a 	.word	0x0800484a

08003ad0 <sbrk_aligned>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4e0e      	ldr	r6, [pc, #56]	; (8003b0c <sbrk_aligned+0x3c>)
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	6831      	ldr	r1, [r6, #0]
 8003ad8:	4605      	mov	r5, r0
 8003ada:	b911      	cbnz	r1, 8003ae2 <sbrk_aligned+0x12>
 8003adc:	f000 fc72 	bl	80043c4 <_sbrk_r>
 8003ae0:	6030      	str	r0, [r6, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 fc6d 	bl	80043c4 <_sbrk_r>
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	d00a      	beq.n	8003b04 <sbrk_aligned+0x34>
 8003aee:	1cc4      	adds	r4, r0, #3
 8003af0:	f024 0403 	bic.w	r4, r4, #3
 8003af4:	42a0      	cmp	r0, r4
 8003af6:	d007      	beq.n	8003b08 <sbrk_aligned+0x38>
 8003af8:	1a21      	subs	r1, r4, r0
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 fc62 	bl	80043c4 <_sbrk_r>
 8003b00:	3001      	adds	r0, #1
 8003b02:	d101      	bne.n	8003b08 <sbrk_aligned+0x38>
 8003b04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003b08:	4620      	mov	r0, r4
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	20000a98 	.word	0x20000a98

08003b10 <_malloc_r>:
 8003b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b14:	1ccd      	adds	r5, r1, #3
 8003b16:	f025 0503 	bic.w	r5, r5, #3
 8003b1a:	3508      	adds	r5, #8
 8003b1c:	2d0c      	cmp	r5, #12
 8003b1e:	bf38      	it	cc
 8003b20:	250c      	movcc	r5, #12
 8003b22:	2d00      	cmp	r5, #0
 8003b24:	4607      	mov	r7, r0
 8003b26:	db01      	blt.n	8003b2c <_malloc_r+0x1c>
 8003b28:	42a9      	cmp	r1, r5
 8003b2a:	d905      	bls.n	8003b38 <_malloc_r+0x28>
 8003b2c:	230c      	movs	r3, #12
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	2600      	movs	r6, #0
 8003b32:	4630      	mov	r0, r6
 8003b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c0c <_malloc_r+0xfc>
 8003b3c:	f000 faa6 	bl	800408c <__malloc_lock>
 8003b40:	f8d8 3000 	ldr.w	r3, [r8]
 8003b44:	461c      	mov	r4, r3
 8003b46:	bb5c      	cbnz	r4, 8003ba0 <_malloc_r+0x90>
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	f7ff ffc0 	bl	8003ad0 <sbrk_aligned>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	4604      	mov	r4, r0
 8003b54:	d155      	bne.n	8003c02 <_malloc_r+0xf2>
 8003b56:	f8d8 4000 	ldr.w	r4, [r8]
 8003b5a:	4626      	mov	r6, r4
 8003b5c:	2e00      	cmp	r6, #0
 8003b5e:	d145      	bne.n	8003bec <_malloc_r+0xdc>
 8003b60:	2c00      	cmp	r4, #0
 8003b62:	d048      	beq.n	8003bf6 <_malloc_r+0xe6>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	4631      	mov	r1, r6
 8003b68:	4638      	mov	r0, r7
 8003b6a:	eb04 0903 	add.w	r9, r4, r3
 8003b6e:	f000 fc29 	bl	80043c4 <_sbrk_r>
 8003b72:	4581      	cmp	r9, r0
 8003b74:	d13f      	bne.n	8003bf6 <_malloc_r+0xe6>
 8003b76:	6821      	ldr	r1, [r4, #0]
 8003b78:	1a6d      	subs	r5, r5, r1
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	f7ff ffa7 	bl	8003ad0 <sbrk_aligned>
 8003b82:	3001      	adds	r0, #1
 8003b84:	d037      	beq.n	8003bf6 <_malloc_r+0xe6>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	442b      	add	r3, r5
 8003b8a:	6023      	str	r3, [r4, #0]
 8003b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d038      	beq.n	8003c06 <_malloc_r+0xf6>
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	42a2      	cmp	r2, r4
 8003b98:	d12b      	bne.n	8003bf2 <_malloc_r+0xe2>
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	e00f      	b.n	8003bc0 <_malloc_r+0xb0>
 8003ba0:	6822      	ldr	r2, [r4, #0]
 8003ba2:	1b52      	subs	r2, r2, r5
 8003ba4:	d41f      	bmi.n	8003be6 <_malloc_r+0xd6>
 8003ba6:	2a0b      	cmp	r2, #11
 8003ba8:	d917      	bls.n	8003bda <_malloc_r+0xca>
 8003baa:	1961      	adds	r1, r4, r5
 8003bac:	42a3      	cmp	r3, r4
 8003bae:	6025      	str	r5, [r4, #0]
 8003bb0:	bf18      	it	ne
 8003bb2:	6059      	strne	r1, [r3, #4]
 8003bb4:	6863      	ldr	r3, [r4, #4]
 8003bb6:	bf08      	it	eq
 8003bb8:	f8c8 1000 	streq.w	r1, [r8]
 8003bbc:	5162      	str	r2, [r4, r5]
 8003bbe:	604b      	str	r3, [r1, #4]
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	f104 060b 	add.w	r6, r4, #11
 8003bc6:	f000 fa67 	bl	8004098 <__malloc_unlock>
 8003bca:	f026 0607 	bic.w	r6, r6, #7
 8003bce:	1d23      	adds	r3, r4, #4
 8003bd0:	1af2      	subs	r2, r6, r3
 8003bd2:	d0ae      	beq.n	8003b32 <_malloc_r+0x22>
 8003bd4:	1b9b      	subs	r3, r3, r6
 8003bd6:	50a3      	str	r3, [r4, r2]
 8003bd8:	e7ab      	b.n	8003b32 <_malloc_r+0x22>
 8003bda:	42a3      	cmp	r3, r4
 8003bdc:	6862      	ldr	r2, [r4, #4]
 8003bde:	d1dd      	bne.n	8003b9c <_malloc_r+0x8c>
 8003be0:	f8c8 2000 	str.w	r2, [r8]
 8003be4:	e7ec      	b.n	8003bc0 <_malloc_r+0xb0>
 8003be6:	4623      	mov	r3, r4
 8003be8:	6864      	ldr	r4, [r4, #4]
 8003bea:	e7ac      	b.n	8003b46 <_malloc_r+0x36>
 8003bec:	4634      	mov	r4, r6
 8003bee:	6876      	ldr	r6, [r6, #4]
 8003bf0:	e7b4      	b.n	8003b5c <_malloc_r+0x4c>
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	e7cc      	b.n	8003b90 <_malloc_r+0x80>
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	f000 fa4c 	bl	8004098 <__malloc_unlock>
 8003c00:	e797      	b.n	8003b32 <_malloc_r+0x22>
 8003c02:	6025      	str	r5, [r4, #0]
 8003c04:	e7dc      	b.n	8003bc0 <_malloc_r+0xb0>
 8003c06:	605b      	str	r3, [r3, #4]
 8003c08:	deff      	udf	#255	; 0xff
 8003c0a:	bf00      	nop
 8003c0c:	20000a94 	.word	0x20000a94

08003c10 <_printf_common>:
 8003c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	4616      	mov	r6, r2
 8003c16:	4699      	mov	r9, r3
 8003c18:	688a      	ldr	r2, [r1, #8]
 8003c1a:	690b      	ldr	r3, [r1, #16]
 8003c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bfb8      	it	lt
 8003c24:	4613      	movlt	r3, r2
 8003c26:	6033      	str	r3, [r6, #0]
 8003c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c2c:	4607      	mov	r7, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	b10a      	cbz	r2, 8003c36 <_printf_common+0x26>
 8003c32:	3301      	adds	r3, #1
 8003c34:	6033      	str	r3, [r6, #0]
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	0699      	lsls	r1, r3, #26
 8003c3a:	bf42      	ittt	mi
 8003c3c:	6833      	ldrmi	r3, [r6, #0]
 8003c3e:	3302      	addmi	r3, #2
 8003c40:	6033      	strmi	r3, [r6, #0]
 8003c42:	6825      	ldr	r5, [r4, #0]
 8003c44:	f015 0506 	ands.w	r5, r5, #6
 8003c48:	d106      	bne.n	8003c58 <_printf_common+0x48>
 8003c4a:	f104 0a19 	add.w	sl, r4, #25
 8003c4e:	68e3      	ldr	r3, [r4, #12]
 8003c50:	6832      	ldr	r2, [r6, #0]
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	42ab      	cmp	r3, r5
 8003c56:	dc26      	bgt.n	8003ca6 <_printf_common+0x96>
 8003c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c5c:	1e13      	subs	r3, r2, #0
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	bf18      	it	ne
 8003c62:	2301      	movne	r3, #1
 8003c64:	0692      	lsls	r2, r2, #26
 8003c66:	d42b      	bmi.n	8003cc0 <_printf_common+0xb0>
 8003c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	4638      	mov	r0, r7
 8003c70:	47c0      	blx	r8
 8003c72:	3001      	adds	r0, #1
 8003c74:	d01e      	beq.n	8003cb4 <_printf_common+0xa4>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	f003 0306 	and.w	r3, r3, #6
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	bf02      	ittt	eq
 8003c82:	68e5      	ldreq	r5, [r4, #12]
 8003c84:	6833      	ldreq	r3, [r6, #0]
 8003c86:	1aed      	subeq	r5, r5, r3
 8003c88:	68a3      	ldr	r3, [r4, #8]
 8003c8a:	bf0c      	ite	eq
 8003c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c90:	2500      	movne	r5, #0
 8003c92:	4293      	cmp	r3, r2
 8003c94:	bfc4      	itt	gt
 8003c96:	1a9b      	subgt	r3, r3, r2
 8003c98:	18ed      	addgt	r5, r5, r3
 8003c9a:	2600      	movs	r6, #0
 8003c9c:	341a      	adds	r4, #26
 8003c9e:	42b5      	cmp	r5, r6
 8003ca0:	d11a      	bne.n	8003cd8 <_printf_common+0xc8>
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	e008      	b.n	8003cb8 <_printf_common+0xa8>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4652      	mov	r2, sl
 8003caa:	4649      	mov	r1, r9
 8003cac:	4638      	mov	r0, r7
 8003cae:	47c0      	blx	r8
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d103      	bne.n	8003cbc <_printf_common+0xac>
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cbc:	3501      	adds	r5, #1
 8003cbe:	e7c6      	b.n	8003c4e <_printf_common+0x3e>
 8003cc0:	18e1      	adds	r1, r4, r3
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	2030      	movs	r0, #48	; 0x30
 8003cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cca:	4422      	add	r2, r4
 8003ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	e7c7      	b.n	8003c68 <_printf_common+0x58>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	4622      	mov	r2, r4
 8003cdc:	4649      	mov	r1, r9
 8003cde:	4638      	mov	r0, r7
 8003ce0:	47c0      	blx	r8
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	d0e6      	beq.n	8003cb4 <_printf_common+0xa4>
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7d9      	b.n	8003c9e <_printf_common+0x8e>
	...

08003cec <_printf_i>:
 8003cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf0:	7e0f      	ldrb	r7, [r1, #24]
 8003cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cf4:	2f78      	cmp	r7, #120	; 0x78
 8003cf6:	4691      	mov	r9, r2
 8003cf8:	4680      	mov	r8, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	469a      	mov	sl, r3
 8003cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d02:	d807      	bhi.n	8003d14 <_printf_i+0x28>
 8003d04:	2f62      	cmp	r7, #98	; 0x62
 8003d06:	d80a      	bhi.n	8003d1e <_printf_i+0x32>
 8003d08:	2f00      	cmp	r7, #0
 8003d0a:	f000 80d4 	beq.w	8003eb6 <_printf_i+0x1ca>
 8003d0e:	2f58      	cmp	r7, #88	; 0x58
 8003d10:	f000 80c0 	beq.w	8003e94 <_printf_i+0x1a8>
 8003d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d1c:	e03a      	b.n	8003d94 <_printf_i+0xa8>
 8003d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d22:	2b15      	cmp	r3, #21
 8003d24:	d8f6      	bhi.n	8003d14 <_printf_i+0x28>
 8003d26:	a101      	add	r1, pc, #4	; (adr r1, 8003d2c <_printf_i+0x40>)
 8003d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d2c:	08003d85 	.word	0x08003d85
 8003d30:	08003d99 	.word	0x08003d99
 8003d34:	08003d15 	.word	0x08003d15
 8003d38:	08003d15 	.word	0x08003d15
 8003d3c:	08003d15 	.word	0x08003d15
 8003d40:	08003d15 	.word	0x08003d15
 8003d44:	08003d99 	.word	0x08003d99
 8003d48:	08003d15 	.word	0x08003d15
 8003d4c:	08003d15 	.word	0x08003d15
 8003d50:	08003d15 	.word	0x08003d15
 8003d54:	08003d15 	.word	0x08003d15
 8003d58:	08003e9d 	.word	0x08003e9d
 8003d5c:	08003dc5 	.word	0x08003dc5
 8003d60:	08003e57 	.word	0x08003e57
 8003d64:	08003d15 	.word	0x08003d15
 8003d68:	08003d15 	.word	0x08003d15
 8003d6c:	08003ebf 	.word	0x08003ebf
 8003d70:	08003d15 	.word	0x08003d15
 8003d74:	08003dc5 	.word	0x08003dc5
 8003d78:	08003d15 	.word	0x08003d15
 8003d7c:	08003d15 	.word	0x08003d15
 8003d80:	08003e5f 	.word	0x08003e5f
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	1d1a      	adds	r2, r3, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	602a      	str	r2, [r5, #0]
 8003d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d94:	2301      	movs	r3, #1
 8003d96:	e09f      	b.n	8003ed8 <_printf_i+0x1ec>
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	682b      	ldr	r3, [r5, #0]
 8003d9c:	0607      	lsls	r7, r0, #24
 8003d9e:	f103 0104 	add.w	r1, r3, #4
 8003da2:	6029      	str	r1, [r5, #0]
 8003da4:	d501      	bpl.n	8003daa <_printf_i+0xbe>
 8003da6:	681e      	ldr	r6, [r3, #0]
 8003da8:	e003      	b.n	8003db2 <_printf_i+0xc6>
 8003daa:	0646      	lsls	r6, r0, #25
 8003dac:	d5fb      	bpl.n	8003da6 <_printf_i+0xba>
 8003dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003db2:	2e00      	cmp	r6, #0
 8003db4:	da03      	bge.n	8003dbe <_printf_i+0xd2>
 8003db6:	232d      	movs	r3, #45	; 0x2d
 8003db8:	4276      	negs	r6, r6
 8003dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dbe:	485a      	ldr	r0, [pc, #360]	; (8003f28 <_printf_i+0x23c>)
 8003dc0:	230a      	movs	r3, #10
 8003dc2:	e012      	b.n	8003dea <_printf_i+0xfe>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	1d19      	adds	r1, r3, #4
 8003dca:	6029      	str	r1, [r5, #0]
 8003dcc:	0605      	lsls	r5, r0, #24
 8003dce:	d501      	bpl.n	8003dd4 <_printf_i+0xe8>
 8003dd0:	681e      	ldr	r6, [r3, #0]
 8003dd2:	e002      	b.n	8003dda <_printf_i+0xee>
 8003dd4:	0641      	lsls	r1, r0, #25
 8003dd6:	d5fb      	bpl.n	8003dd0 <_printf_i+0xe4>
 8003dd8:	881e      	ldrh	r6, [r3, #0]
 8003dda:	4853      	ldr	r0, [pc, #332]	; (8003f28 <_printf_i+0x23c>)
 8003ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8003dde:	bf0c      	ite	eq
 8003de0:	2308      	moveq	r3, #8
 8003de2:	230a      	movne	r3, #10
 8003de4:	2100      	movs	r1, #0
 8003de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dea:	6865      	ldr	r5, [r4, #4]
 8003dec:	60a5      	str	r5, [r4, #8]
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	bfa2      	ittt	ge
 8003df2:	6821      	ldrge	r1, [r4, #0]
 8003df4:	f021 0104 	bicge.w	r1, r1, #4
 8003df8:	6021      	strge	r1, [r4, #0]
 8003dfa:	b90e      	cbnz	r6, 8003e00 <_printf_i+0x114>
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	d04b      	beq.n	8003e98 <_printf_i+0x1ac>
 8003e00:	4615      	mov	r5, r2
 8003e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e06:	fb03 6711 	mls	r7, r3, r1, r6
 8003e0a:	5dc7      	ldrb	r7, [r0, r7]
 8003e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e10:	4637      	mov	r7, r6
 8003e12:	42bb      	cmp	r3, r7
 8003e14:	460e      	mov	r6, r1
 8003e16:	d9f4      	bls.n	8003e02 <_printf_i+0x116>
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d10b      	bne.n	8003e34 <_printf_i+0x148>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	07de      	lsls	r6, r3, #31
 8003e20:	d508      	bpl.n	8003e34 <_printf_i+0x148>
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	6861      	ldr	r1, [r4, #4]
 8003e26:	4299      	cmp	r1, r3
 8003e28:	bfde      	ittt	le
 8003e2a:	2330      	movle	r3, #48	; 0x30
 8003e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e34:	1b52      	subs	r2, r2, r5
 8003e36:	6122      	str	r2, [r4, #16]
 8003e38:	f8cd a000 	str.w	sl, [sp]
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	aa03      	add	r2, sp, #12
 8003e40:	4621      	mov	r1, r4
 8003e42:	4640      	mov	r0, r8
 8003e44:	f7ff fee4 	bl	8003c10 <_printf_common>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d14a      	bne.n	8003ee2 <_printf_i+0x1f6>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e50:	b004      	add	sp, #16
 8003e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f043 0320 	orr.w	r3, r3, #32
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	4833      	ldr	r0, [pc, #204]	; (8003f2c <_printf_i+0x240>)
 8003e60:	2778      	movs	r7, #120	; 0x78
 8003e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	6829      	ldr	r1, [r5, #0]
 8003e6a:	061f      	lsls	r7, r3, #24
 8003e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e70:	d402      	bmi.n	8003e78 <_printf_i+0x18c>
 8003e72:	065f      	lsls	r7, r3, #25
 8003e74:	bf48      	it	mi
 8003e76:	b2b6      	uxthmi	r6, r6
 8003e78:	07df      	lsls	r7, r3, #31
 8003e7a:	bf48      	it	mi
 8003e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e80:	6029      	str	r1, [r5, #0]
 8003e82:	bf48      	it	mi
 8003e84:	6023      	strmi	r3, [r4, #0]
 8003e86:	b91e      	cbnz	r6, 8003e90 <_printf_i+0x1a4>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	f023 0320 	bic.w	r3, r3, #32
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	2310      	movs	r3, #16
 8003e92:	e7a7      	b.n	8003de4 <_printf_i+0xf8>
 8003e94:	4824      	ldr	r0, [pc, #144]	; (8003f28 <_printf_i+0x23c>)
 8003e96:	e7e4      	b.n	8003e62 <_printf_i+0x176>
 8003e98:	4615      	mov	r5, r2
 8003e9a:	e7bd      	b.n	8003e18 <_printf_i+0x12c>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	6826      	ldr	r6, [r4, #0]
 8003ea0:	6961      	ldr	r1, [r4, #20]
 8003ea2:	1d18      	adds	r0, r3, #4
 8003ea4:	6028      	str	r0, [r5, #0]
 8003ea6:	0635      	lsls	r5, r6, #24
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0x1c4>
 8003eac:	6019      	str	r1, [r3, #0]
 8003eae:	e002      	b.n	8003eb6 <_printf_i+0x1ca>
 8003eb0:	0670      	lsls	r0, r6, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0x1c0>
 8003eb4:	8019      	strh	r1, [r3, #0]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6123      	str	r3, [r4, #16]
 8003eba:	4615      	mov	r5, r2
 8003ebc:	e7bc      	b.n	8003e38 <_printf_i+0x14c>
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	1d1a      	adds	r2, r3, #4
 8003ec2:	602a      	str	r2, [r5, #0]
 8003ec4:	681d      	ldr	r5, [r3, #0]
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f7fc f9a0 	bl	8000210 <memchr>
 8003ed0:	b108      	cbz	r0, 8003ed6 <_printf_i+0x1ea>
 8003ed2:	1b40      	subs	r0, r0, r5
 8003ed4:	6060      	str	r0, [r4, #4]
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	2300      	movs	r3, #0
 8003edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee0:	e7aa      	b.n	8003e38 <_printf_i+0x14c>
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	462a      	mov	r2, r5
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	4640      	mov	r0, r8
 8003eea:	47d0      	blx	sl
 8003eec:	3001      	adds	r0, #1
 8003eee:	d0ad      	beq.n	8003e4c <_printf_i+0x160>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	079b      	lsls	r3, r3, #30
 8003ef4:	d413      	bmi.n	8003f1e <_printf_i+0x232>
 8003ef6:	68e0      	ldr	r0, [r4, #12]
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	4298      	cmp	r0, r3
 8003efc:	bfb8      	it	lt
 8003efe:	4618      	movlt	r0, r3
 8003f00:	e7a6      	b.n	8003e50 <_printf_i+0x164>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4632      	mov	r2, r6
 8003f06:	4649      	mov	r1, r9
 8003f08:	4640      	mov	r0, r8
 8003f0a:	47d0      	blx	sl
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d09d      	beq.n	8003e4c <_printf_i+0x160>
 8003f10:	3501      	adds	r5, #1
 8003f12:	68e3      	ldr	r3, [r4, #12]
 8003f14:	9903      	ldr	r1, [sp, #12]
 8003f16:	1a5b      	subs	r3, r3, r1
 8003f18:	42ab      	cmp	r3, r5
 8003f1a:	dcf2      	bgt.n	8003f02 <_printf_i+0x216>
 8003f1c:	e7eb      	b.n	8003ef6 <_printf_i+0x20a>
 8003f1e:	2500      	movs	r5, #0
 8003f20:	f104 0619 	add.w	r6, r4, #25
 8003f24:	e7f5      	b.n	8003f12 <_printf_i+0x226>
 8003f26:	bf00      	nop
 8003f28:	08004855 	.word	0x08004855
 8003f2c:	08004866 	.word	0x08004866

08003f30 <__sflush_r>:
 8003f30:	898a      	ldrh	r2, [r1, #12]
 8003f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f36:	4605      	mov	r5, r0
 8003f38:	0710      	lsls	r0, r2, #28
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	d458      	bmi.n	8003ff0 <__sflush_r+0xc0>
 8003f3e:	684b      	ldr	r3, [r1, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	dc05      	bgt.n	8003f50 <__sflush_r+0x20>
 8003f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	dc02      	bgt.n	8003f50 <__sflush_r+0x20>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f52:	2e00      	cmp	r6, #0
 8003f54:	d0f9      	beq.n	8003f4a <__sflush_r+0x1a>
 8003f56:	2300      	movs	r3, #0
 8003f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f5c:	682f      	ldr	r7, [r5, #0]
 8003f5e:	6a21      	ldr	r1, [r4, #32]
 8003f60:	602b      	str	r3, [r5, #0]
 8003f62:	d032      	beq.n	8003fca <__sflush_r+0x9a>
 8003f64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	075a      	lsls	r2, r3, #29
 8003f6a:	d505      	bpl.n	8003f78 <__sflush_r+0x48>
 8003f6c:	6863      	ldr	r3, [r4, #4]
 8003f6e:	1ac0      	subs	r0, r0, r3
 8003f70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f72:	b10b      	cbz	r3, 8003f78 <__sflush_r+0x48>
 8003f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f76:	1ac0      	subs	r0, r0, r3
 8003f78:	2300      	movs	r3, #0
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f7e:	6a21      	ldr	r1, [r4, #32]
 8003f80:	4628      	mov	r0, r5
 8003f82:	47b0      	blx	r6
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	d106      	bne.n	8003f98 <__sflush_r+0x68>
 8003f8a:	6829      	ldr	r1, [r5, #0]
 8003f8c:	291d      	cmp	r1, #29
 8003f8e:	d82b      	bhi.n	8003fe8 <__sflush_r+0xb8>
 8003f90:	4a29      	ldr	r2, [pc, #164]	; (8004038 <__sflush_r+0x108>)
 8003f92:	410a      	asrs	r2, r1
 8003f94:	07d6      	lsls	r6, r2, #31
 8003f96:	d427      	bmi.n	8003fe8 <__sflush_r+0xb8>
 8003f98:	2200      	movs	r2, #0
 8003f9a:	6062      	str	r2, [r4, #4]
 8003f9c:	04d9      	lsls	r1, r3, #19
 8003f9e:	6922      	ldr	r2, [r4, #16]
 8003fa0:	6022      	str	r2, [r4, #0]
 8003fa2:	d504      	bpl.n	8003fae <__sflush_r+0x7e>
 8003fa4:	1c42      	adds	r2, r0, #1
 8003fa6:	d101      	bne.n	8003fac <__sflush_r+0x7c>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	b903      	cbnz	r3, 8003fae <__sflush_r+0x7e>
 8003fac:	6560      	str	r0, [r4, #84]	; 0x54
 8003fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fb0:	602f      	str	r7, [r5, #0]
 8003fb2:	2900      	cmp	r1, #0
 8003fb4:	d0c9      	beq.n	8003f4a <__sflush_r+0x1a>
 8003fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fba:	4299      	cmp	r1, r3
 8003fbc:	d002      	beq.n	8003fc4 <__sflush_r+0x94>
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 fa22 	bl	8004408 <_free_r>
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	6360      	str	r0, [r4, #52]	; 0x34
 8003fc8:	e7c0      	b.n	8003f4c <__sflush_r+0x1c>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4628      	mov	r0, r5
 8003fce:	47b0      	blx	r6
 8003fd0:	1c41      	adds	r1, r0, #1
 8003fd2:	d1c8      	bne.n	8003f66 <__sflush_r+0x36>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0c5      	beq.n	8003f66 <__sflush_r+0x36>
 8003fda:	2b1d      	cmp	r3, #29
 8003fdc:	d001      	beq.n	8003fe2 <__sflush_r+0xb2>
 8003fde:	2b16      	cmp	r3, #22
 8003fe0:	d101      	bne.n	8003fe6 <__sflush_r+0xb6>
 8003fe2:	602f      	str	r7, [r5, #0]
 8003fe4:	e7b1      	b.n	8003f4a <__sflush_r+0x1a>
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	e7ad      	b.n	8003f4c <__sflush_r+0x1c>
 8003ff0:	690f      	ldr	r7, [r1, #16]
 8003ff2:	2f00      	cmp	r7, #0
 8003ff4:	d0a9      	beq.n	8003f4a <__sflush_r+0x1a>
 8003ff6:	0793      	lsls	r3, r2, #30
 8003ff8:	680e      	ldr	r6, [r1, #0]
 8003ffa:	bf08      	it	eq
 8003ffc:	694b      	ldreq	r3, [r1, #20]
 8003ffe:	600f      	str	r7, [r1, #0]
 8004000:	bf18      	it	ne
 8004002:	2300      	movne	r3, #0
 8004004:	eba6 0807 	sub.w	r8, r6, r7
 8004008:	608b      	str	r3, [r1, #8]
 800400a:	f1b8 0f00 	cmp.w	r8, #0
 800400e:	dd9c      	ble.n	8003f4a <__sflush_r+0x1a>
 8004010:	6a21      	ldr	r1, [r4, #32]
 8004012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004014:	4643      	mov	r3, r8
 8004016:	463a      	mov	r2, r7
 8004018:	4628      	mov	r0, r5
 800401a:	47b0      	blx	r6
 800401c:	2800      	cmp	r0, #0
 800401e:	dc06      	bgt.n	800402e <__sflush_r+0xfe>
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004026:	81a3      	strh	r3, [r4, #12]
 8004028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402c:	e78e      	b.n	8003f4c <__sflush_r+0x1c>
 800402e:	4407      	add	r7, r0
 8004030:	eba8 0800 	sub.w	r8, r8, r0
 8004034:	e7e9      	b.n	800400a <__sflush_r+0xda>
 8004036:	bf00      	nop
 8004038:	dfbffffe 	.word	0xdfbffffe

0800403c <_fflush_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	690b      	ldr	r3, [r1, #16]
 8004040:	4605      	mov	r5, r0
 8004042:	460c      	mov	r4, r1
 8004044:	b913      	cbnz	r3, 800404c <_fflush_r+0x10>
 8004046:	2500      	movs	r5, #0
 8004048:	4628      	mov	r0, r5
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	b118      	cbz	r0, 8004056 <_fflush_r+0x1a>
 800404e:	6a03      	ldr	r3, [r0, #32]
 8004050:	b90b      	cbnz	r3, 8004056 <_fflush_r+0x1a>
 8004052:	f7ff fb21 	bl	8003698 <__sinit>
 8004056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f3      	beq.n	8004046 <_fflush_r+0xa>
 800405e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004060:	07d0      	lsls	r0, r2, #31
 8004062:	d404      	bmi.n	800406e <_fflush_r+0x32>
 8004064:	0599      	lsls	r1, r3, #22
 8004066:	d402      	bmi.n	800406e <_fflush_r+0x32>
 8004068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800406a:	f7ff fbec 	bl	8003846 <__retarget_lock_acquire_recursive>
 800406e:	4628      	mov	r0, r5
 8004070:	4621      	mov	r1, r4
 8004072:	f7ff ff5d 	bl	8003f30 <__sflush_r>
 8004076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004078:	07da      	lsls	r2, r3, #31
 800407a:	4605      	mov	r5, r0
 800407c:	d4e4      	bmi.n	8004048 <_fflush_r+0xc>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	059b      	lsls	r3, r3, #22
 8004082:	d4e1      	bmi.n	8004048 <_fflush_r+0xc>
 8004084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004086:	f7ff fbdf 	bl	8003848 <__retarget_lock_release_recursive>
 800408a:	e7dd      	b.n	8004048 <_fflush_r+0xc>

0800408c <__malloc_lock>:
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <__malloc_lock+0x8>)
 800408e:	f7ff bbda 	b.w	8003846 <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	20000a90 	.word	0x20000a90

08004098 <__malloc_unlock>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__malloc_unlock+0x8>)
 800409a:	f7ff bbd5 	b.w	8003848 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	20000a90 	.word	0x20000a90

080040a4 <__sread>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	460c      	mov	r4, r1
 80040a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ac:	f000 f978 	bl	80043a0 <_read_r>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	bfab      	itete	ge
 80040b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040b6:	89a3      	ldrhlt	r3, [r4, #12]
 80040b8:	181b      	addge	r3, r3, r0
 80040ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040be:	bfac      	ite	ge
 80040c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80040c2:	81a3      	strhlt	r3, [r4, #12]
 80040c4:	bd10      	pop	{r4, pc}

080040c6 <__swrite>:
 80040c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ca:	461f      	mov	r7, r3
 80040cc:	898b      	ldrh	r3, [r1, #12]
 80040ce:	05db      	lsls	r3, r3, #23
 80040d0:	4605      	mov	r5, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	4616      	mov	r6, r2
 80040d6:	d505      	bpl.n	80040e4 <__swrite+0x1e>
 80040d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040dc:	2302      	movs	r3, #2
 80040de:	2200      	movs	r2, #0
 80040e0:	f000 f94c 	bl	800437c <_lseek_r>
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040ee:	81a3      	strh	r3, [r4, #12]
 80040f0:	4632      	mov	r2, r6
 80040f2:	463b      	mov	r3, r7
 80040f4:	4628      	mov	r0, r5
 80040f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040fa:	f000 b973 	b.w	80043e4 <_write_r>

080040fe <__sseek>:
 80040fe:	b510      	push	{r4, lr}
 8004100:	460c      	mov	r4, r1
 8004102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004106:	f000 f939 	bl	800437c <_lseek_r>
 800410a:	1c43      	adds	r3, r0, #1
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	bf15      	itete	ne
 8004110:	6560      	strne	r0, [r4, #84]	; 0x54
 8004112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800411a:	81a3      	strheq	r3, [r4, #12]
 800411c:	bf18      	it	ne
 800411e:	81a3      	strhne	r3, [r4, #12]
 8004120:	bd10      	pop	{r4, pc}

08004122 <__sclose>:
 8004122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004126:	f000 b8f7 	b.w	8004318 <_close_r>

0800412a <__swbuf_r>:
 800412a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412c:	460e      	mov	r6, r1
 800412e:	4614      	mov	r4, r2
 8004130:	4605      	mov	r5, r0
 8004132:	b118      	cbz	r0, 800413c <__swbuf_r+0x12>
 8004134:	6a03      	ldr	r3, [r0, #32]
 8004136:	b90b      	cbnz	r3, 800413c <__swbuf_r+0x12>
 8004138:	f7ff faae 	bl	8003698 <__sinit>
 800413c:	69a3      	ldr	r3, [r4, #24]
 800413e:	60a3      	str	r3, [r4, #8]
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	071a      	lsls	r2, r3, #28
 8004144:	d525      	bpl.n	8004192 <__swbuf_r+0x68>
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	b31b      	cbz	r3, 8004192 <__swbuf_r+0x68>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	6922      	ldr	r2, [r4, #16]
 800414e:	1a98      	subs	r0, r3, r2
 8004150:	6963      	ldr	r3, [r4, #20]
 8004152:	b2f6      	uxtb	r6, r6
 8004154:	4283      	cmp	r3, r0
 8004156:	4637      	mov	r7, r6
 8004158:	dc04      	bgt.n	8004164 <__swbuf_r+0x3a>
 800415a:	4621      	mov	r1, r4
 800415c:	4628      	mov	r0, r5
 800415e:	f7ff ff6d 	bl	800403c <_fflush_r>
 8004162:	b9e0      	cbnz	r0, 800419e <__swbuf_r+0x74>
 8004164:	68a3      	ldr	r3, [r4, #8]
 8004166:	3b01      	subs	r3, #1
 8004168:	60a3      	str	r3, [r4, #8]
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	6022      	str	r2, [r4, #0]
 8004170:	701e      	strb	r6, [r3, #0]
 8004172:	6962      	ldr	r2, [r4, #20]
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	429a      	cmp	r2, r3
 8004178:	d004      	beq.n	8004184 <__swbuf_r+0x5a>
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	07db      	lsls	r3, r3, #31
 800417e:	d506      	bpl.n	800418e <__swbuf_r+0x64>
 8004180:	2e0a      	cmp	r6, #10
 8004182:	d104      	bne.n	800418e <__swbuf_r+0x64>
 8004184:	4621      	mov	r1, r4
 8004186:	4628      	mov	r0, r5
 8004188:	f7ff ff58 	bl	800403c <_fflush_r>
 800418c:	b938      	cbnz	r0, 800419e <__swbuf_r+0x74>
 800418e:	4638      	mov	r0, r7
 8004190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004192:	4621      	mov	r1, r4
 8004194:	4628      	mov	r0, r5
 8004196:	f000 f805 	bl	80041a4 <__swsetup_r>
 800419a:	2800      	cmp	r0, #0
 800419c:	d0d5      	beq.n	800414a <__swbuf_r+0x20>
 800419e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80041a2:	e7f4      	b.n	800418e <__swbuf_r+0x64>

080041a4 <__swsetup_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <__swsetup_r+0xac>)
 80041a8:	4605      	mov	r5, r0
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	460c      	mov	r4, r1
 80041ae:	b118      	cbz	r0, 80041b8 <__swsetup_r+0x14>
 80041b0:	6a03      	ldr	r3, [r0, #32]
 80041b2:	b90b      	cbnz	r3, 80041b8 <__swsetup_r+0x14>
 80041b4:	f7ff fa70 	bl	8003698 <__sinit>
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041be:	0718      	lsls	r0, r3, #28
 80041c0:	d422      	bmi.n	8004208 <__swsetup_r+0x64>
 80041c2:	06d9      	lsls	r1, r3, #27
 80041c4:	d407      	bmi.n	80041d6 <__swsetup_r+0x32>
 80041c6:	2309      	movs	r3, #9
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d4:	e034      	b.n	8004240 <__swsetup_r+0x9c>
 80041d6:	0758      	lsls	r0, r3, #29
 80041d8:	d512      	bpl.n	8004200 <__swsetup_r+0x5c>
 80041da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041dc:	b141      	cbz	r1, 80041f0 <__swsetup_r+0x4c>
 80041de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041e2:	4299      	cmp	r1, r3
 80041e4:	d002      	beq.n	80041ec <__swsetup_r+0x48>
 80041e6:	4628      	mov	r0, r5
 80041e8:	f000 f90e 	bl	8004408 <_free_r>
 80041ec:	2300      	movs	r3, #0
 80041ee:	6363      	str	r3, [r4, #52]	; 0x34
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	2300      	movs	r3, #0
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	6923      	ldr	r3, [r4, #16]
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	f043 0308 	orr.w	r3, r3, #8
 8004206:	81a3      	strh	r3, [r4, #12]
 8004208:	6923      	ldr	r3, [r4, #16]
 800420a:	b94b      	cbnz	r3, 8004220 <__swsetup_r+0x7c>
 800420c:	89a3      	ldrh	r3, [r4, #12]
 800420e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004216:	d003      	beq.n	8004220 <__swsetup_r+0x7c>
 8004218:	4621      	mov	r1, r4
 800421a:	4628      	mov	r0, r5
 800421c:	f000 f840 	bl	80042a0 <__smakebuf_r>
 8004220:	89a0      	ldrh	r0, [r4, #12]
 8004222:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004226:	f010 0301 	ands.w	r3, r0, #1
 800422a:	d00a      	beq.n	8004242 <__swsetup_r+0x9e>
 800422c:	2300      	movs	r3, #0
 800422e:	60a3      	str	r3, [r4, #8]
 8004230:	6963      	ldr	r3, [r4, #20]
 8004232:	425b      	negs	r3, r3
 8004234:	61a3      	str	r3, [r4, #24]
 8004236:	6923      	ldr	r3, [r4, #16]
 8004238:	b943      	cbnz	r3, 800424c <__swsetup_r+0xa8>
 800423a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800423e:	d1c4      	bne.n	80041ca <__swsetup_r+0x26>
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	0781      	lsls	r1, r0, #30
 8004244:	bf58      	it	pl
 8004246:	6963      	ldrpl	r3, [r4, #20]
 8004248:	60a3      	str	r3, [r4, #8]
 800424a:	e7f4      	b.n	8004236 <__swsetup_r+0x92>
 800424c:	2000      	movs	r0, #0
 800424e:	e7f7      	b.n	8004240 <__swsetup_r+0x9c>
 8004250:	20000064 	.word	0x20000064

08004254 <__swhatbuf_r>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	460c      	mov	r4, r1
 8004258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800425c:	2900      	cmp	r1, #0
 800425e:	b096      	sub	sp, #88	; 0x58
 8004260:	4615      	mov	r5, r2
 8004262:	461e      	mov	r6, r3
 8004264:	da0d      	bge.n	8004282 <__swhatbuf_r+0x2e>
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	f013 0f80 	tst.w	r3, #128	; 0x80
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	bf0c      	ite	eq
 8004272:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004276:	2340      	movne	r3, #64	; 0x40
 8004278:	2000      	movs	r0, #0
 800427a:	6031      	str	r1, [r6, #0]
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	b016      	add	sp, #88	; 0x58
 8004280:	bd70      	pop	{r4, r5, r6, pc}
 8004282:	466a      	mov	r2, sp
 8004284:	f000 f858 	bl	8004338 <_fstat_r>
 8004288:	2800      	cmp	r0, #0
 800428a:	dbec      	blt.n	8004266 <__swhatbuf_r+0x12>
 800428c:	9901      	ldr	r1, [sp, #4]
 800428e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004292:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004296:	4259      	negs	r1, r3
 8004298:	4159      	adcs	r1, r3
 800429a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429e:	e7eb      	b.n	8004278 <__swhatbuf_r+0x24>

080042a0 <__smakebuf_r>:
 80042a0:	898b      	ldrh	r3, [r1, #12]
 80042a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042a4:	079d      	lsls	r5, r3, #30
 80042a6:	4606      	mov	r6, r0
 80042a8:	460c      	mov	r4, r1
 80042aa:	d507      	bpl.n	80042bc <__smakebuf_r+0x1c>
 80042ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	2301      	movs	r3, #1
 80042b6:	6163      	str	r3, [r4, #20]
 80042b8:	b002      	add	sp, #8
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	ab01      	add	r3, sp, #4
 80042be:	466a      	mov	r2, sp
 80042c0:	f7ff ffc8 	bl	8004254 <__swhatbuf_r>
 80042c4:	9900      	ldr	r1, [sp, #0]
 80042c6:	4605      	mov	r5, r0
 80042c8:	4630      	mov	r0, r6
 80042ca:	f7ff fc21 	bl	8003b10 <_malloc_r>
 80042ce:	b948      	cbnz	r0, 80042e4 <__smakebuf_r+0x44>
 80042d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042d4:	059a      	lsls	r2, r3, #22
 80042d6:	d4ef      	bmi.n	80042b8 <__smakebuf_r+0x18>
 80042d8:	f023 0303 	bic.w	r3, r3, #3
 80042dc:	f043 0302 	orr.w	r3, r3, #2
 80042e0:	81a3      	strh	r3, [r4, #12]
 80042e2:	e7e3      	b.n	80042ac <__smakebuf_r+0xc>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	6020      	str	r0, [r4, #0]
 80042e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ec:	81a3      	strh	r3, [r4, #12]
 80042ee:	9b00      	ldr	r3, [sp, #0]
 80042f0:	6163      	str	r3, [r4, #20]
 80042f2:	9b01      	ldr	r3, [sp, #4]
 80042f4:	6120      	str	r0, [r4, #16]
 80042f6:	b15b      	cbz	r3, 8004310 <__smakebuf_r+0x70>
 80042f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 f82d 	bl	800435c <_isatty_r>
 8004302:	b128      	cbz	r0, 8004310 <__smakebuf_r+0x70>
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	81a3      	strh	r3, [r4, #12]
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	431d      	orrs	r5, r3
 8004314:	81a5      	strh	r5, [r4, #12]
 8004316:	e7cf      	b.n	80042b8 <__smakebuf_r+0x18>

08004318 <_close_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4d06      	ldr	r5, [pc, #24]	; (8004334 <_close_r+0x1c>)
 800431c:	2300      	movs	r3, #0
 800431e:	4604      	mov	r4, r0
 8004320:	4608      	mov	r0, r1
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	f7fc fe89 	bl	800103a <_close>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d102      	bne.n	8004332 <_close_r+0x1a>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	b103      	cbz	r3, 8004332 <_close_r+0x1a>
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	20000a9c 	.word	0x20000a9c

08004338 <_fstat_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4d07      	ldr	r5, [pc, #28]	; (8004358 <_fstat_r+0x20>)
 800433c:	2300      	movs	r3, #0
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	602b      	str	r3, [r5, #0]
 8004346:	f7fc fe84 	bl	8001052 <_fstat>
 800434a:	1c43      	adds	r3, r0, #1
 800434c:	d102      	bne.n	8004354 <_fstat_r+0x1c>
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	b103      	cbz	r3, 8004354 <_fstat_r+0x1c>
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	bd38      	pop	{r3, r4, r5, pc}
 8004356:	bf00      	nop
 8004358:	20000a9c 	.word	0x20000a9c

0800435c <_isatty_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4d06      	ldr	r5, [pc, #24]	; (8004378 <_isatty_r+0x1c>)
 8004360:	2300      	movs	r3, #0
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7fc fe83 	bl	8001072 <_isatty>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_isatty_r+0x1a>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_isatty_r+0x1a>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	20000a9c 	.word	0x20000a9c

0800437c <_lseek_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4d07      	ldr	r5, [pc, #28]	; (800439c <_lseek_r+0x20>)
 8004380:	4604      	mov	r4, r0
 8004382:	4608      	mov	r0, r1
 8004384:	4611      	mov	r1, r2
 8004386:	2200      	movs	r2, #0
 8004388:	602a      	str	r2, [r5, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	f7fc fe7c 	bl	8001088 <_lseek>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_lseek_r+0x1e>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	b103      	cbz	r3, 800439a <_lseek_r+0x1e>
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	20000a9c 	.word	0x20000a9c

080043a0 <_read_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4d07      	ldr	r5, [pc, #28]	; (80043c0 <_read_r+0x20>)
 80043a4:	4604      	mov	r4, r0
 80043a6:	4608      	mov	r0, r1
 80043a8:	4611      	mov	r1, r2
 80043aa:	2200      	movs	r2, #0
 80043ac:	602a      	str	r2, [r5, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f7fc fe0a 	bl	8000fc8 <_read>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_read_r+0x1e>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_read_r+0x1e>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	20000a9c 	.word	0x20000a9c

080043c4 <_sbrk_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4d06      	ldr	r5, [pc, #24]	; (80043e0 <_sbrk_r+0x1c>)
 80043c8:	2300      	movs	r3, #0
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	f7fc fe68 	bl	80010a4 <_sbrk>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_sbrk_r+0x1a>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_sbrk_r+0x1a>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	20000a9c 	.word	0x20000a9c

080043e4 <_write_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4d07      	ldr	r5, [pc, #28]	; (8004404 <_write_r+0x20>)
 80043e8:	4604      	mov	r4, r0
 80043ea:	4608      	mov	r0, r1
 80043ec:	4611      	mov	r1, r2
 80043ee:	2200      	movs	r2, #0
 80043f0:	602a      	str	r2, [r5, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7fc fe05 	bl	8001002 <_write>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_write_r+0x1e>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_write_r+0x1e>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	20000a9c 	.word	0x20000a9c

08004408 <_free_r>:
 8004408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800440a:	2900      	cmp	r1, #0
 800440c:	d044      	beq.n	8004498 <_free_r+0x90>
 800440e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004412:	9001      	str	r0, [sp, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f1a1 0404 	sub.w	r4, r1, #4
 800441a:	bfb8      	it	lt
 800441c:	18e4      	addlt	r4, r4, r3
 800441e:	f7ff fe35 	bl	800408c <__malloc_lock>
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <_free_r+0x94>)
 8004424:	9801      	ldr	r0, [sp, #4]
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	b933      	cbnz	r3, 8004438 <_free_r+0x30>
 800442a:	6063      	str	r3, [r4, #4]
 800442c:	6014      	str	r4, [r2, #0]
 800442e:	b003      	add	sp, #12
 8004430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004434:	f7ff be30 	b.w	8004098 <__malloc_unlock>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d908      	bls.n	800444e <_free_r+0x46>
 800443c:	6825      	ldr	r5, [r4, #0]
 800443e:	1961      	adds	r1, r4, r5
 8004440:	428b      	cmp	r3, r1
 8004442:	bf01      	itttt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	1949      	addeq	r1, r1, r5
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	e7ed      	b.n	800442a <_free_r+0x22>
 800444e:	461a      	mov	r2, r3
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b10b      	cbz	r3, 8004458 <_free_r+0x50>
 8004454:	42a3      	cmp	r3, r4
 8004456:	d9fa      	bls.n	800444e <_free_r+0x46>
 8004458:	6811      	ldr	r1, [r2, #0]
 800445a:	1855      	adds	r5, r2, r1
 800445c:	42a5      	cmp	r5, r4
 800445e:	d10b      	bne.n	8004478 <_free_r+0x70>
 8004460:	6824      	ldr	r4, [r4, #0]
 8004462:	4421      	add	r1, r4
 8004464:	1854      	adds	r4, r2, r1
 8004466:	42a3      	cmp	r3, r4
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	d1e0      	bne.n	800442e <_free_r+0x26>
 800446c:	681c      	ldr	r4, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	6053      	str	r3, [r2, #4]
 8004472:	440c      	add	r4, r1
 8004474:	6014      	str	r4, [r2, #0]
 8004476:	e7da      	b.n	800442e <_free_r+0x26>
 8004478:	d902      	bls.n	8004480 <_free_r+0x78>
 800447a:	230c      	movs	r3, #12
 800447c:	6003      	str	r3, [r0, #0]
 800447e:	e7d6      	b.n	800442e <_free_r+0x26>
 8004480:	6825      	ldr	r5, [r4, #0]
 8004482:	1961      	adds	r1, r4, r5
 8004484:	428b      	cmp	r3, r1
 8004486:	bf04      	itt	eq
 8004488:	6819      	ldreq	r1, [r3, #0]
 800448a:	685b      	ldreq	r3, [r3, #4]
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	bf04      	itt	eq
 8004490:	1949      	addeq	r1, r1, r5
 8004492:	6021      	streq	r1, [r4, #0]
 8004494:	6054      	str	r4, [r2, #4]
 8004496:	e7ca      	b.n	800442e <_free_r+0x26>
 8004498:	b003      	add	sp, #12
 800449a:	bd30      	pop	{r4, r5, pc}
 800449c:	20000a94 	.word	0x20000a94

080044a0 <_init>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	bf00      	nop
 80044a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a6:	bc08      	pop	{r3}
 80044a8:	469e      	mov	lr, r3
 80044aa:	4770      	bx	lr

080044ac <_fini>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	bf00      	nop
 80044b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b2:	bc08      	pop	{r3}
 80044b4:	469e      	mov	lr, r3
 80044b6:	4770      	bx	lr

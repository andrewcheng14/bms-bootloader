
BMS_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800310c  0800310c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003114  08003114  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800311c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08003184  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003184  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084a3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000173f  00000000  00000000  0002857e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00029cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059d  00000000  00000000  0002a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ba6  00000000  00000000  0002a9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ac2  00000000  00000000  0004c56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca01a  00000000  00000000  0005602d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000234c  00000000  00000000  00120048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00122394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080030b0 	.word	0x080030b0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080030b0 	.word	0x080030b0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fadc 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f818 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8ae 	bl	800066c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f882 	bl	8000618 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader\n");
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <main+0x34>)
 8000516:	f002 fa35 	bl	8002984 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2120      	movs	r1, #32
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0x38>)
 8000520:	f000 fe14 	bl	800114c <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 8000524:	f241 3088 	movw	r0, #5000	; 0x1388
 8000528:	f000 fb72 	bl	8000c10 <HAL_Delay>

  goto_application();
 800052c:	f000 f91e 	bl	800076c <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x30>
 8000532:	bf00      	nop
 8000534:	080030c8 	.word	0x080030c8
 8000538:	40020000 	.word	0x40020000

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	2234      	movs	r2, #52	; 0x34
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fa22 	bl	8002994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <SystemClock_Config+0xd4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a29      	ldr	r2, [pc, #164]	; (8000610 <SystemClock_Config+0xd4>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <SystemClock_Config+0xd4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057c:	2300      	movs	r3, #0
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <SystemClock_Config+0xd8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <SystemClock_Config+0xd8>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <SystemClock_Config+0xd8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005b0:	2310      	movs	r3, #16
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fa1a 	bl	8001a04 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005d6:	f000 f8f3 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fdc2 	bl	8001180 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000602:	f000 f8dd 	bl	80007c0 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART2_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000650:	f001 fc76 	bl	8001f40 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 f8b1 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000084 	.word	0x20000084
 8000668:	40004400 	.word	0x40004400

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <MX_GPIO_Init+0xd0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a2c      	ldr	r2, [pc, #176]	; (800073c <MX_GPIO_Init+0xd0>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <MX_GPIO_Init+0xd0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a25      	ldr	r2, [pc, #148]	; (800073c <MX_GPIO_Init+0xd0>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_GPIO_Init+0xd0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1e      	ldr	r2, [pc, #120]	; (800073c <MX_GPIO_Init+0xd0>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2120      	movs	r1, #32
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_GPIO_Init+0xd4>)
 80006f8:	f000 fd28 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000702:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_GPIO_Init+0xd8>)
 8000714:	f000 fb86 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000718:	2320      	movs	r3, #32
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0xd4>)
 8000730:	f000 fb78 	bl	8000e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000
 8000744:	40020800 	.word	0x40020800

08000748 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000756:	2201      	movs	r2, #1
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <__io_putchar+0x20>)
 800075a:	f001 fc41 	bl	8001fe0 <HAL_UART_Transmit>
  return ch;
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000084 	.word	0x20000084

0800076c <goto_application>:

static void goto_application(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	printf("Jumping to Application\n");
 8000772:	480f      	ldr	r0, [pc, #60]	; (80007b0 <goto_application+0x44>)
 8000774:	f002 f906 	bl	8002984 <puts>

	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08040000 + 4U)));
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <goto_application+0x48>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	607b      	str	r3, [r7, #4]

	// turn off LED
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <goto_application+0x4c>)
 8000784:	f000 fce2 	bl	800114c <HAL_GPIO_WritePin>

	HAL_RCC_DeInit();
 8000788:	f001 f844 	bl	8001814 <HAL_RCC_DeInit>
	HAL_DeInit();
 800078c:	f000 f9ba 	bl	8000b04 <HAL_DeInit>
	// __set_MSP(*(volatile uint32_t*) 0x08040000);
	SysTick->CTRL = 0;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <goto_application+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <goto_application+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <goto_application+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]

	// Jump to App
	app_reset_handler();
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4798      	blx	r3
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	080030dc 	.word	0x080030dc
 80007b4:	08040004 	.word	0x08040004
 80007b8:	40020000 	.word	0x40020000
 80007bc:	e000e010 	.word	0xe000e010

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <HAL_MspInit+0x4c>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_MspInit+0x4c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800080a:	2007      	movs	r0, #7
 800080c:	f000 fad6 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <HAL_UART_MspInit+0x84>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d12b      	bne.n	8000896 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_UART_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000876:	230c      	movs	r3, #12
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000886:	2307      	movs	r3, #7
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <HAL_UART_MspInit+0x8c>)
 8000892:	f000 fac7 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f96a 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e00a      	b.n	8000928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000912:	f3af 8000 	nop.w
 8000916:	4601      	mov	r1, r0
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	60ba      	str	r2, [r7, #8]
 800091e:	b2ca      	uxtb	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf0      	blt.n	8000912 <_read+0x12>
  }

  return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e009      	b.n	8000960 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fef7 	bl	8000748 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf1      	blt.n	800094c <_write+0x12>
  }
  return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_close>:

int _close(int file)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099a:	605a      	str	r2, [r3, #4]
  return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <_isatty>:

int _isatty(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f001 ffca 	bl	80029a4 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20020000 	.word	0x20020000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	200000cc 	.word	0x200000cc
 8000a44:	20000220 	.word	0x20000220

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f001 ff89 	bl	80029b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd2f 	bl	8000500 <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ab0:	0800311c 	.word	0x0800311c
  ldr r2, =_sbss
 8000ab4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ab8:	20000220 	.word	0x20000220

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_Init+0x40>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_Init+0x40>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_Init+0x40>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f967 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f83e 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff fe6a 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023c00 	.word	0x40023c00

08000b04 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <HAL_DeInit+0x50>)
 8000b0c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_DeInit+0x54>)
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_DeInit+0x58>)
 8000b24:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b2e:	2281      	movs	r2, #129	; 0x81
 8000b30:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HAL_DeInit+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000b44:	f000 f80c 	bl	8000b60 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	3fffc9ff 	.word	0x3fffc9ff
 8000b58:	00c77933 	.word	0x00c77933
 8000b5c:	206010ff 	.word	0x206010ff

08000b60 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x58>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f93b 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 f911 	bl	8000dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_InitTick+0x5c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	200000d0 	.word	0x200000d0

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000d0 	.word	0x200000d0

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9c:	f7ff ff8e 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff47 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff5c 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff8e 	bl	8000d10 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5d 	bl	8000cbc <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffb0 	bl	8000d78 <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e165      	b.n	800110c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 8154 	bne.w	8001106 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d130      	bne.n	8000ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80ae 	beq.w	8001106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a5c      	ldr	r2, [pc, #368]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b5a      	ldr	r3, [pc, #360]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a58      	ldr	r2, [pc, #352]	; (8001128 <HAL_GPIO_Init+0x304>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_GPIO_Init+0x308>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d025      	beq.n	800103e <HAL_GPIO_Init+0x21a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_GPIO_Init+0x30c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01f      	beq.n	800103a <HAL_GPIO_Init+0x216>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <HAL_GPIO_Init+0x310>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x212>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_GPIO_Init+0x314>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x20e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4b      	ldr	r2, [pc, #300]	; (800113c <HAL_GPIO_Init+0x318>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x20a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <HAL_GPIO_Init+0x31c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x206>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a49      	ldr	r2, [pc, #292]	; (8001144 <HAL_GPIO_Init+0x320>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x202>
 8001022:	2306      	movs	r3, #6
 8001024:	e00c      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 8001026:	2307      	movs	r3, #7
 8001028:	e00a      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x304>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105e:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001082:	4a31      	ldr	r2, [pc, #196]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_GPIO_Init+0x324>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f ae96 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40021400 	.word	0x40021400
 8001144:	40021800 	.word	0x40021800
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0cc      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001194:	4b68      	ldr	r3, [pc, #416]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d90c      	bls.n	80011bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	4b65      	ldr	r3, [pc, #404]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0b8      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d020      	beq.n	800120a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d4:	4b59      	ldr	r3, [pc, #356]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a58      	ldr	r2, [pc, #352]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	494d      	ldr	r1, [pc, #308]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	4313      	orrs	r3, r2
 8001208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d044      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d119      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e07f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d003      	beq.n	800123e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123a:	2b03      	cmp	r3, #3
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123e:	4b3f      	ldr	r3, [pc, #252]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e06f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e067      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f023 0203 	bic.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4934      	ldr	r1, [pc, #208]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	4313      	orrs	r3, r2
 800126e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001270:	f7ff fcc2 	bl	8000bf8 <HAL_GetTick>
 8001274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	e00a      	b.n	800128e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001278:	f7ff fcbe 	bl	8000bf8 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	; 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e04f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 020c 	and.w	r2, r3, #12
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	429a      	cmp	r2, r3
 800129e:	d1eb      	bne.n	8001278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d20c      	bcs.n	80012c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e032      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4916      	ldr	r1, [pc, #88]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	490e      	ldr	r1, [pc, #56]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001306:	f000 f855 	bl	80013b4 <HAL_RCC_GetSysClockFreq>
 800130a:	4602      	mov	r2, r0
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	490a      	ldr	r1, [pc, #40]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fc22 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00
 800133c:	40023800 	.word	0x40023800
 8001340:	080030f4 	.word	0x080030f4
 8001344:	20000000 	.word	0x20000000
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_RCC_GetHCLKFreq+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000

08001364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001368:	f7ff fff0 	bl	800134c <HAL_RCC_GetHCLKFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	0a9b      	lsrs	r3, r3, #10
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	4903      	ldr	r1, [pc, #12]	; (8001388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	08003104 	.word	0x08003104

0800138c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001390:	f7ff ffdc 	bl	800134c <HAL_RCC_GetHCLKFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	0b5b      	lsrs	r3, r3, #13
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	4903      	ldr	r1, [pc, #12]	; (80013b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013a2:	5ccb      	ldrb	r3, [r1, r3]
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	08003104 	.word	0x08003104

080013b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013b8:	b0ae      	sub	sp, #184	; 0xb8
 80013ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013da:	4bcb      	ldr	r3, [pc, #812]	; (8001708 <HAL_RCC_GetSysClockFreq+0x354>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	f200 8206 	bhi.w	80017f4 <HAL_RCC_GetSysClockFreq+0x440>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001425 	.word	0x08001425
 80013f4:	080017f5 	.word	0x080017f5
 80013f8:	080017f5 	.word	0x080017f5
 80013fc:	080017f5 	.word	0x080017f5
 8001400:	0800142d 	.word	0x0800142d
 8001404:	080017f5 	.word	0x080017f5
 8001408:	080017f5 	.word	0x080017f5
 800140c:	080017f5 	.word	0x080017f5
 8001410:	08001435 	.word	0x08001435
 8001414:	080017f5 	.word	0x080017f5
 8001418:	080017f5 	.word	0x080017f5
 800141c:	080017f5 	.word	0x080017f5
 8001420:	08001625 	.word	0x08001625
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001424:	4bb9      	ldr	r3, [pc, #740]	; (800170c <HAL_RCC_GetSysClockFreq+0x358>)
 8001426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800142a:	e1e7      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800142c:	4bb8      	ldr	r3, [pc, #736]	; (8001710 <HAL_RCC_GetSysClockFreq+0x35c>)
 800142e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001432:	e1e3      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001434:	4bb4      	ldr	r3, [pc, #720]	; (8001708 <HAL_RCC_GetSysClockFreq+0x354>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800143c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001440:	4bb1      	ldr	r3, [pc, #708]	; (8001708 <HAL_RCC_GetSysClockFreq+0x354>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d071      	beq.n	8001530 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800144c:	4bae      	ldr	r3, [pc, #696]	; (8001708 <HAL_RCC_GetSysClockFreq+0x354>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	099b      	lsrs	r3, r3, #6
 8001452:	2200      	movs	r2, #0
 8001454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001458:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800145c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001464:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800146e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001472:	4622      	mov	r2, r4
 8001474:	462b      	mov	r3, r5
 8001476:	f04f 0000 	mov.w	r0, #0
 800147a:	f04f 0100 	mov.w	r1, #0
 800147e:	0159      	lsls	r1, r3, #5
 8001480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001484:	0150      	lsls	r0, r2, #5
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4621      	mov	r1, r4
 800148c:	1a51      	subs	r1, r2, r1
 800148e:	6439      	str	r1, [r7, #64]	; 0x40
 8001490:	4629      	mov	r1, r5
 8001492:	eb63 0301 	sbc.w	r3, r3, r1
 8001496:	647b      	str	r3, [r7, #68]	; 0x44
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014a4:	4649      	mov	r1, r9
 80014a6:	018b      	lsls	r3, r1, #6
 80014a8:	4641      	mov	r1, r8
 80014aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ae:	4641      	mov	r1, r8
 80014b0:	018a      	lsls	r2, r1, #6
 80014b2:	4641      	mov	r1, r8
 80014b4:	1a51      	subs	r1, r2, r1
 80014b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80014b8:	4649      	mov	r1, r9
 80014ba:	eb63 0301 	sbc.w	r3, r3, r1
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014cc:	4649      	mov	r1, r9
 80014ce:	00cb      	lsls	r3, r1, #3
 80014d0:	4641      	mov	r1, r8
 80014d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014d6:	4641      	mov	r1, r8
 80014d8:	00ca      	lsls	r2, r1, #3
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	4622      	mov	r2, r4
 80014e2:	189b      	adds	r3, r3, r2
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
 80014e6:	462b      	mov	r3, r5
 80014e8:	460a      	mov	r2, r1
 80014ea:	eb42 0303 	adc.w	r3, r2, r3
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014fc:	4629      	mov	r1, r5
 80014fe:	024b      	lsls	r3, r1, #9
 8001500:	4621      	mov	r1, r4
 8001502:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001506:	4621      	mov	r1, r4
 8001508:	024a      	lsls	r2, r1, #9
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001512:	2200      	movs	r2, #0
 8001514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001518:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800151c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001520:	f7fe fe70 	bl	8000204 <__aeabi_uldivmod>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4613      	mov	r3, r2
 800152a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800152e:	e067      	b.n	8001600 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001530:	4b75      	ldr	r3, [pc, #468]	; (8001708 <HAL_RCC_GetSysClockFreq+0x354>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	099b      	lsrs	r3, r3, #6
 8001536:	2200      	movs	r2, #0
 8001538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800153c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001548:	67bb      	str	r3, [r7, #120]	; 0x78
 800154a:	2300      	movs	r3, #0
 800154c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800154e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001552:	4622      	mov	r2, r4
 8001554:	462b      	mov	r3, r5
 8001556:	f04f 0000 	mov.w	r0, #0
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	0159      	lsls	r1, r3, #5
 8001560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001564:	0150      	lsls	r0, r2, #5
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4621      	mov	r1, r4
 800156c:	1a51      	subs	r1, r2, r1
 800156e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001570:	4629      	mov	r1, r5
 8001572:	eb63 0301 	sbc.w	r3, r3, r1
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001584:	4649      	mov	r1, r9
 8001586:	018b      	lsls	r3, r1, #6
 8001588:	4641      	mov	r1, r8
 800158a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800158e:	4641      	mov	r1, r8
 8001590:	018a      	lsls	r2, r1, #6
 8001592:	4641      	mov	r1, r8
 8001594:	ebb2 0a01 	subs.w	sl, r2, r1
 8001598:	4649      	mov	r1, r9
 800159a:	eb63 0b01 	sbc.w	fp, r3, r1
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015b2:	4692      	mov	sl, r2
 80015b4:	469b      	mov	fp, r3
 80015b6:	4623      	mov	r3, r4
 80015b8:	eb1a 0303 	adds.w	r3, sl, r3
 80015bc:	623b      	str	r3, [r7, #32]
 80015be:	462b      	mov	r3, r5
 80015c0:	eb4b 0303 	adc.w	r3, fp, r3
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015d2:	4629      	mov	r1, r5
 80015d4:	028b      	lsls	r3, r1, #10
 80015d6:	4621      	mov	r1, r4
 80015d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015dc:	4621      	mov	r1, r4
 80015de:	028a      	lsls	r2, r1, #10
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015e8:	2200      	movs	r2, #0
 80015ea:	673b      	str	r3, [r7, #112]	; 0x70
 80015ec:	677a      	str	r2, [r7, #116]	; 0x74
 80015ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015f2:	f7fe fe07 	bl	8000204 <__aeabi_uldivmod>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4613      	mov	r3, r2
 80015fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_GetSysClockFreq+0x354>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	0c1b      	lsrs	r3, r3, #16
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	3301      	adds	r3, #1
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001622:	e0eb      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_RCC_GetSysClockFreq+0x354>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <HAL_RCC_GetSysClockFreq+0x354>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d06b      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <HAL_RCC_GetSysClockFreq+0x354>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	099b      	lsrs	r3, r3, #6
 8001642:	2200      	movs	r2, #0
 8001644:	66bb      	str	r3, [r7, #104]	; 0x68
 8001646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800164a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800164e:	663b      	str	r3, [r7, #96]	; 0x60
 8001650:	2300      	movs	r3, #0
 8001652:	667b      	str	r3, [r7, #100]	; 0x64
 8001654:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001658:	4622      	mov	r2, r4
 800165a:	462b      	mov	r3, r5
 800165c:	f04f 0000 	mov.w	r0, #0
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	0159      	lsls	r1, r3, #5
 8001666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800166a:	0150      	lsls	r0, r2, #5
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4621      	mov	r1, r4
 8001672:	1a51      	subs	r1, r2, r1
 8001674:	61b9      	str	r1, [r7, #24]
 8001676:	4629      	mov	r1, r5
 8001678:	eb63 0301 	sbc.w	r3, r3, r1
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800168a:	4659      	mov	r1, fp
 800168c:	018b      	lsls	r3, r1, #6
 800168e:	4651      	mov	r1, sl
 8001690:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001694:	4651      	mov	r1, sl
 8001696:	018a      	lsls	r2, r1, #6
 8001698:	4651      	mov	r1, sl
 800169a:	ebb2 0801 	subs.w	r8, r2, r1
 800169e:	4659      	mov	r1, fp
 80016a0:	eb63 0901 	sbc.w	r9, r3, r1
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016b8:	4690      	mov	r8, r2
 80016ba:	4699      	mov	r9, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	eb18 0303 	adds.w	r3, r8, r3
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	462b      	mov	r3, r5
 80016c6:	eb49 0303 	adc.w	r3, r9, r3
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016d8:	4629      	mov	r1, r5
 80016da:	024b      	lsls	r3, r1, #9
 80016dc:	4621      	mov	r1, r4
 80016de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016e2:	4621      	mov	r1, r4
 80016e4:	024a      	lsls	r2, r1, #9
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ee:	2200      	movs	r2, #0
 80016f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80016f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016f8:	f7fe fd84 	bl	8000204 <__aeabi_uldivmod>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4613      	mov	r3, r2
 8001702:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001706:	e065      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x420>
 8001708:	40023800 	.word	0x40023800
 800170c:	00f42400 	.word	0x00f42400
 8001710:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001714:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_RCC_GetSysClockFreq+0x458>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	2200      	movs	r2, #0
 800171c:	4618      	mov	r0, r3
 800171e:	4611      	mov	r1, r2
 8001720:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001724:	653b      	str	r3, [r7, #80]	; 0x50
 8001726:	2300      	movs	r3, #0
 8001728:	657b      	str	r3, [r7, #84]	; 0x54
 800172a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800172e:	4642      	mov	r2, r8
 8001730:	464b      	mov	r3, r9
 8001732:	f04f 0000 	mov.w	r0, #0
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	0159      	lsls	r1, r3, #5
 800173c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001740:	0150      	lsls	r0, r2, #5
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4641      	mov	r1, r8
 8001748:	1a51      	subs	r1, r2, r1
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	4649      	mov	r1, r9
 800174e:	eb63 0301 	sbc.w	r3, r3, r1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001760:	4659      	mov	r1, fp
 8001762:	018b      	lsls	r3, r1, #6
 8001764:	4651      	mov	r1, sl
 8001766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800176a:	4651      	mov	r1, sl
 800176c:	018a      	lsls	r2, r1, #6
 800176e:	4651      	mov	r1, sl
 8001770:	1a54      	subs	r4, r2, r1
 8001772:	4659      	mov	r1, fp
 8001774:	eb63 0501 	sbc.w	r5, r3, r1
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	00eb      	lsls	r3, r5, #3
 8001782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001786:	00e2      	lsls	r2, r4, #3
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	4643      	mov	r3, r8
 800178e:	18e3      	adds	r3, r4, r3
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	464b      	mov	r3, r9
 8001794:	eb45 0303 	adc.w	r3, r5, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017a6:	4629      	mov	r1, r5
 80017a8:	028b      	lsls	r3, r1, #10
 80017aa:	4621      	mov	r1, r4
 80017ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b0:	4621      	mov	r1, r4
 80017b2:	028a      	lsls	r2, r1, #10
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017bc:	2200      	movs	r2, #0
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48
 80017c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017c6:	f7fe fd1d 	bl	8000204 <__aeabi_uldivmod>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4613      	mov	r3, r2
 80017d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_RCC_GetSysClockFreq+0x458>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0f1b      	lsrs	r3, r3, #28
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017f2:	e003      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001800:	4618      	mov	r0, r3
 8001802:	37b8      	adds	r7, #184	; 0xb8
 8001804:	46bd      	mov	sp, r7
 8001806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	00f42400 	.word	0x00f42400

08001814 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800181a:	f7ff f9ed 	bl	8000bf8 <HAL_GetTick>
 800181e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001820:	4b72      	ldr	r3, [pc, #456]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a71      	ldr	r2, [pc, #452]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff f9e3 	bl	8000bf8 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0d0      	b.n	80019e2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800184c:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a66      	ldr	r2, [pc, #408]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001856:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001858:	f7ff f9ce 	bl	8000bf8 <HAL_GetTick>
 800185c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800185e:	4b63      	ldr	r3, [pc, #396]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001866:	f7ff f9c7 	bl	8000bf8 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0b2      	b.n	80019e2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800187c:	4b5b      	ldr	r3, [pc, #364]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ee      	bne.n	8001866 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001888:	f7ff f9b6 	bl	8000bf8 <HAL_GetTick>
 800188c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800188e:	4b57      	ldr	r3, [pc, #348]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a56      	ldr	r2, [pc, #344]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001894:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8001898:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff f9ac 	bl	8000bf8 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e099      	b.n	80019e2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80018ae:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80018ba:	f7ff f99d 	bl	8000bf8 <HAL_GetTick>
 80018be:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a49      	ldr	r2, [pc, #292]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80018c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ca:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff f993 	bl	8000bf8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e080      	b.n	80019e2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff f984 	bl	8000bf8 <HAL_GetTick>
 80018f0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a3d      	ldr	r2, [pc, #244]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80018f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80018fc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001900:	f7ff f97a 	bl	8000bf8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e067      	b.n	80019e2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800191e:	f7ff f96b 	bl	8000bf8 <HAL_GetTick>
 8001922:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a30      	ldr	r2, [pc, #192]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001932:	f7ff f961 	bl	8000bf8 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e04e      	b.n	80019e2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001952:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <HAL_RCC_DeInit+0x1dc>)
 8001954:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001958:	4a25      	ldr	r2, [pc, #148]	; (80019f0 <HAL_RCC_DeInit+0x1dc>)
 800195a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 800195e:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001960:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <HAL_RCC_DeInit+0x1e0>)
 8001962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4a20      	ldr	r2, [pc, #128]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 800196c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001970:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800197c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001988:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001990:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8001994:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 800199c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4a11      	ldr	r2, [pc, #68]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80019a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80019b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b2:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80019bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_RCC_DeInit+0x1d8>)
 80019c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_DeInit+0x1e4>)
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_RCC_DeInit+0x1e8>)
 80019ca:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_RCC_DeInit+0x1ec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f8cd 	bl	8000b70 <HAL_InitTick>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80019e0:	2300      	movs	r3, #0
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	24003010 	.word	0x24003010
 80019f4:	04003010 	.word	0x04003010
 80019f8:	20000000 	.word	0x20000000
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e28d      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8083 	beq.w	8001b2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a24:	4b94      	ldr	r3, [pc, #592]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d019      	beq.n	8001a64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a30:	4b91      	ldr	r3, [pc, #580]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a3c:	4b8e      	ldr	r3, [pc, #568]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a48:	d00c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d112      	bne.n	8001a7c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a56:	4b88      	ldr	r3, [pc, #544]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a62:	d10b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d05b      	beq.n	8001b28 <HAL_RCC_OscConfig+0x124>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d157      	bne.n	8001b28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e25a      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x90>
 8001a86:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7b      	ldr	r2, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xcc>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xb4>
 8001a9e:	4b76      	ldr	r3, [pc, #472]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a75      	ldr	r2, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a72      	ldr	r2, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xcc>
 8001ab8:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a6e      	ldr	r2, [pc, #440]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b6c      	ldr	r3, [pc, #432]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6b      	ldr	r2, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f88e 	bl	8000bf8 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff f88a 	bl	8000bf8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e21f      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xdc>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f87a 	bl	8000bf8 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff f876 	bl	8000bf8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e20b      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x104>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d06f      	beq.n	8001c16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b36:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d017      	beq.n	8001b72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b42:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d105      	bne.n	8001b5a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d11c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b66:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x186>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e1d3      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4937      	ldr	r1, [pc, #220]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	e03a      	b.n	8001c16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_RCC_OscConfig+0x278>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f823 	bl	8000bf8 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f81f 	bl	8000bf8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1b4      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4925      	ldr	r1, [pc, #148]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_OscConfig+0x278>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f802 	bl	8000bf8 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7fe fffe 	bl	8000bf8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e193      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d036      	beq.n	8001c90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d016      	beq.n	8001c58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7fe ffe2 	bl	8000bf8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c38:	f7fe ffde 	bl	8000bf8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e173      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x234>
 8001c56:	e01b      	b.n	8001c90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5e:	f7fe ffcb 	bl	8000bf8 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e00e      	b.n	8001c84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c66:	f7fe ffc7 	bl	8000bf8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d907      	bls.n	8001c84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e15c      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	42470000 	.word	0x42470000
 8001c80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b8a      	ldr	r3, [pc, #552]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ea      	bne.n	8001c66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8097 	beq.w	8001dcc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b83      	ldr	r3, [pc, #524]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10f      	bne.n	8001cce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cda:	4b76      	ldr	r3, [pc, #472]	; (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a75      	ldr	r2, [pc, #468]	; (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce6:	f7fe ff87 	bl	8000bf8 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cee:	f7fe ff83 	bl	8000bf8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e118      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x31e>
 8001d14:	4b66      	ldr	r3, [pc, #408]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a65      	ldr	r2, [pc, #404]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x358>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x340>
 8001d2a:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	4a60      	ldr	r2, [pc, #384]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6713      	str	r3, [r2, #112]	; 0x70
 8001d36:	4b5e      	ldr	r3, [pc, #376]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a5d      	ldr	r2, [pc, #372]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0x358>
 8001d44:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d50:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a56      	ldr	r2, [pc, #344]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	f023 0304 	bic.w	r3, r3, #4
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d015      	beq.n	8001d90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7fe ff48 	bl	8000bf8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7fe ff44 	bl	8000bf8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0d7      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ee      	beq.n	8001d6c <HAL_RCC_OscConfig+0x368>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7fe ff32 	bl	8000bf8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7fe ff2e 	bl	8000bf8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0c1      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ee      	bne.n	8001d98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	4a3a      	ldr	r2, [pc, #232]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80ad 	beq.w	8001f30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d060      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d145      	bne.n	8001e76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <HAL_RCC_OscConfig+0x4b4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe ff02 	bl	8000bf8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fefe 	bl	8000bf8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e093      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	071b      	lsls	r3, r3, #28
 8001e42:	491b      	ldr	r1, [pc, #108]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_RCC_OscConfig+0x4b4>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fed3 	bl	8000bf8 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e56:	f7fe fecf 	bl	8000bf8 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e064      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x452>
 8001e74:	e05c      	b.n	8001f30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_RCC_OscConfig+0x4b4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe febc 	bl	8000bf8 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe feb8 	bl	8000bf8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e04d      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x480>
 8001ea2:	e045      	b.n	8001f30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e040      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_RCC_OscConfig+0x538>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d030      	beq.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d129      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d122      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eec:	4013      	ands	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ef2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d119      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	3b01      	subs	r3, #1
 8001f06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d10f      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e042      	b.n	8001fd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fc58 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	; 0x24
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f973 	bl	8002270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d175      	bne.n	80020ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_UART_Transmit+0x2c>
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e06e      	b.n	80020ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2221      	movs	r2, #33	; 0x21
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800201e:	f7fe fdeb 	bl	8000bf8 <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002038:	d108      	bne.n	800204c <HAL_UART_Transmit+0x6c>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d104      	bne.n	800204c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	e003      	b.n	8002054 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002054:	e02e      	b.n	80020b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f848 	bl	80020f6 <UART_WaitOnFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e03a      	b.n	80020ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800208c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	3302      	adds	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e007      	b.n	80020a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1cb      	bne.n	8002056 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2200      	movs	r2, #0
 80020c6:	2140      	movs	r1, #64	; 0x40
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f814 	bl	80020f6 <UART_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e006      	b.n	80020ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002106:	e03b      	b.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210e:	d037      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002110:	f7fe fd72 	bl	8000bf8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	6a3a      	ldr	r2, [r7, #32]
 800211c:	429a      	cmp	r2, r3
 800211e:	d302      	bcc.n	8002126 <UART_WaitOnFlagUntilTimeout+0x30>
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e03a      	b.n	80021a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d023      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b80      	cmp	r3, #128	; 0x80
 800213c:	d020      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b40      	cmp	r3, #64	; 0x40
 8002142:	d01d      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d116      	bne.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f81d 	bl	80021a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2208      	movs	r2, #8
 8002172:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e00f      	b.n	80021a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4013      	ands	r3, r2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d0b4      	beq.n	8002108 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b095      	sub	sp, #84	; 0x54
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	330c      	adds	r3, #12
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ba:	e853 3f00 	ldrex	r3, [r3]
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021d0:	643a      	str	r2, [r7, #64]	; 0x40
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021d8:	e841 2300 	strex	r3, r2, [r1]
 80021dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e5      	bne.n	80021b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3314      	adds	r3, #20
 80021ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	e853 3f00 	ldrex	r3, [r3]
 80021f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3314      	adds	r3, #20
 8002202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800220a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220c:	e841 2300 	strex	r3, r2, [r1]
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e5      	bne.n	80021e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	2b01      	cmp	r3, #1
 800221e:	d119      	bne.n	8002254 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	e853 3f00 	ldrex	r3, [r3]
 800222e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f023 0310 	bic.w	r3, r3, #16
 8002236:	647b      	str	r3, [r7, #68]	; 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002240:	61ba      	str	r2, [r7, #24]
 8002242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002244:	6979      	ldr	r1, [r7, #20]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	e841 2300 	strex	r3, r2, [r1]
 800224c:	613b      	str	r3, [r7, #16]
   return(result);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e5      	bne.n	8002220 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002262:	bf00      	nop
 8002264:	3754      	adds	r7, #84	; 0x54
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002274:	b0c0      	sub	sp, #256	; 0x100
 8002276:	af00      	add	r7, sp, #0
 8002278:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228c:	68d9      	ldr	r1, [r3, #12]
 800228e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	ea40 0301 	orr.w	r3, r0, r1
 8002298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800229a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022c8:	f021 010c 	bic.w	r1, r1, #12
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022d6:	430b      	orrs	r3, r1
 80022d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ea:	6999      	ldr	r1, [r3, #24]
 80022ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	ea40 0301 	orr.w	r3, r0, r1
 80022f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b8f      	ldr	r3, [pc, #572]	; (800253c <UART_SetConfig+0x2cc>)
 8002300:	429a      	cmp	r2, r3
 8002302:	d005      	beq.n	8002310 <UART_SetConfig+0xa0>
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4b8d      	ldr	r3, [pc, #564]	; (8002540 <UART_SetConfig+0x2d0>)
 800230c:	429a      	cmp	r2, r3
 800230e:	d104      	bne.n	800231a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002310:	f7ff f83c 	bl	800138c <HAL_RCC_GetPCLK2Freq>
 8002314:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002318:	e003      	b.n	8002322 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800231a:	f7ff f823 	bl	8001364 <HAL_RCC_GetPCLK1Freq>
 800231e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800232c:	f040 810c 	bne.w	8002548 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002334:	2200      	movs	r2, #0
 8002336:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800233a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800233e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002342:	4622      	mov	r2, r4
 8002344:	462b      	mov	r3, r5
 8002346:	1891      	adds	r1, r2, r2
 8002348:	65b9      	str	r1, [r7, #88]	; 0x58
 800234a:	415b      	adcs	r3, r3
 800234c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800234e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002352:	4621      	mov	r1, r4
 8002354:	eb12 0801 	adds.w	r8, r2, r1
 8002358:	4629      	mov	r1, r5
 800235a:	eb43 0901 	adc.w	r9, r3, r1
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800236a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800236e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002372:	4690      	mov	r8, r2
 8002374:	4699      	mov	r9, r3
 8002376:	4623      	mov	r3, r4
 8002378:	eb18 0303 	adds.w	r3, r8, r3
 800237c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002380:	462b      	mov	r3, r5
 8002382:	eb49 0303 	adc.w	r3, r9, r3
 8002386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800238a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002396:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800239a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800239e:	460b      	mov	r3, r1
 80023a0:	18db      	adds	r3, r3, r3
 80023a2:	653b      	str	r3, [r7, #80]	; 0x50
 80023a4:	4613      	mov	r3, r2
 80023a6:	eb42 0303 	adc.w	r3, r2, r3
 80023aa:	657b      	str	r3, [r7, #84]	; 0x54
 80023ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80023b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80023b4:	f7fd ff26 	bl	8000204 <__aeabi_uldivmod>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4b61      	ldr	r3, [pc, #388]	; (8002544 <UART_SetConfig+0x2d4>)
 80023be:	fba3 2302 	umull	r2, r3, r3, r2
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	011c      	lsls	r4, r3, #4
 80023c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80023d8:	4642      	mov	r2, r8
 80023da:	464b      	mov	r3, r9
 80023dc:	1891      	adds	r1, r2, r2
 80023de:	64b9      	str	r1, [r7, #72]	; 0x48
 80023e0:	415b      	adcs	r3, r3
 80023e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023e8:	4641      	mov	r1, r8
 80023ea:	eb12 0a01 	adds.w	sl, r2, r1
 80023ee:	4649      	mov	r1, r9
 80023f0:	eb43 0b01 	adc.w	fp, r3, r1
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002400:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002408:	4692      	mov	sl, r2
 800240a:	469b      	mov	fp, r3
 800240c:	4643      	mov	r3, r8
 800240e:	eb1a 0303 	adds.w	r3, sl, r3
 8002412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002416:	464b      	mov	r3, r9
 8002418:	eb4b 0303 	adc.w	r3, fp, r3
 800241c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800242c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002430:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002434:	460b      	mov	r3, r1
 8002436:	18db      	adds	r3, r3, r3
 8002438:	643b      	str	r3, [r7, #64]	; 0x40
 800243a:	4613      	mov	r3, r2
 800243c:	eb42 0303 	adc.w	r3, r2, r3
 8002440:	647b      	str	r3, [r7, #68]	; 0x44
 8002442:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002446:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800244a:	f7fd fedb 	bl	8000204 <__aeabi_uldivmod>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4611      	mov	r1, r2
 8002454:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <UART_SetConfig+0x2d4>)
 8002456:	fba3 2301 	umull	r2, r3, r3, r1
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2264      	movs	r2, #100	; 0x64
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	1acb      	subs	r3, r1, r3
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800246a:	4b36      	ldr	r3, [pc, #216]	; (8002544 <UART_SetConfig+0x2d4>)
 800246c:	fba3 2302 	umull	r2, r3, r3, r2
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002478:	441c      	add	r4, r3
 800247a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800247e:	2200      	movs	r2, #0
 8002480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002484:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002488:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800248c:	4642      	mov	r2, r8
 800248e:	464b      	mov	r3, r9
 8002490:	1891      	adds	r1, r2, r2
 8002492:	63b9      	str	r1, [r7, #56]	; 0x38
 8002494:	415b      	adcs	r3, r3
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800249c:	4641      	mov	r1, r8
 800249e:	1851      	adds	r1, r2, r1
 80024a0:	6339      	str	r1, [r7, #48]	; 0x30
 80024a2:	4649      	mov	r1, r9
 80024a4:	414b      	adcs	r3, r1
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80024b4:	4659      	mov	r1, fp
 80024b6:	00cb      	lsls	r3, r1, #3
 80024b8:	4651      	mov	r1, sl
 80024ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024be:	4651      	mov	r1, sl
 80024c0:	00ca      	lsls	r2, r1, #3
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	4642      	mov	r2, r8
 80024ca:	189b      	adds	r3, r3, r2
 80024cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024d0:	464b      	mov	r3, r9
 80024d2:	460a      	mov	r2, r1
 80024d4:	eb42 0303 	adc.w	r3, r2, r3
 80024d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80024ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80024f0:	460b      	mov	r3, r1
 80024f2:	18db      	adds	r3, r3, r3
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f6:	4613      	mov	r3, r2
 80024f8:	eb42 0303 	adc.w	r3, r2, r3
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002502:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002506:	f7fd fe7d 	bl	8000204 <__aeabi_uldivmod>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <UART_SetConfig+0x2d4>)
 8002510:	fba3 1302 	umull	r1, r3, r3, r2
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	2164      	movs	r1, #100	; 0x64
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	3332      	adds	r3, #50	; 0x32
 8002522:	4a08      	ldr	r2, [pc, #32]	; (8002544 <UART_SetConfig+0x2d4>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	f003 0207 	and.w	r2, r3, #7
 800252e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4422      	add	r2, r4
 8002536:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002538:	e106      	b.n	8002748 <UART_SetConfig+0x4d8>
 800253a:	bf00      	nop
 800253c:	40011000 	.word	0x40011000
 8002540:	40011400 	.word	0x40011400
 8002544:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254c:	2200      	movs	r2, #0
 800254e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002552:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002556:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800255a:	4642      	mov	r2, r8
 800255c:	464b      	mov	r3, r9
 800255e:	1891      	adds	r1, r2, r2
 8002560:	6239      	str	r1, [r7, #32]
 8002562:	415b      	adcs	r3, r3
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800256a:	4641      	mov	r1, r8
 800256c:	1854      	adds	r4, r2, r1
 800256e:	4649      	mov	r1, r9
 8002570:	eb43 0501 	adc.w	r5, r3, r1
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	00eb      	lsls	r3, r5, #3
 800257e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002582:	00e2      	lsls	r2, r4, #3
 8002584:	4614      	mov	r4, r2
 8002586:	461d      	mov	r5, r3
 8002588:	4643      	mov	r3, r8
 800258a:	18e3      	adds	r3, r4, r3
 800258c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002590:	464b      	mov	r3, r9
 8002592:	eb45 0303 	adc.w	r3, r5, r3
 8002596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800259a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025b6:	4629      	mov	r1, r5
 80025b8:	008b      	lsls	r3, r1, #2
 80025ba:	4621      	mov	r1, r4
 80025bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025c0:	4621      	mov	r1, r4
 80025c2:	008a      	lsls	r2, r1, #2
 80025c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80025c8:	f7fd fe1c 	bl	8000204 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4b60      	ldr	r3, [pc, #384]	; (8002754 <UART_SetConfig+0x4e4>)
 80025d2:	fba3 2302 	umull	r2, r3, r3, r2
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	011c      	lsls	r4, r3, #4
 80025da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025ec:	4642      	mov	r2, r8
 80025ee:	464b      	mov	r3, r9
 80025f0:	1891      	adds	r1, r2, r2
 80025f2:	61b9      	str	r1, [r7, #24]
 80025f4:	415b      	adcs	r3, r3
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025fc:	4641      	mov	r1, r8
 80025fe:	1851      	adds	r1, r2, r1
 8002600:	6139      	str	r1, [r7, #16]
 8002602:	4649      	mov	r1, r9
 8002604:	414b      	adcs	r3, r1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002614:	4659      	mov	r1, fp
 8002616:	00cb      	lsls	r3, r1, #3
 8002618:	4651      	mov	r1, sl
 800261a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800261e:	4651      	mov	r1, sl
 8002620:	00ca      	lsls	r2, r1, #3
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	4603      	mov	r3, r0
 8002628:	4642      	mov	r2, r8
 800262a:	189b      	adds	r3, r3, r2
 800262c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002630:	464b      	mov	r3, r9
 8002632:	460a      	mov	r2, r1
 8002634:	eb42 0303 	adc.w	r3, r2, r3
 8002638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	67bb      	str	r3, [r7, #120]	; 0x78
 8002646:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002654:	4649      	mov	r1, r9
 8002656:	008b      	lsls	r3, r1, #2
 8002658:	4641      	mov	r1, r8
 800265a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800265e:	4641      	mov	r1, r8
 8002660:	008a      	lsls	r2, r1, #2
 8002662:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002666:	f7fd fdcd 	bl	8000204 <__aeabi_uldivmod>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4611      	mov	r1, r2
 8002670:	4b38      	ldr	r3, [pc, #224]	; (8002754 <UART_SetConfig+0x4e4>)
 8002672:	fba3 2301 	umull	r2, r3, r3, r1
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2264      	movs	r2, #100	; 0x64
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	1acb      	subs	r3, r1, r3
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	3332      	adds	r3, #50	; 0x32
 8002684:	4a33      	ldr	r2, [pc, #204]	; (8002754 <UART_SetConfig+0x4e4>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002690:	441c      	add	r4, r3
 8002692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002696:	2200      	movs	r2, #0
 8002698:	673b      	str	r3, [r7, #112]	; 0x70
 800269a:	677a      	str	r2, [r7, #116]	; 0x74
 800269c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026a0:	4642      	mov	r2, r8
 80026a2:	464b      	mov	r3, r9
 80026a4:	1891      	adds	r1, r2, r2
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	415b      	adcs	r3, r3
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026b0:	4641      	mov	r1, r8
 80026b2:	1851      	adds	r1, r2, r1
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	4649      	mov	r1, r9
 80026b8:	414b      	adcs	r3, r1
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026c8:	4659      	mov	r1, fp
 80026ca:	00cb      	lsls	r3, r1, #3
 80026cc:	4651      	mov	r1, sl
 80026ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026d2:	4651      	mov	r1, sl
 80026d4:	00ca      	lsls	r2, r1, #3
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	4642      	mov	r2, r8
 80026de:	189b      	adds	r3, r3, r2
 80026e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026e2:	464b      	mov	r3, r9
 80026e4:	460a      	mov	r2, r1
 80026e6:	eb42 0303 	adc.w	r3, r2, r3
 80026ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	663b      	str	r3, [r7, #96]	; 0x60
 80026f6:	667a      	str	r2, [r7, #100]	; 0x64
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002704:	4649      	mov	r1, r9
 8002706:	008b      	lsls	r3, r1, #2
 8002708:	4641      	mov	r1, r8
 800270a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800270e:	4641      	mov	r1, r8
 8002710:	008a      	lsls	r2, r1, #2
 8002712:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002716:	f7fd fd75 	bl	8000204 <__aeabi_uldivmod>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <UART_SetConfig+0x4e4>)
 8002720:	fba3 1302 	umull	r1, r3, r3, r2
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	2164      	movs	r1, #100	; 0x64
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	3332      	adds	r3, #50	; 0x32
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <UART_SetConfig+0x4e4>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	f003 020f 	and.w	r2, r3, #15
 800273e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4422      	add	r2, r4
 8002746:	609a      	str	r2, [r3, #8]
}
 8002748:	bf00      	nop
 800274a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800274e:	46bd      	mov	sp, r7
 8002750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002754:	51eb851f 	.word	0x51eb851f

08002758 <std>:
 8002758:	2300      	movs	r3, #0
 800275a:	b510      	push	{r4, lr}
 800275c:	4604      	mov	r4, r0
 800275e:	e9c0 3300 	strd	r3, r3, [r0]
 8002762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002766:	6083      	str	r3, [r0, #8]
 8002768:	8181      	strh	r1, [r0, #12]
 800276a:	6643      	str	r3, [r0, #100]	; 0x64
 800276c:	81c2      	strh	r2, [r0, #14]
 800276e:	6183      	str	r3, [r0, #24]
 8002770:	4619      	mov	r1, r3
 8002772:	2208      	movs	r2, #8
 8002774:	305c      	adds	r0, #92	; 0x5c
 8002776:	f000 f90d 	bl	8002994 <memset>
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <std+0x58>)
 800277c:	6263      	str	r3, [r4, #36]	; 0x24
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <std+0x5c>)
 8002780:	62a3      	str	r3, [r4, #40]	; 0x28
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <std+0x60>)
 8002784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <std+0x64>)
 8002788:	6323      	str	r3, [r4, #48]	; 0x30
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <std+0x68>)
 800278c:	6224      	str	r4, [r4, #32]
 800278e:	429c      	cmp	r4, r3
 8002790:	d006      	beq.n	80027a0 <std+0x48>
 8002792:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002796:	4294      	cmp	r4, r2
 8002798:	d002      	beq.n	80027a0 <std+0x48>
 800279a:	33d0      	adds	r3, #208	; 0xd0
 800279c:	429c      	cmp	r4, r3
 800279e:	d105      	bne.n	80027ac <std+0x54>
 80027a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a8:	f000 b926 	b.w	80029f8 <__retarget_lock_init_recursive>
 80027ac:	bd10      	pop	{r4, pc}
 80027ae:	bf00      	nop
 80027b0:	08002cb5 	.word	0x08002cb5
 80027b4:	08002cd7 	.word	0x08002cd7
 80027b8:	08002d0f 	.word	0x08002d0f
 80027bc:	08002d33 	.word	0x08002d33
 80027c0:	200000d4 	.word	0x200000d4

080027c4 <stdio_exit_handler>:
 80027c4:	4a02      	ldr	r2, [pc, #8]	; (80027d0 <stdio_exit_handler+0xc>)
 80027c6:	4903      	ldr	r1, [pc, #12]	; (80027d4 <stdio_exit_handler+0x10>)
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <stdio_exit_handler+0x14>)
 80027ca:	f000 b869 	b.w	80028a0 <_fwalk_sglue>
 80027ce:	bf00      	nop
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	08002c4d 	.word	0x08002c4d
 80027d8:	20000018 	.word	0x20000018

080027dc <cleanup_stdio>:
 80027dc:	6841      	ldr	r1, [r0, #4]
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <cleanup_stdio+0x34>)
 80027e0:	4299      	cmp	r1, r3
 80027e2:	b510      	push	{r4, lr}
 80027e4:	4604      	mov	r4, r0
 80027e6:	d001      	beq.n	80027ec <cleanup_stdio+0x10>
 80027e8:	f000 fa30 	bl	8002c4c <_fflush_r>
 80027ec:	68a1      	ldr	r1, [r4, #8]
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <cleanup_stdio+0x38>)
 80027f0:	4299      	cmp	r1, r3
 80027f2:	d002      	beq.n	80027fa <cleanup_stdio+0x1e>
 80027f4:	4620      	mov	r0, r4
 80027f6:	f000 fa29 	bl	8002c4c <_fflush_r>
 80027fa:	68e1      	ldr	r1, [r4, #12]
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <cleanup_stdio+0x3c>)
 80027fe:	4299      	cmp	r1, r3
 8002800:	d004      	beq.n	800280c <cleanup_stdio+0x30>
 8002802:	4620      	mov	r0, r4
 8002804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002808:	f000 ba20 	b.w	8002c4c <_fflush_r>
 800280c:	bd10      	pop	{r4, pc}
 800280e:	bf00      	nop
 8002810:	200000d4 	.word	0x200000d4
 8002814:	2000013c 	.word	0x2000013c
 8002818:	200001a4 	.word	0x200001a4

0800281c <global_stdio_init.part.0>:
 800281c:	b510      	push	{r4, lr}
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <global_stdio_init.part.0+0x30>)
 8002820:	4c0b      	ldr	r4, [pc, #44]	; (8002850 <global_stdio_init.part.0+0x34>)
 8002822:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <global_stdio_init.part.0+0x38>)
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	4620      	mov	r0, r4
 8002828:	2200      	movs	r2, #0
 800282a:	2104      	movs	r1, #4
 800282c:	f7ff ff94 	bl	8002758 <std>
 8002830:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002834:	2201      	movs	r2, #1
 8002836:	2109      	movs	r1, #9
 8002838:	f7ff ff8e 	bl	8002758 <std>
 800283c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002840:	2202      	movs	r2, #2
 8002842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002846:	2112      	movs	r1, #18
 8002848:	f7ff bf86 	b.w	8002758 <std>
 800284c:	2000020c 	.word	0x2000020c
 8002850:	200000d4 	.word	0x200000d4
 8002854:	080027c5 	.word	0x080027c5

08002858 <__sfp_lock_acquire>:
 8002858:	4801      	ldr	r0, [pc, #4]	; (8002860 <__sfp_lock_acquire+0x8>)
 800285a:	f000 b8ce 	b.w	80029fa <__retarget_lock_acquire_recursive>
 800285e:	bf00      	nop
 8002860:	20000211 	.word	0x20000211

08002864 <__sfp_lock_release>:
 8002864:	4801      	ldr	r0, [pc, #4]	; (800286c <__sfp_lock_release+0x8>)
 8002866:	f000 b8c9 	b.w	80029fc <__retarget_lock_release_recursive>
 800286a:	bf00      	nop
 800286c:	20000211 	.word	0x20000211

08002870 <__sinit>:
 8002870:	b510      	push	{r4, lr}
 8002872:	4604      	mov	r4, r0
 8002874:	f7ff fff0 	bl	8002858 <__sfp_lock_acquire>
 8002878:	6a23      	ldr	r3, [r4, #32]
 800287a:	b11b      	cbz	r3, 8002884 <__sinit+0x14>
 800287c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002880:	f7ff bff0 	b.w	8002864 <__sfp_lock_release>
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <__sinit+0x28>)
 8002886:	6223      	str	r3, [r4, #32]
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <__sinit+0x2c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f5      	bne.n	800287c <__sinit+0xc>
 8002890:	f7ff ffc4 	bl	800281c <global_stdio_init.part.0>
 8002894:	e7f2      	b.n	800287c <__sinit+0xc>
 8002896:	bf00      	nop
 8002898:	080027dd 	.word	0x080027dd
 800289c:	2000020c 	.word	0x2000020c

080028a0 <_fwalk_sglue>:
 80028a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028a4:	4607      	mov	r7, r0
 80028a6:	4688      	mov	r8, r1
 80028a8:	4614      	mov	r4, r2
 80028aa:	2600      	movs	r6, #0
 80028ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028b0:	f1b9 0901 	subs.w	r9, r9, #1
 80028b4:	d505      	bpl.n	80028c2 <_fwalk_sglue+0x22>
 80028b6:	6824      	ldr	r4, [r4, #0]
 80028b8:	2c00      	cmp	r4, #0
 80028ba:	d1f7      	bne.n	80028ac <_fwalk_sglue+0xc>
 80028bc:	4630      	mov	r0, r6
 80028be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028c2:	89ab      	ldrh	r3, [r5, #12]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d907      	bls.n	80028d8 <_fwalk_sglue+0x38>
 80028c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028cc:	3301      	adds	r3, #1
 80028ce:	d003      	beq.n	80028d8 <_fwalk_sglue+0x38>
 80028d0:	4629      	mov	r1, r5
 80028d2:	4638      	mov	r0, r7
 80028d4:	47c0      	blx	r8
 80028d6:	4306      	orrs	r6, r0
 80028d8:	3568      	adds	r5, #104	; 0x68
 80028da:	e7e9      	b.n	80028b0 <_fwalk_sglue+0x10>

080028dc <_puts_r>:
 80028dc:	6a03      	ldr	r3, [r0, #32]
 80028de:	b570      	push	{r4, r5, r6, lr}
 80028e0:	6884      	ldr	r4, [r0, #8]
 80028e2:	4605      	mov	r5, r0
 80028e4:	460e      	mov	r6, r1
 80028e6:	b90b      	cbnz	r3, 80028ec <_puts_r+0x10>
 80028e8:	f7ff ffc2 	bl	8002870 <__sinit>
 80028ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028ee:	07db      	lsls	r3, r3, #31
 80028f0:	d405      	bmi.n	80028fe <_puts_r+0x22>
 80028f2:	89a3      	ldrh	r3, [r4, #12]
 80028f4:	0598      	lsls	r0, r3, #22
 80028f6:	d402      	bmi.n	80028fe <_puts_r+0x22>
 80028f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028fa:	f000 f87e 	bl	80029fa <__retarget_lock_acquire_recursive>
 80028fe:	89a3      	ldrh	r3, [r4, #12]
 8002900:	0719      	lsls	r1, r3, #28
 8002902:	d513      	bpl.n	800292c <_puts_r+0x50>
 8002904:	6923      	ldr	r3, [r4, #16]
 8002906:	b18b      	cbz	r3, 800292c <_puts_r+0x50>
 8002908:	3e01      	subs	r6, #1
 800290a:	68a3      	ldr	r3, [r4, #8]
 800290c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002910:	3b01      	subs	r3, #1
 8002912:	60a3      	str	r3, [r4, #8]
 8002914:	b9e9      	cbnz	r1, 8002952 <_puts_r+0x76>
 8002916:	2b00      	cmp	r3, #0
 8002918:	da2e      	bge.n	8002978 <_puts_r+0x9c>
 800291a:	4622      	mov	r2, r4
 800291c:	210a      	movs	r1, #10
 800291e:	4628      	mov	r0, r5
 8002920:	f000 fa0b 	bl	8002d3a <__swbuf_r>
 8002924:	3001      	adds	r0, #1
 8002926:	d007      	beq.n	8002938 <_puts_r+0x5c>
 8002928:	250a      	movs	r5, #10
 800292a:	e007      	b.n	800293c <_puts_r+0x60>
 800292c:	4621      	mov	r1, r4
 800292e:	4628      	mov	r0, r5
 8002930:	f000 fa40 	bl	8002db4 <__swsetup_r>
 8002934:	2800      	cmp	r0, #0
 8002936:	d0e7      	beq.n	8002908 <_puts_r+0x2c>
 8002938:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800293c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800293e:	07da      	lsls	r2, r3, #31
 8002940:	d405      	bmi.n	800294e <_puts_r+0x72>
 8002942:	89a3      	ldrh	r3, [r4, #12]
 8002944:	059b      	lsls	r3, r3, #22
 8002946:	d402      	bmi.n	800294e <_puts_r+0x72>
 8002948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800294a:	f000 f857 	bl	80029fc <__retarget_lock_release_recursive>
 800294e:	4628      	mov	r0, r5
 8002950:	bd70      	pop	{r4, r5, r6, pc}
 8002952:	2b00      	cmp	r3, #0
 8002954:	da04      	bge.n	8002960 <_puts_r+0x84>
 8002956:	69a2      	ldr	r2, [r4, #24]
 8002958:	429a      	cmp	r2, r3
 800295a:	dc06      	bgt.n	800296a <_puts_r+0x8e>
 800295c:	290a      	cmp	r1, #10
 800295e:	d004      	beq.n	800296a <_puts_r+0x8e>
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	6022      	str	r2, [r4, #0]
 8002966:	7019      	strb	r1, [r3, #0]
 8002968:	e7cf      	b.n	800290a <_puts_r+0x2e>
 800296a:	4622      	mov	r2, r4
 800296c:	4628      	mov	r0, r5
 800296e:	f000 f9e4 	bl	8002d3a <__swbuf_r>
 8002972:	3001      	adds	r0, #1
 8002974:	d1c9      	bne.n	800290a <_puts_r+0x2e>
 8002976:	e7df      	b.n	8002938 <_puts_r+0x5c>
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	250a      	movs	r5, #10
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	6022      	str	r2, [r4, #0]
 8002980:	701d      	strb	r5, [r3, #0]
 8002982:	e7db      	b.n	800293c <_puts_r+0x60>

08002984 <puts>:
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <puts+0xc>)
 8002986:	4601      	mov	r1, r0
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	f7ff bfa7 	b.w	80028dc <_puts_r>
 800298e:	bf00      	nop
 8002990:	20000064 	.word	0x20000064

08002994 <memset>:
 8002994:	4402      	add	r2, r0
 8002996:	4603      	mov	r3, r0
 8002998:	4293      	cmp	r3, r2
 800299a:	d100      	bne.n	800299e <memset+0xa>
 800299c:	4770      	bx	lr
 800299e:	f803 1b01 	strb.w	r1, [r3], #1
 80029a2:	e7f9      	b.n	8002998 <memset+0x4>

080029a4 <__errno>:
 80029a4:	4b01      	ldr	r3, [pc, #4]	; (80029ac <__errno+0x8>)
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000064 	.word	0x20000064

080029b0 <__libc_init_array>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	4d0d      	ldr	r5, [pc, #52]	; (80029e8 <__libc_init_array+0x38>)
 80029b4:	4c0d      	ldr	r4, [pc, #52]	; (80029ec <__libc_init_array+0x3c>)
 80029b6:	1b64      	subs	r4, r4, r5
 80029b8:	10a4      	asrs	r4, r4, #2
 80029ba:	2600      	movs	r6, #0
 80029bc:	42a6      	cmp	r6, r4
 80029be:	d109      	bne.n	80029d4 <__libc_init_array+0x24>
 80029c0:	4d0b      	ldr	r5, [pc, #44]	; (80029f0 <__libc_init_array+0x40>)
 80029c2:	4c0c      	ldr	r4, [pc, #48]	; (80029f4 <__libc_init_array+0x44>)
 80029c4:	f000 fb74 	bl	80030b0 <_init>
 80029c8:	1b64      	subs	r4, r4, r5
 80029ca:	10a4      	asrs	r4, r4, #2
 80029cc:	2600      	movs	r6, #0
 80029ce:	42a6      	cmp	r6, r4
 80029d0:	d105      	bne.n	80029de <__libc_init_array+0x2e>
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
 80029d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d8:	4798      	blx	r3
 80029da:	3601      	adds	r6, #1
 80029dc:	e7ee      	b.n	80029bc <__libc_init_array+0xc>
 80029de:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e2:	4798      	blx	r3
 80029e4:	3601      	adds	r6, #1
 80029e6:	e7f2      	b.n	80029ce <__libc_init_array+0x1e>
 80029e8:	08003114 	.word	0x08003114
 80029ec:	08003114 	.word	0x08003114
 80029f0:	08003114 	.word	0x08003114
 80029f4:	08003118 	.word	0x08003118

080029f8 <__retarget_lock_init_recursive>:
 80029f8:	4770      	bx	lr

080029fa <__retarget_lock_acquire_recursive>:
 80029fa:	4770      	bx	lr

080029fc <__retarget_lock_release_recursive>:
 80029fc:	4770      	bx	lr
	...

08002a00 <sbrk_aligned>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	4e0e      	ldr	r6, [pc, #56]	; (8002a3c <sbrk_aligned+0x3c>)
 8002a04:	460c      	mov	r4, r1
 8002a06:	6831      	ldr	r1, [r6, #0]
 8002a08:	4605      	mov	r5, r0
 8002a0a:	b911      	cbnz	r1, 8002a12 <sbrk_aligned+0x12>
 8002a0c:	f000 fae2 	bl	8002fd4 <_sbrk_r>
 8002a10:	6030      	str	r0, [r6, #0]
 8002a12:	4621      	mov	r1, r4
 8002a14:	4628      	mov	r0, r5
 8002a16:	f000 fadd 	bl	8002fd4 <_sbrk_r>
 8002a1a:	1c43      	adds	r3, r0, #1
 8002a1c:	d00a      	beq.n	8002a34 <sbrk_aligned+0x34>
 8002a1e:	1cc4      	adds	r4, r0, #3
 8002a20:	f024 0403 	bic.w	r4, r4, #3
 8002a24:	42a0      	cmp	r0, r4
 8002a26:	d007      	beq.n	8002a38 <sbrk_aligned+0x38>
 8002a28:	1a21      	subs	r1, r4, r0
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f000 fad2 	bl	8002fd4 <_sbrk_r>
 8002a30:	3001      	adds	r0, #1
 8002a32:	d101      	bne.n	8002a38 <sbrk_aligned+0x38>
 8002a34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002a38:	4620      	mov	r0, r4
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	20000218 	.word	0x20000218

08002a40 <_malloc_r>:
 8002a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a44:	1ccd      	adds	r5, r1, #3
 8002a46:	f025 0503 	bic.w	r5, r5, #3
 8002a4a:	3508      	adds	r5, #8
 8002a4c:	2d0c      	cmp	r5, #12
 8002a4e:	bf38      	it	cc
 8002a50:	250c      	movcc	r5, #12
 8002a52:	2d00      	cmp	r5, #0
 8002a54:	4607      	mov	r7, r0
 8002a56:	db01      	blt.n	8002a5c <_malloc_r+0x1c>
 8002a58:	42a9      	cmp	r1, r5
 8002a5a:	d905      	bls.n	8002a68 <_malloc_r+0x28>
 8002a5c:	230c      	movs	r3, #12
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	2600      	movs	r6, #0
 8002a62:	4630      	mov	r0, r6
 8002a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b3c <_malloc_r+0xfc>
 8002a6c:	f000 f916 	bl	8002c9c <__malloc_lock>
 8002a70:	f8d8 3000 	ldr.w	r3, [r8]
 8002a74:	461c      	mov	r4, r3
 8002a76:	bb5c      	cbnz	r4, 8002ad0 <_malloc_r+0x90>
 8002a78:	4629      	mov	r1, r5
 8002a7a:	4638      	mov	r0, r7
 8002a7c:	f7ff ffc0 	bl	8002a00 <sbrk_aligned>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	4604      	mov	r4, r0
 8002a84:	d155      	bne.n	8002b32 <_malloc_r+0xf2>
 8002a86:	f8d8 4000 	ldr.w	r4, [r8]
 8002a8a:	4626      	mov	r6, r4
 8002a8c:	2e00      	cmp	r6, #0
 8002a8e:	d145      	bne.n	8002b1c <_malloc_r+0xdc>
 8002a90:	2c00      	cmp	r4, #0
 8002a92:	d048      	beq.n	8002b26 <_malloc_r+0xe6>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	4631      	mov	r1, r6
 8002a98:	4638      	mov	r0, r7
 8002a9a:	eb04 0903 	add.w	r9, r4, r3
 8002a9e:	f000 fa99 	bl	8002fd4 <_sbrk_r>
 8002aa2:	4581      	cmp	r9, r0
 8002aa4:	d13f      	bne.n	8002b26 <_malloc_r+0xe6>
 8002aa6:	6821      	ldr	r1, [r4, #0]
 8002aa8:	1a6d      	subs	r5, r5, r1
 8002aaa:	4629      	mov	r1, r5
 8002aac:	4638      	mov	r0, r7
 8002aae:	f7ff ffa7 	bl	8002a00 <sbrk_aligned>
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	d037      	beq.n	8002b26 <_malloc_r+0xe6>
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	442b      	add	r3, r5
 8002aba:	6023      	str	r3, [r4, #0]
 8002abc:	f8d8 3000 	ldr.w	r3, [r8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d038      	beq.n	8002b36 <_malloc_r+0xf6>
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	42a2      	cmp	r2, r4
 8002ac8:	d12b      	bne.n	8002b22 <_malloc_r+0xe2>
 8002aca:	2200      	movs	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	e00f      	b.n	8002af0 <_malloc_r+0xb0>
 8002ad0:	6822      	ldr	r2, [r4, #0]
 8002ad2:	1b52      	subs	r2, r2, r5
 8002ad4:	d41f      	bmi.n	8002b16 <_malloc_r+0xd6>
 8002ad6:	2a0b      	cmp	r2, #11
 8002ad8:	d917      	bls.n	8002b0a <_malloc_r+0xca>
 8002ada:	1961      	adds	r1, r4, r5
 8002adc:	42a3      	cmp	r3, r4
 8002ade:	6025      	str	r5, [r4, #0]
 8002ae0:	bf18      	it	ne
 8002ae2:	6059      	strne	r1, [r3, #4]
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	bf08      	it	eq
 8002ae8:	f8c8 1000 	streq.w	r1, [r8]
 8002aec:	5162      	str	r2, [r4, r5]
 8002aee:	604b      	str	r3, [r1, #4]
 8002af0:	4638      	mov	r0, r7
 8002af2:	f104 060b 	add.w	r6, r4, #11
 8002af6:	f000 f8d7 	bl	8002ca8 <__malloc_unlock>
 8002afa:	f026 0607 	bic.w	r6, r6, #7
 8002afe:	1d23      	adds	r3, r4, #4
 8002b00:	1af2      	subs	r2, r6, r3
 8002b02:	d0ae      	beq.n	8002a62 <_malloc_r+0x22>
 8002b04:	1b9b      	subs	r3, r3, r6
 8002b06:	50a3      	str	r3, [r4, r2]
 8002b08:	e7ab      	b.n	8002a62 <_malloc_r+0x22>
 8002b0a:	42a3      	cmp	r3, r4
 8002b0c:	6862      	ldr	r2, [r4, #4]
 8002b0e:	d1dd      	bne.n	8002acc <_malloc_r+0x8c>
 8002b10:	f8c8 2000 	str.w	r2, [r8]
 8002b14:	e7ec      	b.n	8002af0 <_malloc_r+0xb0>
 8002b16:	4623      	mov	r3, r4
 8002b18:	6864      	ldr	r4, [r4, #4]
 8002b1a:	e7ac      	b.n	8002a76 <_malloc_r+0x36>
 8002b1c:	4634      	mov	r4, r6
 8002b1e:	6876      	ldr	r6, [r6, #4]
 8002b20:	e7b4      	b.n	8002a8c <_malloc_r+0x4c>
 8002b22:	4613      	mov	r3, r2
 8002b24:	e7cc      	b.n	8002ac0 <_malloc_r+0x80>
 8002b26:	230c      	movs	r3, #12
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4638      	mov	r0, r7
 8002b2c:	f000 f8bc 	bl	8002ca8 <__malloc_unlock>
 8002b30:	e797      	b.n	8002a62 <_malloc_r+0x22>
 8002b32:	6025      	str	r5, [r4, #0]
 8002b34:	e7dc      	b.n	8002af0 <_malloc_r+0xb0>
 8002b36:	605b      	str	r3, [r3, #4]
 8002b38:	deff      	udf	#255	; 0xff
 8002b3a:	bf00      	nop
 8002b3c:	20000214 	.word	0x20000214

08002b40 <__sflush_r>:
 8002b40:	898a      	ldrh	r2, [r1, #12]
 8002b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b46:	4605      	mov	r5, r0
 8002b48:	0710      	lsls	r0, r2, #28
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	d458      	bmi.n	8002c00 <__sflush_r+0xc0>
 8002b4e:	684b      	ldr	r3, [r1, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	dc05      	bgt.n	8002b60 <__sflush_r+0x20>
 8002b54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	dc02      	bgt.n	8002b60 <__sflush_r+0x20>
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b62:	2e00      	cmp	r6, #0
 8002b64:	d0f9      	beq.n	8002b5a <__sflush_r+0x1a>
 8002b66:	2300      	movs	r3, #0
 8002b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b6c:	682f      	ldr	r7, [r5, #0]
 8002b6e:	6a21      	ldr	r1, [r4, #32]
 8002b70:	602b      	str	r3, [r5, #0]
 8002b72:	d032      	beq.n	8002bda <__sflush_r+0x9a>
 8002b74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b76:	89a3      	ldrh	r3, [r4, #12]
 8002b78:	075a      	lsls	r2, r3, #29
 8002b7a:	d505      	bpl.n	8002b88 <__sflush_r+0x48>
 8002b7c:	6863      	ldr	r3, [r4, #4]
 8002b7e:	1ac0      	subs	r0, r0, r3
 8002b80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b82:	b10b      	cbz	r3, 8002b88 <__sflush_r+0x48>
 8002b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b86:	1ac0      	subs	r0, r0, r3
 8002b88:	2300      	movs	r3, #0
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b8e:	6a21      	ldr	r1, [r4, #32]
 8002b90:	4628      	mov	r0, r5
 8002b92:	47b0      	blx	r6
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	89a3      	ldrh	r3, [r4, #12]
 8002b98:	d106      	bne.n	8002ba8 <__sflush_r+0x68>
 8002b9a:	6829      	ldr	r1, [r5, #0]
 8002b9c:	291d      	cmp	r1, #29
 8002b9e:	d82b      	bhi.n	8002bf8 <__sflush_r+0xb8>
 8002ba0:	4a29      	ldr	r2, [pc, #164]	; (8002c48 <__sflush_r+0x108>)
 8002ba2:	410a      	asrs	r2, r1
 8002ba4:	07d6      	lsls	r6, r2, #31
 8002ba6:	d427      	bmi.n	8002bf8 <__sflush_r+0xb8>
 8002ba8:	2200      	movs	r2, #0
 8002baa:	6062      	str	r2, [r4, #4]
 8002bac:	04d9      	lsls	r1, r3, #19
 8002bae:	6922      	ldr	r2, [r4, #16]
 8002bb0:	6022      	str	r2, [r4, #0]
 8002bb2:	d504      	bpl.n	8002bbe <__sflush_r+0x7e>
 8002bb4:	1c42      	adds	r2, r0, #1
 8002bb6:	d101      	bne.n	8002bbc <__sflush_r+0x7c>
 8002bb8:	682b      	ldr	r3, [r5, #0]
 8002bba:	b903      	cbnz	r3, 8002bbe <__sflush_r+0x7e>
 8002bbc:	6560      	str	r0, [r4, #84]	; 0x54
 8002bbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bc0:	602f      	str	r7, [r5, #0]
 8002bc2:	2900      	cmp	r1, #0
 8002bc4:	d0c9      	beq.n	8002b5a <__sflush_r+0x1a>
 8002bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bca:	4299      	cmp	r1, r3
 8002bcc:	d002      	beq.n	8002bd4 <__sflush_r+0x94>
 8002bce:	4628      	mov	r0, r5
 8002bd0:	f000 fa22 	bl	8003018 <_free_r>
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	6360      	str	r0, [r4, #52]	; 0x34
 8002bd8:	e7c0      	b.n	8002b5c <__sflush_r+0x1c>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	4628      	mov	r0, r5
 8002bde:	47b0      	blx	r6
 8002be0:	1c41      	adds	r1, r0, #1
 8002be2:	d1c8      	bne.n	8002b76 <__sflush_r+0x36>
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0c5      	beq.n	8002b76 <__sflush_r+0x36>
 8002bea:	2b1d      	cmp	r3, #29
 8002bec:	d001      	beq.n	8002bf2 <__sflush_r+0xb2>
 8002bee:	2b16      	cmp	r3, #22
 8002bf0:	d101      	bne.n	8002bf6 <__sflush_r+0xb6>
 8002bf2:	602f      	str	r7, [r5, #0]
 8002bf4:	e7b1      	b.n	8002b5a <__sflush_r+0x1a>
 8002bf6:	89a3      	ldrh	r3, [r4, #12]
 8002bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfc:	81a3      	strh	r3, [r4, #12]
 8002bfe:	e7ad      	b.n	8002b5c <__sflush_r+0x1c>
 8002c00:	690f      	ldr	r7, [r1, #16]
 8002c02:	2f00      	cmp	r7, #0
 8002c04:	d0a9      	beq.n	8002b5a <__sflush_r+0x1a>
 8002c06:	0793      	lsls	r3, r2, #30
 8002c08:	680e      	ldr	r6, [r1, #0]
 8002c0a:	bf08      	it	eq
 8002c0c:	694b      	ldreq	r3, [r1, #20]
 8002c0e:	600f      	str	r7, [r1, #0]
 8002c10:	bf18      	it	ne
 8002c12:	2300      	movne	r3, #0
 8002c14:	eba6 0807 	sub.w	r8, r6, r7
 8002c18:	608b      	str	r3, [r1, #8]
 8002c1a:	f1b8 0f00 	cmp.w	r8, #0
 8002c1e:	dd9c      	ble.n	8002b5a <__sflush_r+0x1a>
 8002c20:	6a21      	ldr	r1, [r4, #32]
 8002c22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c24:	4643      	mov	r3, r8
 8002c26:	463a      	mov	r2, r7
 8002c28:	4628      	mov	r0, r5
 8002c2a:	47b0      	blx	r6
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	dc06      	bgt.n	8002c3e <__sflush_r+0xfe>
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c3c:	e78e      	b.n	8002b5c <__sflush_r+0x1c>
 8002c3e:	4407      	add	r7, r0
 8002c40:	eba8 0800 	sub.w	r8, r8, r0
 8002c44:	e7e9      	b.n	8002c1a <__sflush_r+0xda>
 8002c46:	bf00      	nop
 8002c48:	dfbffffe 	.word	0xdfbffffe

08002c4c <_fflush_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	690b      	ldr	r3, [r1, #16]
 8002c50:	4605      	mov	r5, r0
 8002c52:	460c      	mov	r4, r1
 8002c54:	b913      	cbnz	r3, 8002c5c <_fflush_r+0x10>
 8002c56:	2500      	movs	r5, #0
 8002c58:	4628      	mov	r0, r5
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	b118      	cbz	r0, 8002c66 <_fflush_r+0x1a>
 8002c5e:	6a03      	ldr	r3, [r0, #32]
 8002c60:	b90b      	cbnz	r3, 8002c66 <_fflush_r+0x1a>
 8002c62:	f7ff fe05 	bl	8002870 <__sinit>
 8002c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f3      	beq.n	8002c56 <_fflush_r+0xa>
 8002c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c70:	07d0      	lsls	r0, r2, #31
 8002c72:	d404      	bmi.n	8002c7e <_fflush_r+0x32>
 8002c74:	0599      	lsls	r1, r3, #22
 8002c76:	d402      	bmi.n	8002c7e <_fflush_r+0x32>
 8002c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c7a:	f7ff febe 	bl	80029fa <__retarget_lock_acquire_recursive>
 8002c7e:	4628      	mov	r0, r5
 8002c80:	4621      	mov	r1, r4
 8002c82:	f7ff ff5d 	bl	8002b40 <__sflush_r>
 8002c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c88:	07da      	lsls	r2, r3, #31
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	d4e4      	bmi.n	8002c58 <_fflush_r+0xc>
 8002c8e:	89a3      	ldrh	r3, [r4, #12]
 8002c90:	059b      	lsls	r3, r3, #22
 8002c92:	d4e1      	bmi.n	8002c58 <_fflush_r+0xc>
 8002c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c96:	f7ff feb1 	bl	80029fc <__retarget_lock_release_recursive>
 8002c9a:	e7dd      	b.n	8002c58 <_fflush_r+0xc>

08002c9c <__malloc_lock>:
 8002c9c:	4801      	ldr	r0, [pc, #4]	; (8002ca4 <__malloc_lock+0x8>)
 8002c9e:	f7ff beac 	b.w	80029fa <__retarget_lock_acquire_recursive>
 8002ca2:	bf00      	nop
 8002ca4:	20000210 	.word	0x20000210

08002ca8 <__malloc_unlock>:
 8002ca8:	4801      	ldr	r0, [pc, #4]	; (8002cb0 <__malloc_unlock+0x8>)
 8002caa:	f7ff bea7 	b.w	80029fc <__retarget_lock_release_recursive>
 8002cae:	bf00      	nop
 8002cb0:	20000210 	.word	0x20000210

08002cb4 <__sread>:
 8002cb4:	b510      	push	{r4, lr}
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cbc:	f000 f978 	bl	8002fb0 <_read_r>
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	bfab      	itete	ge
 8002cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8002cc8:	181b      	addge	r3, r3, r0
 8002cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002cce:	bfac      	ite	ge
 8002cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002cd2:	81a3      	strhlt	r3, [r4, #12]
 8002cd4:	bd10      	pop	{r4, pc}

08002cd6 <__swrite>:
 8002cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cda:	461f      	mov	r7, r3
 8002cdc:	898b      	ldrh	r3, [r1, #12]
 8002cde:	05db      	lsls	r3, r3, #23
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	4616      	mov	r6, r2
 8002ce6:	d505      	bpl.n	8002cf4 <__swrite+0x1e>
 8002ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cec:	2302      	movs	r3, #2
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f000 f94c 	bl	8002f8c <_lseek_r>
 8002cf4:	89a3      	ldrh	r3, [r4, #12]
 8002cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cfe:	81a3      	strh	r3, [r4, #12]
 8002d00:	4632      	mov	r2, r6
 8002d02:	463b      	mov	r3, r7
 8002d04:	4628      	mov	r0, r5
 8002d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0a:	f000 b973 	b.w	8002ff4 <_write_r>

08002d0e <__sseek>:
 8002d0e:	b510      	push	{r4, lr}
 8002d10:	460c      	mov	r4, r1
 8002d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d16:	f000 f939 	bl	8002f8c <_lseek_r>
 8002d1a:	1c43      	adds	r3, r0, #1
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	bf15      	itete	ne
 8002d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d2a:	81a3      	strheq	r3, [r4, #12]
 8002d2c:	bf18      	it	ne
 8002d2e:	81a3      	strhne	r3, [r4, #12]
 8002d30:	bd10      	pop	{r4, pc}

08002d32 <__sclose>:
 8002d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d36:	f000 b8f7 	b.w	8002f28 <_close_r>

08002d3a <__swbuf_r>:
 8002d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3c:	460e      	mov	r6, r1
 8002d3e:	4614      	mov	r4, r2
 8002d40:	4605      	mov	r5, r0
 8002d42:	b118      	cbz	r0, 8002d4c <__swbuf_r+0x12>
 8002d44:	6a03      	ldr	r3, [r0, #32]
 8002d46:	b90b      	cbnz	r3, 8002d4c <__swbuf_r+0x12>
 8002d48:	f7ff fd92 	bl	8002870 <__sinit>
 8002d4c:	69a3      	ldr	r3, [r4, #24]
 8002d4e:	60a3      	str	r3, [r4, #8]
 8002d50:	89a3      	ldrh	r3, [r4, #12]
 8002d52:	071a      	lsls	r2, r3, #28
 8002d54:	d525      	bpl.n	8002da2 <__swbuf_r+0x68>
 8002d56:	6923      	ldr	r3, [r4, #16]
 8002d58:	b31b      	cbz	r3, 8002da2 <__swbuf_r+0x68>
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	6922      	ldr	r2, [r4, #16]
 8002d5e:	1a98      	subs	r0, r3, r2
 8002d60:	6963      	ldr	r3, [r4, #20]
 8002d62:	b2f6      	uxtb	r6, r6
 8002d64:	4283      	cmp	r3, r0
 8002d66:	4637      	mov	r7, r6
 8002d68:	dc04      	bgt.n	8002d74 <__swbuf_r+0x3a>
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f7ff ff6d 	bl	8002c4c <_fflush_r>
 8002d72:	b9e0      	cbnz	r0, 8002dae <__swbuf_r+0x74>
 8002d74:	68a3      	ldr	r3, [r4, #8]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60a3      	str	r3, [r4, #8]
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	6022      	str	r2, [r4, #0]
 8002d80:	701e      	strb	r6, [r3, #0]
 8002d82:	6962      	ldr	r2, [r4, #20]
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d004      	beq.n	8002d94 <__swbuf_r+0x5a>
 8002d8a:	89a3      	ldrh	r3, [r4, #12]
 8002d8c:	07db      	lsls	r3, r3, #31
 8002d8e:	d506      	bpl.n	8002d9e <__swbuf_r+0x64>
 8002d90:	2e0a      	cmp	r6, #10
 8002d92:	d104      	bne.n	8002d9e <__swbuf_r+0x64>
 8002d94:	4621      	mov	r1, r4
 8002d96:	4628      	mov	r0, r5
 8002d98:	f7ff ff58 	bl	8002c4c <_fflush_r>
 8002d9c:	b938      	cbnz	r0, 8002dae <__swbuf_r+0x74>
 8002d9e:	4638      	mov	r0, r7
 8002da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002da2:	4621      	mov	r1, r4
 8002da4:	4628      	mov	r0, r5
 8002da6:	f000 f805 	bl	8002db4 <__swsetup_r>
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d0d5      	beq.n	8002d5a <__swbuf_r+0x20>
 8002dae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002db2:	e7f4      	b.n	8002d9e <__swbuf_r+0x64>

08002db4 <__swsetup_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <__swsetup_r+0xac>)
 8002db8:	4605      	mov	r5, r0
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	b118      	cbz	r0, 8002dc8 <__swsetup_r+0x14>
 8002dc0:	6a03      	ldr	r3, [r0, #32]
 8002dc2:	b90b      	cbnz	r3, 8002dc8 <__swsetup_r+0x14>
 8002dc4:	f7ff fd54 	bl	8002870 <__sinit>
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dce:	0718      	lsls	r0, r3, #28
 8002dd0:	d422      	bmi.n	8002e18 <__swsetup_r+0x64>
 8002dd2:	06d9      	lsls	r1, r3, #27
 8002dd4:	d407      	bmi.n	8002de6 <__swsetup_r+0x32>
 8002dd6:	2309      	movs	r3, #9
 8002dd8:	602b      	str	r3, [r5, #0]
 8002dda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002dde:	81a3      	strh	r3, [r4, #12]
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002de4:	e034      	b.n	8002e50 <__swsetup_r+0x9c>
 8002de6:	0758      	lsls	r0, r3, #29
 8002de8:	d512      	bpl.n	8002e10 <__swsetup_r+0x5c>
 8002dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dec:	b141      	cbz	r1, 8002e00 <__swsetup_r+0x4c>
 8002dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002df2:	4299      	cmp	r1, r3
 8002df4:	d002      	beq.n	8002dfc <__swsetup_r+0x48>
 8002df6:	4628      	mov	r0, r5
 8002df8:	f000 f90e 	bl	8003018 <_free_r>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	6363      	str	r3, [r4, #52]	; 0x34
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	6063      	str	r3, [r4, #4]
 8002e0c:	6923      	ldr	r3, [r4, #16]
 8002e0e:	6023      	str	r3, [r4, #0]
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	f043 0308 	orr.w	r3, r3, #8
 8002e16:	81a3      	strh	r3, [r4, #12]
 8002e18:	6923      	ldr	r3, [r4, #16]
 8002e1a:	b94b      	cbnz	r3, 8002e30 <__swsetup_r+0x7c>
 8002e1c:	89a3      	ldrh	r3, [r4, #12]
 8002e1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e26:	d003      	beq.n	8002e30 <__swsetup_r+0x7c>
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f000 f840 	bl	8002eb0 <__smakebuf_r>
 8002e30:	89a0      	ldrh	r0, [r4, #12]
 8002e32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e36:	f010 0301 	ands.w	r3, r0, #1
 8002e3a:	d00a      	beq.n	8002e52 <__swsetup_r+0x9e>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60a3      	str	r3, [r4, #8]
 8002e40:	6963      	ldr	r3, [r4, #20]
 8002e42:	425b      	negs	r3, r3
 8002e44:	61a3      	str	r3, [r4, #24]
 8002e46:	6923      	ldr	r3, [r4, #16]
 8002e48:	b943      	cbnz	r3, 8002e5c <__swsetup_r+0xa8>
 8002e4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e4e:	d1c4      	bne.n	8002dda <__swsetup_r+0x26>
 8002e50:	bd38      	pop	{r3, r4, r5, pc}
 8002e52:	0781      	lsls	r1, r0, #30
 8002e54:	bf58      	it	pl
 8002e56:	6963      	ldrpl	r3, [r4, #20]
 8002e58:	60a3      	str	r3, [r4, #8]
 8002e5a:	e7f4      	b.n	8002e46 <__swsetup_r+0x92>
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	e7f7      	b.n	8002e50 <__swsetup_r+0x9c>
 8002e60:	20000064 	.word	0x20000064

08002e64 <__swhatbuf_r>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	460c      	mov	r4, r1
 8002e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e6c:	2900      	cmp	r1, #0
 8002e6e:	b096      	sub	sp, #88	; 0x58
 8002e70:	4615      	mov	r5, r2
 8002e72:	461e      	mov	r6, r3
 8002e74:	da0d      	bge.n	8002e92 <__swhatbuf_r+0x2e>
 8002e76:	89a3      	ldrh	r3, [r4, #12]
 8002e78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	bf0c      	ite	eq
 8002e82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002e86:	2340      	movne	r3, #64	; 0x40
 8002e88:	2000      	movs	r0, #0
 8002e8a:	6031      	str	r1, [r6, #0]
 8002e8c:	602b      	str	r3, [r5, #0]
 8002e8e:	b016      	add	sp, #88	; 0x58
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
 8002e92:	466a      	mov	r2, sp
 8002e94:	f000 f858 	bl	8002f48 <_fstat_r>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	dbec      	blt.n	8002e76 <__swhatbuf_r+0x12>
 8002e9c:	9901      	ldr	r1, [sp, #4]
 8002e9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002ea2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002ea6:	4259      	negs	r1, r3
 8002ea8:	4159      	adcs	r1, r3
 8002eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eae:	e7eb      	b.n	8002e88 <__swhatbuf_r+0x24>

08002eb0 <__smakebuf_r>:
 8002eb0:	898b      	ldrh	r3, [r1, #12]
 8002eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002eb4:	079d      	lsls	r5, r3, #30
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	460c      	mov	r4, r1
 8002eba:	d507      	bpl.n	8002ecc <__smakebuf_r+0x1c>
 8002ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	6123      	str	r3, [r4, #16]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	6163      	str	r3, [r4, #20]
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	ab01      	add	r3, sp, #4
 8002ece:	466a      	mov	r2, sp
 8002ed0:	f7ff ffc8 	bl	8002e64 <__swhatbuf_r>
 8002ed4:	9900      	ldr	r1, [sp, #0]
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	4630      	mov	r0, r6
 8002eda:	f7ff fdb1 	bl	8002a40 <_malloc_r>
 8002ede:	b948      	cbnz	r0, 8002ef4 <__smakebuf_r+0x44>
 8002ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee4:	059a      	lsls	r2, r3, #22
 8002ee6:	d4ef      	bmi.n	8002ec8 <__smakebuf_r+0x18>
 8002ee8:	f023 0303 	bic.w	r3, r3, #3
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	e7e3      	b.n	8002ebc <__smakebuf_r+0xc>
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	6020      	str	r0, [r4, #0]
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	9b00      	ldr	r3, [sp, #0]
 8002f00:	6163      	str	r3, [r4, #20]
 8002f02:	9b01      	ldr	r3, [sp, #4]
 8002f04:	6120      	str	r0, [r4, #16]
 8002f06:	b15b      	cbz	r3, 8002f20 <__smakebuf_r+0x70>
 8002f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f000 f82d 	bl	8002f6c <_isatty_r>
 8002f12:	b128      	cbz	r0, 8002f20 <__smakebuf_r+0x70>
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	f023 0303 	bic.w	r3, r3, #3
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	81a3      	strh	r3, [r4, #12]
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	431d      	orrs	r5, r3
 8002f24:	81a5      	strh	r5, [r4, #12]
 8002f26:	e7cf      	b.n	8002ec8 <__smakebuf_r+0x18>

08002f28 <_close_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	4d06      	ldr	r5, [pc, #24]	; (8002f44 <_close_r+0x1c>)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	4604      	mov	r4, r0
 8002f30:	4608      	mov	r0, r1
 8002f32:	602b      	str	r3, [r5, #0]
 8002f34:	f7fd fd1d 	bl	8000972 <_close>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d102      	bne.n	8002f42 <_close_r+0x1a>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	b103      	cbz	r3, 8002f42 <_close_r+0x1a>
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	2000021c 	.word	0x2000021c

08002f48 <_fstat_r>:
 8002f48:	b538      	push	{r3, r4, r5, lr}
 8002f4a:	4d07      	ldr	r5, [pc, #28]	; (8002f68 <_fstat_r+0x20>)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4608      	mov	r0, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	602b      	str	r3, [r5, #0]
 8002f56:	f7fd fd18 	bl	800098a <_fstat>
 8002f5a:	1c43      	adds	r3, r0, #1
 8002f5c:	d102      	bne.n	8002f64 <_fstat_r+0x1c>
 8002f5e:	682b      	ldr	r3, [r5, #0]
 8002f60:	b103      	cbz	r3, 8002f64 <_fstat_r+0x1c>
 8002f62:	6023      	str	r3, [r4, #0]
 8002f64:	bd38      	pop	{r3, r4, r5, pc}
 8002f66:	bf00      	nop
 8002f68:	2000021c 	.word	0x2000021c

08002f6c <_isatty_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4d06      	ldr	r5, [pc, #24]	; (8002f88 <_isatty_r+0x1c>)
 8002f70:	2300      	movs	r3, #0
 8002f72:	4604      	mov	r4, r0
 8002f74:	4608      	mov	r0, r1
 8002f76:	602b      	str	r3, [r5, #0]
 8002f78:	f7fd fd17 	bl	80009aa <_isatty>
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	d102      	bne.n	8002f86 <_isatty_r+0x1a>
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	b103      	cbz	r3, 8002f86 <_isatty_r+0x1a>
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	2000021c 	.word	0x2000021c

08002f8c <_lseek_r>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4d07      	ldr	r5, [pc, #28]	; (8002fac <_lseek_r+0x20>)
 8002f90:	4604      	mov	r4, r0
 8002f92:	4608      	mov	r0, r1
 8002f94:	4611      	mov	r1, r2
 8002f96:	2200      	movs	r2, #0
 8002f98:	602a      	str	r2, [r5, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f7fd fd10 	bl	80009c0 <_lseek>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d102      	bne.n	8002faa <_lseek_r+0x1e>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	b103      	cbz	r3, 8002faa <_lseek_r+0x1e>
 8002fa8:	6023      	str	r3, [r4, #0]
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	2000021c 	.word	0x2000021c

08002fb0 <_read_r>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4d07      	ldr	r5, [pc, #28]	; (8002fd0 <_read_r+0x20>)
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	4608      	mov	r0, r1
 8002fb8:	4611      	mov	r1, r2
 8002fba:	2200      	movs	r2, #0
 8002fbc:	602a      	str	r2, [r5, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f7fd fc9e 	bl	8000900 <_read>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d102      	bne.n	8002fce <_read_r+0x1e>
 8002fc8:	682b      	ldr	r3, [r5, #0]
 8002fca:	b103      	cbz	r3, 8002fce <_read_r+0x1e>
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
 8002fd0:	2000021c 	.word	0x2000021c

08002fd4 <_sbrk_r>:
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	4d06      	ldr	r5, [pc, #24]	; (8002ff0 <_sbrk_r+0x1c>)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	602b      	str	r3, [r5, #0]
 8002fe0:	f7fd fcfc 	bl	80009dc <_sbrk>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d102      	bne.n	8002fee <_sbrk_r+0x1a>
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	b103      	cbz	r3, 8002fee <_sbrk_r+0x1a>
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	2000021c 	.word	0x2000021c

08002ff4 <_write_r>:
 8002ff4:	b538      	push	{r3, r4, r5, lr}
 8002ff6:	4d07      	ldr	r5, [pc, #28]	; (8003014 <_write_r+0x20>)
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	4608      	mov	r0, r1
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	2200      	movs	r2, #0
 8003000:	602a      	str	r2, [r5, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	f7fd fc99 	bl	800093a <_write>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	d102      	bne.n	8003012 <_write_r+0x1e>
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	b103      	cbz	r3, 8003012 <_write_r+0x1e>
 8003010:	6023      	str	r3, [r4, #0]
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	2000021c 	.word	0x2000021c

08003018 <_free_r>:
 8003018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800301a:	2900      	cmp	r1, #0
 800301c:	d044      	beq.n	80030a8 <_free_r+0x90>
 800301e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003022:	9001      	str	r0, [sp, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f1a1 0404 	sub.w	r4, r1, #4
 800302a:	bfb8      	it	lt
 800302c:	18e4      	addlt	r4, r4, r3
 800302e:	f7ff fe35 	bl	8002c9c <__malloc_lock>
 8003032:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <_free_r+0x94>)
 8003034:	9801      	ldr	r0, [sp, #4]
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	b933      	cbnz	r3, 8003048 <_free_r+0x30>
 800303a:	6063      	str	r3, [r4, #4]
 800303c:	6014      	str	r4, [r2, #0]
 800303e:	b003      	add	sp, #12
 8003040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003044:	f7ff be30 	b.w	8002ca8 <__malloc_unlock>
 8003048:	42a3      	cmp	r3, r4
 800304a:	d908      	bls.n	800305e <_free_r+0x46>
 800304c:	6825      	ldr	r5, [r4, #0]
 800304e:	1961      	adds	r1, r4, r5
 8003050:	428b      	cmp	r3, r1
 8003052:	bf01      	itttt	eq
 8003054:	6819      	ldreq	r1, [r3, #0]
 8003056:	685b      	ldreq	r3, [r3, #4]
 8003058:	1949      	addeq	r1, r1, r5
 800305a:	6021      	streq	r1, [r4, #0]
 800305c:	e7ed      	b.n	800303a <_free_r+0x22>
 800305e:	461a      	mov	r2, r3
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b10b      	cbz	r3, 8003068 <_free_r+0x50>
 8003064:	42a3      	cmp	r3, r4
 8003066:	d9fa      	bls.n	800305e <_free_r+0x46>
 8003068:	6811      	ldr	r1, [r2, #0]
 800306a:	1855      	adds	r5, r2, r1
 800306c:	42a5      	cmp	r5, r4
 800306e:	d10b      	bne.n	8003088 <_free_r+0x70>
 8003070:	6824      	ldr	r4, [r4, #0]
 8003072:	4421      	add	r1, r4
 8003074:	1854      	adds	r4, r2, r1
 8003076:	42a3      	cmp	r3, r4
 8003078:	6011      	str	r1, [r2, #0]
 800307a:	d1e0      	bne.n	800303e <_free_r+0x26>
 800307c:	681c      	ldr	r4, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	6053      	str	r3, [r2, #4]
 8003082:	440c      	add	r4, r1
 8003084:	6014      	str	r4, [r2, #0]
 8003086:	e7da      	b.n	800303e <_free_r+0x26>
 8003088:	d902      	bls.n	8003090 <_free_r+0x78>
 800308a:	230c      	movs	r3, #12
 800308c:	6003      	str	r3, [r0, #0]
 800308e:	e7d6      	b.n	800303e <_free_r+0x26>
 8003090:	6825      	ldr	r5, [r4, #0]
 8003092:	1961      	adds	r1, r4, r5
 8003094:	428b      	cmp	r3, r1
 8003096:	bf04      	itt	eq
 8003098:	6819      	ldreq	r1, [r3, #0]
 800309a:	685b      	ldreq	r3, [r3, #4]
 800309c:	6063      	str	r3, [r4, #4]
 800309e:	bf04      	itt	eq
 80030a0:	1949      	addeq	r1, r1, r5
 80030a2:	6021      	streq	r1, [r4, #0]
 80030a4:	6054      	str	r4, [r2, #4]
 80030a6:	e7ca      	b.n	800303e <_free_r+0x26>
 80030a8:	b003      	add	sp, #12
 80030aa:	bd30      	pop	{r4, r5, pc}
 80030ac:	20000214 	.word	0x20000214

080030b0 <_init>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr

080030bc <_fini>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	bf00      	nop
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr


BMS_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005628  08005628  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005630  08005630  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  20000068  080056a0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  080056a0  00020a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcb3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000231b  00000000  00000000  0002bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ea  00000000  00000000  0002eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232a4  00000000  00000000  0002f312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dae4  00000000  00000000  000525b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0bd0  00000000  00000000  0006009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003130  00000000  00000000  00130c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00133d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005020 	.word	0x08005020

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005020 	.word	0x08005020

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005c0:	b092      	sub	sp, #72	; 0x48
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 feda 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f8dc 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f9e4 	bl	8000998 <MX_GPIO_Init>
  MX_UART5_Init();
 80005d0:	f000 f9b8 	bl	8000944 <MX_UART5_Init>
  MX_RTC_Init();
 80005d4:	f000 f95c 	bl	8000890 <MX_RTC_Init>
  MX_CRC_Init();
 80005d8:	f000 f946 	bl	8000868 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  uint32_t magic_value = *(__IO uint32_t*)OTA_CONFIG_SECTOR;
 80005dc:	4b61      	ldr	r3, [pc, #388]	; (8000764 <main+0x1a8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (magic_value == OTA_MAGIC_VALUE) {  // Check for magic value in config sector indicating an OTA update was requested
 80005e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e4:	4a60      	ldr	r2, [pc, #384]	; (8000768 <main+0x1ac>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	f040 80b8 	bne.w	800075c <main+0x1a0>
      // Clear the magic value to prevent repeated OTA updates
      HAL_FLASH_Unlock();
 80005ec:	f001 f8de 	bl	80017ac <HAL_FLASH_Unlock>
      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80005f0:	4b5e      	ldr	r3, [pc, #376]	; (800076c <main+0x1b0>)
 80005f2:	22f3      	movs	r2, #243	; 0xf3
 80005f4:	60da      	str	r2, [r3, #12]
      FLASH_Erase_Sector(FLASH_SECTOR_2, VOLTAGE_RANGE_3);
 80005f6:	2102      	movs	r1, #2
 80005f8:	2002      	movs	r0, #2
 80005fa:	f001 fadd 	bl	8001bb8 <FLASH_Erase_Sector>
      HAL_FLASH_Lock();
 80005fe:	f001 f8f7 	bl	80017f0 <HAL_FLASH_Lock>

      // Initiate the OTA update process
      runOtaUpdate();
 8000602:	f000 fa97 	bl	8000b34 <runOtaUpdate>

      // If OTA_Update() does not reset the system, you can add a reset here
      HAL_StatusTypeDef ret;

      // Unlock the Flash memory for write access
      ret = HAL_FLASH_Unlock();
 8000606:	f001 f8d1 	bl	80017ac <HAL_FLASH_Unlock>
 800060a:	4603      	mov	r3, r0
 800060c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      if (ret != HAL_OK) {
 8000610:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01e      	beq.n	8000656 <main+0x9a>
    	  char msg[] = "Error unlocking flash while attempting OTA update!";
 8000618:	4b55      	ldr	r3, [pc, #340]	; (8000770 <main+0x1b4>)
 800061a:	463c      	mov	r4, r7
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	682b      	ldr	r3, [r5, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	8022      	strh	r2, [r4, #0]
 8000630:	3402      	adds	r4, #2
 8000632:	0c1b      	lsrs	r3, r3, #16
 8000634:	7023      	strb	r3, [r4, #0]
    	  HAL_UART_Transmit(&huart5, (uint8_t*) msg, strlen(msg) + 1, HAL_MAX_DELAY);
 8000636:	463b      	mov	r3, r7
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fde9 	bl	8000210 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29b      	uxth	r3, r3
 8000642:	3301      	adds	r3, #1
 8000644:	b29a      	uxth	r2, r3
 8000646:	4639      	mov	r1, r7
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064c:	4849      	ldr	r0, [pc, #292]	; (8000774 <main+0x1b8>)
 800064e:	f003 f905 	bl	800385c <HAL_UART_Transmit>
    	  Error_Handler();
 8000652:	f000 fa3b 	bl	8000acc <Error_Handler>
      }

      // Clear any existing flags
      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8000656:	4b45      	ldr	r3, [pc, #276]	; (800076c <main+0x1b0>)
 8000658:	22f3      	movs	r2, #243	; 0xf3
 800065a:	60da      	str	r2, [r3, #12]

      // Erase the specific sector where the magic value is stored
      FLASH_Erase_Sector(FLASH_SECTOR_2, VOLTAGE_RANGE_3);
 800065c:	2102      	movs	r1, #2
 800065e:	2002      	movs	r0, #2
 8000660:	f001 faaa 	bl	8001bb8 <FLASH_Erase_Sector>
      if (ret != HAL_OK) {
 8000664:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000668:	2b00      	cmp	r3, #0
 800066a:	d01e      	beq.n	80006aa <main+0xee>
    	  char msg[] = "Error erasing config sector while attempting OTA update!";
 800066c:	4b42      	ldr	r3, [pc, #264]	; (8000778 <main+0x1bc>)
 800066e:	463c      	mov	r4, r7
 8000670:	461d      	mov	r5, r3
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000682:	c403      	stmia	r4!, {r0, r1}
 8000684:	7022      	strb	r2, [r4, #0]
    	  HAL_UART_Transmit(&huart5, (uint8_t*) msg, strlen(msg) + 1, HAL_MAX_DELAY);
 8000686:	463b      	mov	r3, r7
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fdc1 	bl	8000210 <strlen>
 800068e:	4603      	mov	r3, r0
 8000690:	b29b      	uxth	r3, r3
 8000692:	3301      	adds	r3, #1
 8000694:	b29a      	uxth	r2, r3
 8000696:	4639      	mov	r1, r7
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069c:	4835      	ldr	r0, [pc, #212]	; (8000774 <main+0x1b8>)
 800069e:	f003 f8dd 	bl	800385c <HAL_UART_Transmit>
          HAL_FLASH_Lock();
 80006a2:	f001 f8a5 	bl	80017f0 <HAL_FLASH_Lock>
          Error_Handler();
 80006a6:	f000 fa11 	bl	8000acc <Error_Handler>
      }

      // write a different value to the address to explicitly clear it
      uint32_t clear_value = 0xFFFFFFFF;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      ret = HAL_FLASH_Program(TYPEPROGRAM_WORD, OTA_CONFIG_SECTOR, clear_value);
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2200      	movs	r2, #0
 80006b4:	4698      	mov	r8, r3
 80006b6:	4691      	mov	r9, r2
 80006b8:	4642      	mov	r2, r8
 80006ba:	464b      	mov	r3, r9
 80006bc:	4929      	ldr	r1, [pc, #164]	; (8000764 <main+0x1a8>)
 80006be:	2002      	movs	r0, #2
 80006c0:	f001 f820 	bl	8001704 <HAL_FLASH_Program>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      if (ret != HAL_OK) {
 80006ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01e      	beq.n	8000710 <main+0x154>
    	  char msg[] = "Error writing to config sector while attempting OTA update!";
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <main+0x1c0>)
 80006d4:	463c      	mov	r4, r7
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  HAL_UART_Transmit(&huart5, (uint8_t*) msg, strlen(msg) + 1, HAL_MAX_DELAY);
 80006ec:	463b      	mov	r3, r7
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd8e 	bl	8000210 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	3301      	adds	r3, #1
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4639      	mov	r1, r7
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000702:	481c      	ldr	r0, [pc, #112]	; (8000774 <main+0x1b8>)
 8000704:	f003 f8aa 	bl	800385c <HAL_UART_Transmit>
          HAL_FLASH_Lock();
 8000708:	f001 f872 	bl	80017f0 <HAL_FLASH_Lock>
    	  Error_Handler();
 800070c:	f000 f9de 	bl	8000acc <Error_Handler>
      }

      // Lock the Flash memory again
      ret = HAL_FLASH_Lock();
 8000710:	f001 f86e 	bl	80017f0 <HAL_FLASH_Lock>
 8000714:	4603      	mov	r3, r0
 8000716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      if (ret != HAL_OK) {
 800071a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800071e:	2b00      	cmp	r3, #0
 8000720:	d01a      	beq.n	8000758 <main+0x19c>
    	  char msg[] = "Error locking flash while attempting OTA update!";
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <main+0x1c4>)
 8000724:	463c      	mov	r4, r7
 8000726:	461d      	mov	r5, r3
 8000728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	682b      	ldr	r3, [r5, #0]
 8000736:	7023      	strb	r3, [r4, #0]
    	  HAL_UART_Transmit(&huart5, (uint8_t*) msg, strlen(msg) + 1, HAL_MAX_DELAY);
 8000738:	463b      	mov	r3, r7
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd68 	bl	8000210 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	b29b      	uxth	r3, r3
 8000744:	3301      	adds	r3, #1
 8000746:	b29a      	uxth	r2, r3
 8000748:	4639      	mov	r1, r7
 800074a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <main+0x1b8>)
 8000750:	f003 f884 	bl	800385c <HAL_UART_Transmit>
    	  Error_Handler();
 8000754:	f000 f9ba 	bl	8000acc <Error_Handler>
      }

      HAL_NVIC_SystemReset();
 8000758:	f000 ffa7 	bl	80016aa <HAL_NVIC_SystemReset>
  }

  // No OTA Magic Value found in config sector, jump to application
  goto_application();
 800075c:	f000 f998 	bl	8000a90 <goto_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x1a4>
 8000762:	bf00      	nop
 8000764:	08008000 	.word	0x08008000
 8000768:	deadbeef 	.word	0xdeadbeef
 800076c:	40023c00 	.word	0x40023c00
 8000770:	08005038 	.word	0x08005038
 8000774:	200000ac 	.word	0x200000ac
 8000778:	0800506c 	.word	0x0800506c
 800077c:	080050a8 	.word	0x080050a8
 8000780:	080050e4 	.word	0x080050e4

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2234      	movs	r2, #52	; 0x34
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f003 fde4 	bl	8004360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <SystemClock_Config+0xdc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a2b      	ldr	r2, [pc, #172]	; (8000860 <SystemClock_Config+0xdc>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <SystemClock_Config+0xdc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <SystemClock_Config+0xe0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a24      	ldr	r2, [pc, #144]	; (8000864 <SystemClock_Config+0xe0>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <SystemClock_Config+0xe0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007e4:	2309      	movs	r3, #9
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f2:	2301      	movs	r3, #1
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000800:	2319      	movs	r3, #25
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000810:	2302      	movs	r3, #2
 8000812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4618      	mov	r0, r3
 800081a:	f002 faef 	bl	8002dfc <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000824:	f000 f952 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000834:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2102      	movs	r1, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fbf2 	bl	8002030 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000852:	f000 f93b 	bl	8000acc <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_CRC_Init+0x20>)
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <MX_CRC_Init+0x24>)
 8000870:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_CRC_Init+0x20>)
 8000874:	f000 ff29 	bl	80016ca <HAL_CRC_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800087e:	f000 f925 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000084 	.word	0x20000084
 800088c:	40023000 	.word	0x40023000

08000890 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_RTC_Init+0xac>)
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <MX_RTC_Init+0xb0>)
 80008ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_RTC_Init+0xac>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_RTC_Init+0xac>)
 80008b6:	227f      	movs	r2, #127	; 0x7f
 80008b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_RTC_Init+0xac>)
 80008bc:	22ff      	movs	r2, #255	; 0xff
 80008be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_RTC_Init+0xac>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_RTC_Init+0xac>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_RTC_Init+0xac>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008d2:	481a      	ldr	r0, [pc, #104]	; (800093c <MX_RTC_Init+0xac>)
 80008d4:	f002 fd30 	bl	8003338 <HAL_RTC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f8f5 	bl	8000acc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	480f      	ldr	r0, [pc, #60]	; (800093c <MX_RTC_Init+0xac>)
 80008fe:	f002 fd9e 	bl	800343e <HAL_RTC_SetTime>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 f8e0 	bl	8000acc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800090c:	2301      	movs	r3, #1
 800090e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000910:	2301      	movs	r3, #1
 8000912:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000914:	2301      	movs	r3, #1
 8000916:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000918:	2300      	movs	r3, #0
 800091a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	2201      	movs	r2, #1
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <MX_RTC_Init+0xac>)
 8000924:	f002 fe25 	bl	8003572 <HAL_RTC_SetDate>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800092e:	f000 f8cd 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000008c 	.word	0x2000008c
 8000940:	40002800 	.word	0x40002800

08000944 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_UART5_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_UART5_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_UART5_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_UART5_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_UART5_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_UART5_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_UART5_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_UART5_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_UART5_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_UART5_Init+0x4c>)
 800097c:	f002 ff1e 	bl	80037bc <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f8a1 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000ac 	.word	0x200000ac
 8000994:	40005000 	.word	0x40005000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <MX_GPIO_Init+0xec>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a33      	ldr	r2, [pc, #204]	; (8000a84 <MX_GPIO_Init+0xec>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <MX_GPIO_Init+0xec>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <MX_GPIO_Init+0xec>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <MX_GPIO_Init+0xec>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <MX_GPIO_Init+0xec>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_GPIO_Init+0xec>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <MX_GPIO_Init+0xec>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_GPIO_Init+0xec>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_GPIO_Init+0xec>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <MX_GPIO_Init+0xec>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_GPIO_Init+0xec>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_GPIO_Init+0xec>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_GPIO_Init+0xec>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0xec>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_GPIO_Init+0xf0>)
 8000a40:	f001 fadc 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_GPIO_Init+0xf4>)
 8000a5a:	f001 f93b 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0xf0>)
 8000a76:	f001 f92d 	bl	8001cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020800 	.word	0x40020800

08000a90 <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (APP_FLASH_ADDR + 4U)));
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <goto_application+0x34>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	607b      	str	r3, [r7, #4]

	HAL_RCC_DeInit();
 8000a9c:	f002 f8b6 	bl	8002c0c <HAL_RCC_DeInit>
	HAL_DeInit();
 8000aa0:	f000 fc8e 	bl	80013c0 <HAL_DeInit>
//	__set_MSP(*(volatile uint32_t*) APP_FLASH_ADDR);
	SysTick->CTRL = 0;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <goto_application+0x38>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <goto_application+0x38>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <goto_application+0x38>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]

	// Jump to App
	app_reset_handler();
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4798      	blx	r3
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	0800c004 	.word	0x0800c004
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <CalcCRC>:
  0x119B4BE9, 0x155A565E, 0x18197087, 0x1CD86D30, 0x029F3D35, 0x065E2082, 0x0B1D065B, 0x0FDC1BEC, 0x3793A651, 0x3352BBE6, 0x3E119D3F, 0x3AD08088, 0x2497D08D, 0x2056CD3A, 0x2D15EBE3, 0x29D4F654,
  0xC5A92679, 0xC1683BCE, 0xCC2B1D17, 0xC8EA00A0, 0xD6AD50A5, 0xD26C4D12, 0xDF2F6BCB, 0xDBEE767C, 0xE3A1CBC1, 0xE760D676, 0xEA23F0AF, 0xEEE2ED18, 0xF0A5BD1D, 0xF464A0AA, 0xF9278673, 0xFDE69BC4,
  0x89B8FD09, 0x8D79E0BE, 0x803AC667, 0x84FBDBD0, 0x9ABC8BD5, 0x9E7D9662, 0x933EB0BB, 0x97FFAD0C, 0xAFB010B1, 0xAB710D06, 0xA6322BDF, 0xA2F33668, 0xBCB4666D, 0xB8757BDA, 0xB5365D03, 0xB1F740B4,
};

uint32_t CalcCRC(uint8_t* pData, uint32_t DataLength) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae6:	617b      	str	r3, [r7, #20]
    for (unsigned int i=0; i < DataLength; i++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	e014      	b.n	8000b18 <CalcCRC+0x40>
        uint8_t top = (uint8_t)(Checksum >> 24);
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	0e1b      	lsrs	r3, r3, #24
 8000af2:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4413      	add	r3, r2
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	4053      	eors	r3, r2
 8000b00:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	021a      	lsls	r2, r3, #8
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	4909      	ldr	r1, [pc, #36]	; (8000b30 <CalcCRC+0x58>)
 8000b0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b0e:	4053      	eors	r3, r2
 8000b10:	617b      	str	r3, [r7, #20]
    for (unsigned int i=0; i < DataLength; i++) {
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	3301      	adds	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d3e6      	bcc.n	8000aee <CalcCRC+0x16>
    }
    return Checksum;
 8000b20:	697b      	ldr	r3, [r7, #20]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	371c      	adds	r7, #28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	080051dc 	.word	0x080051dc

08000b34 <runOtaUpdate>:
/**
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
int runOtaUpdate() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	sendOtaResponse(PACKET_ACK);  // Send Ack to signal that we are ready to start OTA
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 f8c4 	bl	8000cc8 <sendOtaResponse>

	ota_state = START;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <runOtaUpdate+0x74>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
	int bytes_received = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]

	while (ota_state != IDLE) {
 8000b4a:	e024      	b.n	8000b96 <runOtaUpdate+0x62>
		memset(RX_BUFFER, 0, PACKET_MAX_SIZE);
 8000b4c:	f640 020b 	movw	r2, #2059	; 0x80b
 8000b50:	2100      	movs	r1, #0
 8000b52:	4816      	ldr	r0, [pc, #88]	; (8000bac <runOtaUpdate+0x78>)
 8000b54:	f003 fc04 	bl	8004360 <memset>

		bytes_received = receiveOtaPacket(RX_BUFFER, PACKET_MAX_SIZE);
 8000b58:	f640 010b 	movw	r1, #2059	; 0x80b
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <runOtaUpdate+0x78>)
 8000b5e:	f000 f827 	bl	8000bb0 <receiveOtaPacket>
 8000b62:	6078      	str	r0, [r7, #4]
		if (bytes_received > 0) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	dd12      	ble.n	8000b90 <runOtaUpdate+0x5c>
			if (processOtaPacket(RX_BUFFER, bytes_received)) {
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480e      	ldr	r0, [pc, #56]	; (8000bac <runOtaUpdate+0x78>)
 8000b72:	f000 f8e5 	bl	8000d40 <processOtaPacket>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d005      	beq.n	8000b88 <runOtaUpdate+0x54>
				sendOtaResponse(PACKET_NACK);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 f8a3 	bl	8000cc8 <sendOtaResponse>
				return -1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b86:	e00b      	b.n	8000ba0 <runOtaUpdate+0x6c>
			} else {
				sendOtaResponse(PACKET_ACK);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 f89d 	bl	8000cc8 <sendOtaResponse>
 8000b8e:	e002      	b.n	8000b96 <runOtaUpdate+0x62>
			}
		} else {
			// Error
			sendOtaResponse(PACKET_NACK);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 f899 	bl	8000cc8 <sendOtaResponse>
	while (ota_state != IDLE) {
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <runOtaUpdate+0x74>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1d6      	bne.n	8000b4c <runOtaUpdate+0x18>
		}
	}

	return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200008ff 	.word	0x200008ff
 8000bac:	200000f4 	.word	0x200000f4

08000bb0 <receiveOtaPacket>:


static int receiveOtaPacket(uint8_t* buf, uint16_t size) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
	// Parse Ota Packet
	HAL_StatusTypeDef ret;
	uint16_t index = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	82fb      	strh	r3, [r7, #22]
	uint32_t computed_crc = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
	uint32_t received_crc = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
	memset(buf, 0, PACKET_MAX_SIZE);
 8000bc8:	f640 020b 	movw	r2, #2059	; 0x80b
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f003 fbc6 	bl	8004360 <memset>

	// Receive the SOF, packet type, packet number, and payload length (6 bytes)
	ret = HAL_UART_Receive(&huart5, buf + index, 6, HAL_MAX_DELAY);
 8000bd4:	8afb      	ldrh	r3, [r7, #22]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	18d1      	adds	r1, r2, r3
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bde:	2206      	movs	r2, #6
 8000be0:	4838      	ldr	r0, [pc, #224]	; (8000cc4 <receiveOtaPacket+0x114>)
 8000be2:	f002 fec6 	bl	8003972 <HAL_UART_Receive>
 8000be6:	4603      	mov	r3, r0
 8000be8:	72fb      	strb	r3, [r7, #11]
	if (ret != HAL_OK) {
 8000bea:	7afb      	ldrb	r3, [r7, #11]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <receiveOtaPacket+0x44>
		return 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e063      	b.n	8000cbc <receiveOtaPacket+0x10c>
	}

	if (buf[index] != PACKET_SOF) {
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d001      	beq.n	8000c04 <receiveOtaPacket+0x54>
//		printf("Did not receive SOF!\n");
		return 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e05b      	b.n	8000cbc <receiveOtaPacket+0x10c>
	}
	index += 6;
 8000c04:	8afb      	ldrh	r3, [r7, #22]
 8000c06:	3306      	adds	r3, #6
 8000c08:	82fb      	strh	r3, [r7, #22]

	// Get payload length (bytes 4 and 5)
	uint16_t payload_len = *((uint16_t*) &buf[4]);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	889b      	ldrh	r3, [r3, #4]
 8000c0e:	813b      	strh	r3, [r7, #8]
	// receive payload
	ret = HAL_UART_Receive(&huart5, buf + index, payload_len, HAL_MAX_DELAY);
 8000c10:	8afb      	ldrh	r3, [r7, #22]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	18d1      	adds	r1, r2, r3
 8000c16:	893a      	ldrh	r2, [r7, #8]
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c1c:	4829      	ldr	r0, [pc, #164]	; (8000cc4 <receiveOtaPacket+0x114>)
 8000c1e:	f002 fea8 	bl	8003972 <HAL_UART_Receive>
 8000c22:	4603      	mov	r3, r0
 8000c24:	72fb      	strb	r3, [r7, #11]
	if (ret != HAL_OK) {
 8000c26:	7afb      	ldrb	r3, [r7, #11]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <receiveOtaPacket+0x80>
//		printf("HAL Receive failed!\n");
		return 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e045      	b.n	8000cbc <receiveOtaPacket+0x10c>
	}
	index += payload_len;
 8000c30:	8afa      	ldrh	r2, [r7, #22]
 8000c32:	893b      	ldrh	r3, [r7, #8]
 8000c34:	4413      	add	r3, r2
 8000c36:	82fb      	strh	r3, [r7, #22]

	// receive crc
	ret = HAL_UART_Receive(&huart5, buf + index, 4, HAL_MAX_DELAY);
 8000c38:	8afb      	ldrh	r3, [r7, #22]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	18d1      	adds	r1, r2, r3
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c42:	2204      	movs	r2, #4
 8000c44:	481f      	ldr	r0, [pc, #124]	; (8000cc4 <receiveOtaPacket+0x114>)
 8000c46:	f002 fe94 	bl	8003972 <HAL_UART_Receive>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	72fb      	strb	r3, [r7, #11]
	if (ret != HAL_OK) {
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <receiveOtaPacket+0xa8>
//		printf("HAL Receive failed!\n");
		return 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e031      	b.n	8000cbc <receiveOtaPacket+0x10c>
	}
	received_crc = *((uint32_t*) &buf[index]);
 8000c58:	8afb      	ldrh	r3, [r7, #22]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
	index += 4;
 8000c62:	8afb      	ldrh	r3, [r7, #22]
 8000c64:	3304      	adds	r3, #4
 8000c66:	82fb      	strh	r3, [r7, #22]

    // Compute CRC (excluding received CRC and EOF)
    computed_crc = CalcCRC((uint8_t*) &buf[6], payload_len);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3306      	adds	r3, #6
 8000c6c:	893a      	ldrh	r2, [r7, #8]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff31 	bl	8000ad8 <CalcCRC>
 8000c76:	6138      	str	r0, [r7, #16]

	// receive EOF
	ret = HAL_UART_Receive(&huart5, buf + index, 1, HAL_MAX_DELAY);
 8000c78:	8afb      	ldrh	r3, [r7, #22]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	18d1      	adds	r1, r2, r3
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c82:	2201      	movs	r2, #1
 8000c84:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <receiveOtaPacket+0x114>)
 8000c86:	f002 fe74 	bl	8003972 <HAL_UART_Receive>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	72fb      	strb	r3, [r7, #11]
	if (ret != HAL_OK) {
 8000c8e:	7afb      	ldrb	r3, [r7, #11]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <receiveOtaPacket+0xe8>
//		printf("HAL Receive failed!\n");
		return 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	e011      	b.n	8000cbc <receiveOtaPacket+0x10c>
	}
	if (buf[index] != PACKET_EOF) {
 8000c98:	8afb      	ldrh	r3, [r7, #22]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d001      	beq.n	8000ca8 <receiveOtaPacket+0xf8>
//		printf("Did not receive EOF!\n");
		return 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e009      	b.n	8000cbc <receiveOtaPacket+0x10c>
	}
	index++;
 8000ca8:	8afb      	ldrh	r3, [r7, #22]
 8000caa:	3301      	adds	r3, #1
 8000cac:	82fb      	strh	r3, [r7, #22]

	// Compute CRC on the fields from SOF to payload (exclude crc (4 bytes) and end byte (1 byte))
	if (computed_crc != received_crc) {
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d001      	beq.n	8000cba <receiveOtaPacket+0x10a>
		return 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <receiveOtaPacket+0x10c>
	}

	return index;
 8000cba:	8afb      	ldrh	r3, [r7, #22]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200000ac 	.word	0x200000ac

08000cc8 <sendOtaResponse>:

static int sendOtaResponse(uint8_t status) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
//    size_t crc_size = sizeof(OtaResponsePacket) - sizeof(response_packet.crc32) - sizeof(response_packet.eof);
//    size_t crc_buffer_size = (crc_size + sizeof(uint32_t) - 1) / sizeof(uint32_t); // Ceiling division
//    uint32_t crc_buffer[crc_buffer_size];

    // Build command packet to send
    memset(&response_packet, 0, sizeof(OtaResponsePacket));
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f003 fb40 	bl	8004360 <memset>
    response_packet.sof         = PACKET_SOF;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	723b      	strb	r3, [r7, #8]
    response_packet.packet_type = OTA_RESPONSE;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	727b      	strb	r3, [r7, #9]
    response_packet.packet_num  = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	817b      	strh	r3, [r7, #10]
    response_packet.payload_len = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	81bb      	strh	r3, [r7, #12]
    response_packet.status      = status;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	73bb      	strb	r3, [r7, #14]
//    memcpy(crc_buffer, &response_packet, crc_size);
    response_packet.crc32		= CalcCRC((uint8_t*) &response_packet.status, response_packet.payload_len);
 8000cf4:	89bb      	ldrh	r3, [r7, #12]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	3306      	adds	r3, #6
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fee9 	bl	8000ad8 <CalcCRC>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f8c7 300f 	str.w	r3, [r7, #15]
    response_packet.eof         = PACKET_EOF;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	74fb      	strb	r3, [r7, #19]

    HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart5, (uint8_t*) &response_packet, sizeof(OtaResponsePacket), HAL_MAX_DELAY);
 8000d10:	f107 0108 	add.w	r1, r7, #8
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d18:	220c      	movs	r2, #12
 8000d1a:	4808      	ldr	r0, [pc, #32]	; (8000d3c <sendOtaResponse+0x74>)
 8000d1c:	f002 fd9e 	bl	800385c <HAL_UART_Transmit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8000d24:	7dfb      	ldrb	r3, [r7, #23]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <sendOtaResponse+0x68>
//		printf("Failed to send Ota response with status: %d!\n", status);
		return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2e:	e000      	b.n	8000d32 <sendOtaResponse+0x6a>
	}
	return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000ac 	.word	0x200000ac

08000d40 <processOtaPacket>:

static int processOtaPacket(uint8_t* buf, uint16_t size) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
    OtaCommandPacket* packet = (OtaCommandPacket*) buf;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	61fb      	str	r3, [r7, #28]

    // Check if we received a ABORT command
    if (packet->packet_type == OTA_COMMAND && packet->cmd == OTA_ABORT_CMD) {
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d108      	bne.n	8000d6a <processOtaPacket+0x2a>
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	799b      	ldrb	r3, [r3, #6]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d104      	bne.n	8000d6a <processOtaPacket+0x2a>
//        printf("Received OTA ABORT command!\n");
        ota_state = IDLE;
 8000d60:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <processOtaPacket+0x13c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
        return 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e084      	b.n	8000e74 <processOtaPacket+0x134>
    }

    switch(ota_state) {
 8000d6a:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <processOtaPacket+0x13c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d874      	bhi.n	8000e5e <processOtaPacket+0x11e>
 8000d74:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <processOtaPacket+0x3c>)
 8000d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7a:	bf00      	nop
 8000d7c:	08000d8d 	.word	0x08000d8d
 8000d80:	08000da7 	.word	0x08000da7
 8000d84:	08000dd1 	.word	0x08000dd1
 8000d88:	08000e27 	.word	0x08000e27
        case START:
            if (packet->packet_type == OTA_COMMAND && packet->cmd == OTA_START_CMD) {
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	785b      	ldrb	r3, [r3, #1]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d166      	bne.n	8000e62 <processOtaPacket+0x122>
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	799b      	ldrb	r3, [r3, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d162      	bne.n	8000e62 <processOtaPacket+0x122>
//                printf("Received OTA START command!\n");
                ota_state = HEADER;
 8000d9c:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <processOtaPacket+0x13c>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	701a      	strb	r2, [r3, #0]
                return 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e066      	b.n	8000e74 <processOtaPacket+0x134>
            }
//            printf("Error: Expected OTA start command!\n");
            break;

        case HEADER:
            OtaHeaderPacket* header_packet = (OtaHeaderPacket*) buf;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]
            if (header_packet->packet_type == OTA_HEADER) {
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	785b      	ldrb	r3, [r3, #1]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d159      	bne.n	8000e66 <processOtaPacket+0x126>
                fw_image_meta_data.file_size = header_packet->file_info.file_size;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8000db8:	4a31      	ldr	r2, [pc, #196]	; (8000e80 <processOtaPacket+0x140>)
 8000dba:	6013      	str	r3, [r2, #0]
                fw_image_meta_data.crc32 = header_packet->file_info.crc32;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000dc2:	4a2f      	ldr	r2, [pc, #188]	; (8000e80 <processOtaPacket+0x140>)
 8000dc4:	6053      	str	r3, [r2, #4]
                ota_state = DATA;
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <processOtaPacket+0x13c>)
 8000dc8:	2203      	movs	r2, #3
 8000dca:	701a      	strb	r2, [r3, #0]
//                printf("Received OTA header! FW Size: %ld bytes\n", fw_image_meta_data.file_size);
                return 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e051      	b.n	8000e74 <processOtaPacket+0x134>
            }
//            printf("Error: Expected OTA header, received packet type: %d!\n", header_packet->packet_type);
            break;

        case DATA:
            OtaDataPacket* data_packet = (OtaDataPacket*) buf;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	617b      	str	r3, [r7, #20]
            if (data_packet->packet_type == OTA_DATA) {
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	785b      	ldrb	r3, [r3, #1]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d146      	bne.n	8000e6a <processOtaPacket+0x12a>
            	uint8_t* data = (uint8_t*) &(data_packet->payload);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3306      	adds	r3, #6
 8000de0:	613b      	str	r3, [r7, #16]
            	flashWrite(data, data_packet->payload_len, (ota_fw_received_size == 0));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	889b      	ldrh	r3, [r3, #4]
 8000de6:	b299      	uxth	r1, r3
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <processOtaPacket+0x144>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	bf0c      	ite	eq
 8000df0:	2301      	moveq	r3, #1
 8000df2:	2300      	movne	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	6938      	ldr	r0, [r7, #16]
 8000dfa:	f000 f847 	bl	8000e8c <flashWrite>
                ota_fw_received_size += data_packet->payload_len;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	889b      	ldrh	r3, [r3, #4]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <processOtaPacket+0x144>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <processOtaPacket+0x144>)
 8000e0e:	6013      	str	r3, [r2, #0]
                if (ota_fw_received_size >= fw_image_meta_data.file_size) {
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <processOtaPacket+0x140>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <processOtaPacket+0x144>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d802      	bhi.n	8000e22 <processOtaPacket+0xe2>
                    ota_state = END;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <processOtaPacket+0x13c>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	701a      	strb	r2, [r3, #0]
                }
                return 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e026      	b.n	8000e74 <processOtaPacket+0x134>
            }
//            printf("Error: Expected OTA data!\n");
            break;

        case END:
            if (packet->packet_type == OTA_COMMAND && packet->cmd == OTA_END_CMD) {
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	785b      	ldrb	r3, [r3, #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d11f      	bne.n	8000e6e <processOtaPacket+0x12e>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	799b      	ldrb	r3, [r3, #6]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d11b      	bne.n	8000e6e <processOtaPacket+0x12e>
//                printf("Received OTA END command!\n");
                // Verify full package CRC
                uint32_t computed_crc = CalcCRC((uint8_t*) APP_FLASH_ADDR, fw_image_meta_data.file_size);
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <processOtaPacket+0x140>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4812      	ldr	r0, [pc, #72]	; (8000e88 <processOtaPacket+0x148>)
 8000e3e:	f7ff fe4b 	bl	8000ad8 <CalcCRC>
 8000e42:	61b8      	str	r0, [r7, #24]
                if (computed_crc != fw_image_meta_data.crc32) {
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <processOtaPacket+0x140>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d002      	beq.n	8000e54 <processOtaPacket+0x114>
                	return -1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e52:	e00f      	b.n	8000e74 <processOtaPacket+0x134>
                }

                ota_state = IDLE;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <processOtaPacket+0x13c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
                return 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e00a      	b.n	8000e74 <processOtaPacket+0x134>
            }
//            printf("Error: Expected OTA end command!\n");
            break;

        default:
            break;
 8000e5e:	bf00      	nop
 8000e60:	e006      	b.n	8000e70 <processOtaPacket+0x130>
            break;
 8000e62:	bf00      	nop
 8000e64:	e004      	b.n	8000e70 <processOtaPacket+0x130>
            break;
 8000e66:	bf00      	nop
 8000e68:	e002      	b.n	8000e70 <processOtaPacket+0x130>
            break;
 8000e6a:	bf00      	nop
 8000e6c:	e000      	b.n	8000e70 <processOtaPacket+0x130>
            break;
 8000e6e:	bf00      	nop
    }

    // if we didn't return early, then we have an error
    return -1;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200008ff 	.word	0x200008ff
 8000e80:	20000900 	.word	0x20000900
 8000e84:	20000908 	.word	0x20000908
 8000e88:	0800c000 	.word	0x0800c000

08000e8c <flashWrite>:


static int flashWrite(uint8_t* data, uint16_t data_len, bool first_write) {
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	807b      	strh	r3, [r7, #2]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret = HAL_FLASH_Unlock();
 8000e9c:	f000 fc86 	bl	80017ac <HAL_FLASH_Unlock>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret != HAL_OK) {
 8000ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <flashWrite+0x2e>
		printf("Failed to unlock flash!\n");
 8000eae:	4839      	ldr	r0, [pc, #228]	; (8000f94 <flashWrite+0x108>)
 8000eb0:	f003 fa4e 	bl	8004350 <puts>
		return -1;
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb8:	e068      	b.n	8000f8c <flashWrite+0x100>
	}

	// Erase flash once
	if (first_write) {
 8000eba:	787b      	ldrb	r3, [r7, #1]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d028      	beq.n	8000f12 <flashWrite+0x86>
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t sector_error;

		EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.Sector        = FLASH_SECTOR_3;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	617b      	str	r3, [r7, #20]
		EraseInitStruct.NbSectors     = 5;                    //erase 5 sectors (3, 4, 5, 6, 7)
 8000ec8:	2305      	movs	r3, #5
 8000eca:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61fb      	str	r3, [r7, #28]

		printf("Erasing flash memory sectors %ld - %ld", EraseInitStruct.Sector, EraseInitStruct.Sector + EraseInitStruct.NbSectors - 1);
 8000ed0:	6979      	ldr	r1, [r7, #20]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	461a      	mov	r2, r3
 8000edc:	482e      	ldr	r0, [pc, #184]	; (8000f98 <flashWrite+0x10c>)
 8000ede:	f003 f9d1 	bl	8004284 <iprintf>
		ret = HAL_FLASHEx_Erase( &EraseInitStruct, &sector_error );
 8000ee2:	f107 0208 	add.w	r2, r7, #8
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fdcf 	bl	8001a90 <HAL_FLASHEx_Erase>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if( ret != HAL_OK ) {
 8000ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <flashWrite+0x80>
			printf("Failed to erase flash!\n");
 8000f00:	4826      	ldr	r0, [pc, #152]	; (8000f9c <flashWrite+0x110>)
 8000f02:	f003 fa25 	bl	8004350 <puts>
			return -1;  // TODO: return HAL_FLASH_GetError()
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0a:	e03f      	b.n	8000f8c <flashWrite+0x100>
		}
		printf("Erased flash successfully!\n");
 8000f0c:	4824      	ldr	r0, [pc, #144]	; (8000fa0 <flashWrite+0x114>)
 8000f0e:	f003 fa1f 	bl	8004350 <puts>
	}

	// Write to flash
	for (int i = 0; i < data_len; i++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
 8000f16:	e025      	b.n	8000f64 <flashWrite+0xd8>
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, APP_FLASH_ADDR + ota_fw_received_size + i, data[i]);
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <flashWrite+0x118>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	4413      	add	r3, r2
 8000f20:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000f24:	f501 4140 	add.w	r1, r1, #49152	; 0xc000
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2200      	movs	r2, #0
 8000f34:	461c      	mov	r4, r3
 8000f36:	4615      	mov	r5, r2
 8000f38:	4622      	mov	r2, r4
 8000f3a:	462b      	mov	r3, r5
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 fbe1 	bl	8001704 <HAL_FLASH_Program>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != HAL_OK) {
 8000f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <flashWrite+0xd2>
			printf("Flash program failed! only %d bytes written to flash!\n", i);
 8000f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f52:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <flashWrite+0x11c>)
 8000f54:	f003 f996 	bl	8004284 <iprintf>
			return -1;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f5c:	e016      	b.n	8000f8c <flashWrite+0x100>
	for (int i = 0; i < data_len; i++) {
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	3301      	adds	r3, #1
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbd5      	blt.n	8000f18 <flashWrite+0x8c>
		}
	}

    ret = HAL_FLASH_Lock();
 8000f6c:	f000 fc40 	bl	80017f0 <HAL_FLASH_Lock>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( ret != HAL_OK ) {
 8000f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <flashWrite+0xfe>
    	printf("Failed to lock flash!\n");
 8000f7e:	480b      	ldr	r0, [pc, #44]	; (8000fac <flashWrite+0x120>)
 8000f80:	f003 f9e6 	bl	8004350 <puts>
    	return -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f88:	e000      	b.n	8000f8c <flashWrite+0x100>
    }

    return 0;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bdb0      	pop	{r4, r5, r7, pc}
 8000f94:	08005118 	.word	0x08005118
 8000f98:	08005130 	.word	0x08005130
 8000f9c:	08005158 	.word	0x08005158
 8000fa0:	08005170 	.word	0x08005170
 8000fa4:	20000908 	.word	0x20000908
 8000fa8:	0800518c 	.word	0x0800518c
 8000fac:	080051c4 	.word	0x080051c4

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f000 fb34 	bl	800165c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_CRC_MspInit+0x3c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10d      	bne.n	800102e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_CRC_MspInit+0x40>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a09      	ldr	r2, [pc, #36]	; (8001040 <HAL_CRC_MspInit+0x40>)
 800101c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_CRC_MspInit+0x40>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023000 	.word	0x40023000
 8001040:	40023800 	.word	0x40023800

08001044 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09a      	sub	sp, #104	; 0x68
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	225c      	movs	r2, #92	; 0x5c
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f003 f983 	bl	8004360 <memset>
  if(hrtc->Instance==RTC)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <HAL_RTC_MspInit+0x4c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d111      	bne.n	8001088 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001064:	2320      	movs	r3, #32
 8001066:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4618      	mov	r0, r3
 8001074:	f001 f8f6 	bl	8002264 <HAL_RCCEx_PeriphCLKConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800107e:	f7ff fd25 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_RTC_MspInit+0x50>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	3768      	adds	r7, #104	; 0x68
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40002800 	.word	0x40002800
 8001094:	42470e3c 	.word	0x42470e3c

08001098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a28      	ldr	r2, [pc, #160]	; (8001158 <HAL_UART_MspInit+0xc0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d14a      	bne.n	8001150 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_UART_MspInit+0xc4>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a26      	ldr	r2, [pc, #152]	; (800115c <HAL_UART_MspInit+0xc4>)
 80010c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_UART_MspInit+0xc4>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <HAL_UART_MspInit+0xc4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a1f      	ldr	r2, [pc, #124]	; (800115c <HAL_UART_MspInit+0xc4>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_UART_MspInit+0xc4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_UART_MspInit+0xc4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <HAL_UART_MspInit+0xc4>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_UART_MspInit+0xc4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001120:	2308      	movs	r3, #8
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <HAL_UART_MspInit+0xc8>)
 800112c:	f000 fdd2 	bl	8001cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001130:	2304      	movs	r3, #4
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001140:	2308      	movs	r3, #8
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <HAL_UART_MspInit+0xcc>)
 800114c:	f000 fdc2 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40005000 	.word	0x40005000
 800115c:	40023800 	.word	0x40023800
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f96a 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e00a      	b.n	80011e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ce:	f3af 8000 	nop.w
 80011d2:	4601      	mov	r1, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60ba      	str	r2, [r7, #8]
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf0      	blt.n	80011ce <_read+0x12>
  }

  return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e009      	b.n	800121c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	60ba      	str	r2, [r7, #8]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbf1      	blt.n	8001208 <_write+0x12>
  }
  return len;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_close>:

int _close(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001256:	605a      	str	r2, [r3, #4]
  return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_isatty>:

int _isatty(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f003 f852 	bl	8004370 <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20020000 	.word	0x20020000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	2000090c 	.word	0x2000090c
 8001300:	20000a80 	.word	0x20000a80

08001304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800132c:	f7ff ffea 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	; (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001356:	f003 f811 	bl	800437c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff f92f 	bl	80005bc <main>
  bx  lr    
 800135e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800136c:	08005638 	.word	0x08005638
  ldr r2, =_sbss
 8001370:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001374:	20000a80 	.word	0x20000a80

08001378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <HAL_Init+0x40>)
 8001386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_Init+0x40>)
 8001392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x40>)
 800139e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f959 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f83e 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fdfe 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_DeInit+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <HAL_DeInit+0x50>)
 80013c8:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_DeInit+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_DeInit+0x4c>)
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_DeInit+0x54>)
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_DeInit+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_DeInit+0x4c>)
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_DeInit+0x58>)
 80013e0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_DeInit+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_DeInit+0x4c>)
 80013ea:	2281      	movs	r2, #129	; 0x81
 80013ec:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_DeInit+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_DeInit+0x4c>)
 80013f6:	2203      	movs	r2, #3
 80013f8:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <HAL_DeInit+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001400:	f000 f80c 	bl	800141c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	3fffc9ff 	.word	0x3fffc9ff
 8001414:	00c77933 	.word	0x00c77933
 8001418:	206010ff 	.word	0x206010ff

0800141c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f931 	bl	80016b2 <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001468:	f000 f903 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000000 	.word	0x20000000
 8001484:	20000008 	.word	0x20000008
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000910 	.word	0x20000910

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000910 	.word	0x20000910

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80015f0:	f3bf 8f4f 	dsb	sy
}
 80015f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <__NVIC_SystemReset+0x24>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80015fe:	4904      	ldr	r1, [pc, #16]	; (8001610 <__NVIC_SystemReset+0x24>)
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_SystemReset+0x28>)
 8001602:	4313      	orrs	r3, r2
 8001604:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001606:	f3bf 8f4f 	dsb	sy
}
 800160a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <__NVIC_SystemReset+0x20>
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0004 	.word	0x05fa0004

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800163c:	f7ff ff78 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff31 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff46 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff78 	bl	8001584 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff47 	bl	8001530 <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80016ae:	f7ff ff9d 	bl	80015ec <__NVIC_SystemReset>

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffac 	bl	8001618 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e00e      	b.n	80016fa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	795b      	ldrb	r3, [r3, #5]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fc87 	bl	8001000 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_FLASH_Program+0xa0>)
 8001718:	7e1b      	ldrb	r3, [r3, #24]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_FLASH_Program+0x1e>
 800171e:	2302      	movs	r3, #2
 8001720:	e03b      	b.n	800179a <HAL_FLASH_Program+0x96>
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_FLASH_Program+0xa0>)
 8001724:	2201      	movs	r2, #1
 8001726:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001728:	f24c 3050 	movw	r0, #50000	; 0xc350
 800172c:	f000 f870 	bl	8001810 <FLASH_WaitForLastOperation>
 8001730:	4603      	mov	r3, r0
 8001732:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d12b      	bne.n	8001792 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d105      	bne.n	800174c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001740:	783b      	ldrb	r3, [r7, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f000 f91b 	bl	8001980 <FLASH_Program_Byte>
 800174a:	e016      	b.n	800177a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d105      	bne.n	800175e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001752:	883b      	ldrh	r3, [r7, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	68b8      	ldr	r0, [r7, #8]
 8001758:	f000 f8ee 	bl	8001938 <FLASH_Program_HalfWord>
 800175c:	e00d      	b.n	800177a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d105      	bne.n	8001770 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	f000 f8c3 	bl	80018f4 <FLASH_Program_Word>
 800176e:	e004      	b.n	800177a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f000 f88b 	bl	8001890 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800177a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800177e:	f000 f847 	bl	8001810 <FLASH_WaitForLastOperation>
 8001782:	4603      	mov	r3, r0
 8001784:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_FLASH_Program+0xa4>)
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_FLASH_Program+0xa4>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_FLASH_Program+0xa0>)
 8001794:	2200      	movs	r2, #0
 8001796:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001798:	7dfb      	ldrb	r3, [r7, #23]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000914 	.word	0x20000914
 80017a8:	40023c00 	.word	0x40023c00

080017ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_FLASH_Unlock+0x38>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da0b      	bge.n	80017d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_FLASH_Unlock+0x38>)
 80017c0:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_FLASH_Unlock+0x3c>)
 80017c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_FLASH_Unlock+0x38>)
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_FLASH_Unlock+0x40>)
 80017c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_FLASH_Unlock+0x38>)
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da01      	bge.n	80017d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40023c00 	.word	0x40023c00
 80017e8:	45670123 	.word	0x45670123
 80017ec:	cdef89ab 	.word	0xcdef89ab

080017f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_FLASH_Lock+0x1c>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_FLASH_Lock+0x1c>)
 80017fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40023c00 	.word	0x40023c00

08001810 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <FLASH_WaitForLastOperation+0x78>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001822:	f7ff fe47 	bl	80014b4 <HAL_GetTick>
 8001826:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001828:	e010      	b.n	800184c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001830:	d00c      	beq.n	800184c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <FLASH_WaitForLastOperation+0x38>
 8001838:	f7ff fe3c 	bl	80014b4 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	d201      	bcs.n	800184c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e019      	b.n	8001880 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <FLASH_WaitForLastOperation+0x7c>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e8      	bne.n	800182a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <FLASH_WaitForLastOperation+0x7c>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <FLASH_WaitForLastOperation+0x7c>)
 8001866:	2201      	movs	r2, #1
 8001868:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <FLASH_WaitForLastOperation+0x7c>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001876:	f000 f8a5 	bl	80019c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
  
}  
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000914 	.word	0x20000914
 800188c:	40023c00 	.word	0x40023c00

08001890 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <FLASH_Program_DoubleWord+0x60>)
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <FLASH_Program_DoubleWord+0x60>)
 80018a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <FLASH_Program_DoubleWord+0x60>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <FLASH_Program_DoubleWord+0x60>)
 80018ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <FLASH_Program_DoubleWord+0x60>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <FLASH_Program_DoubleWord+0x60>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80018c6:	f3bf 8f6f 	isb	sy
}
 80018ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80018cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	000a      	movs	r2, r1
 80018da:	2300      	movs	r3, #0
 80018dc:	68f9      	ldr	r1, [r7, #12]
 80018de:	3104      	adds	r1, #4
 80018e0:	4613      	mov	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40023c00 	.word	0x40023c00

080018f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <FLASH_Program_Word+0x40>)
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <FLASH_Program_Word+0x40>)
 8001904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001908:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <FLASH_Program_Word+0x40>)
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <FLASH_Program_Word+0x40>)
 8001910:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001914:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <FLASH_Program_Word+0x40>)
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	4a06      	ldr	r2, [pc, #24]	; (8001934 <FLASH_Program_Word+0x40>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40023c00 	.word	0x40023c00

08001938 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <FLASH_Program_HalfWord+0x44>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4a0c      	ldr	r2, [pc, #48]	; (800197c <FLASH_Program_HalfWord+0x44>)
 800194a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800194e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <FLASH_Program_HalfWord+0x44>)
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	4a09      	ldr	r2, [pc, #36]	; (800197c <FLASH_Program_HalfWord+0x44>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <FLASH_Program_HalfWord+0x44>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <FLASH_Program_HalfWord+0x44>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	801a      	strh	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <FLASH_Program_Byte+0x40>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <FLASH_Program_Byte+0x40>)
 8001992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001996:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <FLASH_Program_Byte+0x40>)
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <FLASH_Program_Byte+0x40>)
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <FLASH_Program_Byte+0x40>)
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <FLASH_Program_Byte+0x40>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	701a      	strb	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 80019de:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 80019e2:	2210      	movs	r2, #16
 80019e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 80019fc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a00:	2220      	movs	r2, #32
 8001a02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a1e:	2240      	movs	r2, #64	; 0x40
 8001a20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a38:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	60da      	str	r2, [r3, #12]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	20000914 	.word	0x20000914

08001a90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_FLASHEx_Erase+0xd8>)
 8001aa4:	7e1b      	ldrb	r3, [r3, #24]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_FLASHEx_Erase+0x1e>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e058      	b.n	8001b60 <HAL_FLASHEx_Erase+0xd0>
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_FLASHEx_Erase+0xd8>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ab4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ab8:	f7ff feaa 	bl	8001810 <FLASH_WaitForLastOperation>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d148      	bne.n	8001b58 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001acc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d115      	bne.n	8001b02 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f000 f844 	bl	8001b70 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ae8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001aec:	f7ff fe90 	bl	8001810 <FLASH_WaitForLastOperation>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_FLASHEx_Erase+0xdc>)
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_FLASHEx_Erase+0xdc>)
 8001afa:	f023 0304 	bic.w	r3, r3, #4
 8001afe:	6113      	str	r3, [r2, #16]
 8001b00:	e028      	b.n	8001b54 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	e01c      	b.n	8001b44 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	4619      	mov	r1, r3
 8001b12:	68b8      	ldr	r0, [r7, #8]
 8001b14:	f000 f850 	bl	8001bb8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b1c:	f7ff fe78 	bl	8001810 <FLASH_WaitForLastOperation>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_FLASHEx_Erase+0xdc>)
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_FLASHEx_Erase+0xdc>)
 8001b2a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001b2e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	601a      	str	r2, [r3, #0]
          break;
 8001b3c:	e00a      	b.n	8001b54 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3301      	adds	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3da      	bcc.n	8001b0a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001b54:	f000 f878 	bl	8001c48 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_FLASHEx_Erase+0xd8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	761a      	strb	r2, [r3, #24]

  return status;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000914 	.word	0x20000914
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <FLASH_MassErase+0x44>)
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <FLASH_MassErase+0x44>)
 8001b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <FLASH_MassErase+0x44>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <FLASH_MassErase+0x44>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <FLASH_MassErase+0x44>)
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <FLASH_MassErase+0x44>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6113      	str	r3, [r2, #16]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e010      	b.n	8001bf6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d103      	bne.n	8001be2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	e009      	b.n	8001bf6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d103      	bne.n	8001bf0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e002      	b.n	8001bf6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001bf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	490f      	ldr	r1, [pc, #60]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001c14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <FLASH_Erase_Sector+0x8c>)
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c36:	6113      	str	r3, [r2, #16]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40023c00 	.word	0x40023c00

08001c48 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d017      	beq.n	8001c88 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c62:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c7a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c86:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d017      	beq.n	8001cc4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001ca6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cb6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <FLASH_FlushCaches+0x88>)
 8001cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc2:	6013      	str	r3, [r2, #0]
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e165      	b.n	8001fbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8154 	bne.w	8001fb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d005      	beq.n	8001d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d130      	bne.n	8001d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0201 	and.w	r2, r3, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d017      	beq.n	8001dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d123      	bne.n	8001e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0203 	and.w	r2, r3, #3
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80ae 	beq.w	8001fb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_GPIO_Init+0x300>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a5c      	ldr	r2, [pc, #368]	; (8001fd4 <HAL_GPIO_Init+0x300>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_GPIO_Init+0x300>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e76:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <HAL_GPIO_Init+0x308>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d025      	beq.n	8001eee <HAL_GPIO_Init+0x21a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_GPIO_Init+0x30c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01f      	beq.n	8001eea <HAL_GPIO_Init+0x216>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4d      	ldr	r2, [pc, #308]	; (8001fe4 <HAL_GPIO_Init+0x310>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_GPIO_Init+0x212>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4c      	ldr	r2, [pc, #304]	; (8001fe8 <HAL_GPIO_Init+0x314>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4b      	ldr	r2, [pc, #300]	; (8001fec <HAL_GPIO_Init+0x318>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00d      	beq.n	8001ede <HAL_GPIO_Init+0x20a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4a      	ldr	r2, [pc, #296]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <HAL_GPIO_Init+0x206>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a49      	ldr	r2, [pc, #292]	; (8001ff4 <HAL_GPIO_Init+0x320>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x202>
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	e00c      	b.n	8001ef0 <HAL_GPIO_Init+0x21c>
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	e00a      	b.n	8001ef0 <HAL_GPIO_Init+0x21c>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x21c>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x21c>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x21c>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x21c>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x21c>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f32:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f38:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f5c:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f62:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f86:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb0:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	f67f ae96 	bls.w	8001cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40021400 	.word	0x40021400
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	40013c00 	.word	0x40013c00

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800200c:	787b      	ldrb	r3, [r7, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002018:	e003      	b.n	8002022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	041a      	lsls	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0cc      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d90c      	bls.n	800206c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0b8      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800208e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a52      	ldr	r2, [pc, #328]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b50      	ldr	r3, [pc, #320]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	494d      	ldr	r1, [pc, #308]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d044      	beq.n	8002150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d119      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e067      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210e:	4b37      	ldr	r3, [pc, #220]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4934      	ldr	r1, [pc, #208]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002120:	f7ff f9c8 	bl	80014b4 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7ff f9c4 	bl	80014b4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e04f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d20c      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e032      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4916      	ldr	r1, [pc, #88]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	490e      	ldr	r1, [pc, #56]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021b6:	f000 fb7f 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	490a      	ldr	r1, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f928 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023c00 	.word	0x40023c00
 80021ec:	40023800 	.word	0x40023800
 80021f0:	080055dc 	.word	0x080055dc
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	080055ec 	.word	0x080055ec

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002240:	f7ff ffdc 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0b5b      	lsrs	r3, r3, #13
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	080055ec 	.word	0x080055ec

08002264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	; 0x30
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d010      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800229c:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800229e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	496c      	ldr	r1, [pc, #432]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80022ba:	2301      	movs	r3, #1
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d010      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80022ca:	4b64      	ldr	r3, [pc, #400]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	4960      	ldr	r1, [pc, #384]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80022e8:	2301      	movs	r3, #1
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4955      	ldr	r1, [pc, #340]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002316:	d101      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002318:	2301      	movs	r3, #1
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002324:	2301      	movs	r3, #1
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002334:	4b49      	ldr	r3, [pc, #292]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800233a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002342:	4946      	ldr	r1, [pc, #280]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002352:	d101      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002354:	2301      	movs	r3, #1
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002360:	2301      	movs	r3, #1
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 808a 	beq.w	8002486 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a38      	ldr	r2, [pc, #224]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800238e:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a33      	ldr	r2, [pc, #204]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800239a:	f7ff f88b 	bl	80014b4 <HAL_GetTick>
 800239e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80023a2:	f7ff f887 	bl	80014b4 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e278      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023b4:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023c0:	4b26      	ldr	r3, [pc, #152]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d02f      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d8:	6a3a      	ldr	r2, [r7, #32]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d028      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023de:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d114      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff f855 	bl	80014b4 <HAL_GetTick>
 800240a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff f851 	bl	80014b4 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e240      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ee      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800243c:	d114      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800244e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002452:	4902      	ldr	r1, [pc, #8]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]
 8002458:	e00c      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	40007000 	.word	0x40007000
 8002464:	42470e40 	.word	0x42470e40
 8002468:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a49      	ldr	r2, [pc, #292]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800246e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002472:	6093      	str	r3, [r2, #8]
 8002474:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002480:	4944      	ldr	r1, [pc, #272]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002482:	4313      	orrs	r3, r2
 8002484:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800249a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80024a8:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	4937      	ldr	r1, [pc, #220]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024ca:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	492e      	ldr	r1, [pc, #184]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d011      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	4926      	ldr	r1, [pc, #152]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800250a:	d101      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800250c:	2301      	movs	r3, #1
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002522:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	491a      	ldr	r1, [pc, #104]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	2b00      	cmp	r3, #0
 800253c:	d011      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002544:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254c:	4911      	ldr	r1, [pc, #68]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800255c:	d101      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800255e:	2301      	movs	r3, #1
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d005      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002570:	f040 80ff 	bne.w	8002772 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800257a:	f7fe ff9b 	bl	80014b4 <HAL_GetTick>
 800257e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002580:	e00e      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002582:	f7fe ff97 	bl	80014b4 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d907      	bls.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e188      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002594:	40023800 	.word	0x40023800
 8002598:	424711e0 	.word	0x424711e0
 800259c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025a0:	4b7e      	ldr	r3, [pc, #504]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ea      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d028      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d124      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80025d4:	4b71      	ldr	r3, [pc, #452]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	3301      	adds	r3, #1
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025e6:	4b6d      	ldr	r3, [pc, #436]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ec:	0e1b      	lsrs	r3, r3, #24
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	019b      	lsls	r3, r3, #6
 80025fe:	431a      	orrs	r2, r3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	085b      	lsrs	r3, r3, #1
 8002604:	3b01      	subs	r3, #1
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	431a      	orrs	r2, r3
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	071b      	lsls	r3, r3, #28
 8002616:	4961      	ldr	r1, [pc, #388]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800263c:	2b00      	cmp	r3, #0
 800263e:	d035      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002648:	d130      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800264c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	3301      	adds	r3, #1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800265c:	4b4f      	ldr	r3, [pc, #316]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800265e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002662:	0f1b      	lsrs	r3, r3, #28
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	019b      	lsls	r3, r3, #6
 8002674:	431a      	orrs	r2, r3
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	3b01      	subs	r3, #1
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	431a      	orrs	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	071b      	lsls	r3, r3, #28
 800268c:	4943      	ldr	r1, [pc, #268]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002694:	4b41      	ldr	r3, [pc, #260]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269a:	f023 021f 	bic.w	r2, r3, #31
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	493d      	ldr	r1, [pc, #244]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d029      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c0:	d124      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	3301      	adds	r3, #1
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026da:	0f1b      	lsrs	r3, r3, #28
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	019b      	lsls	r3, r3, #6
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	3b01      	subs	r3, #1
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	431a      	orrs	r2, r3
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	431a      	orrs	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	071b      	lsls	r3, r3, #28
 8002704:	4925      	ldr	r1, [pc, #148]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002714:	2b00      	cmp	r3, #0
 8002716:	d016      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	019b      	lsls	r3, r3, #6
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	3b01      	subs	r3, #1
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	061b      	lsls	r3, r3, #24
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	071b      	lsls	r3, r3, #28
 800273e:	4917      	ldr	r1, [pc, #92]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800274c:	f7fe feb2 	bl	80014b4 <HAL_GetTick>
 8002750:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002754:	f7fe feae 	bl	80014b4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e09f      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	2b01      	cmp	r3, #1
 8002776:	f040 8095 	bne.w	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe fe98 	bl	80014b4 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002786:	e00f      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002788:	f7fe fe94 	bl	80014b4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d908      	bls.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e085      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	42470068 	.word	0x42470068
 80027a4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027a8:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b4:	d0e8      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x566>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d02b      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d127      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80027de:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	019b      	lsls	r3, r3, #6
 80027fa:	431a      	orrs	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	4928      	ldr	r1, [pc, #160]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002814:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	3b01      	subs	r3, #1
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	4922      	ldr	r1, [pc, #136]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01d      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002842:	d118      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	0e1b      	lsrs	r3, r3, #24
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	019b      	lsls	r3, r3, #6
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	3b01      	subs	r3, #1
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	4910      	ldr	r1, [pc, #64]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800287c:	f7fe fe1a 	bl	80014b4 <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002884:	f7fe fe16 	bl	80014b4 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e007      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800289e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a2:	d1ef      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3730      	adds	r7, #48	; 0x30
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	42470070 	.word	0x42470070

080028b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028bc:	b0a6      	sub	sp, #152	; 0x98
 80028be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028de:	4bc8      	ldr	r3, [pc, #800]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	f200 817e 	bhi.w	8002be8 <HAL_RCC_GetSysClockFreq+0x330>
 80028ec:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80028ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f2:	bf00      	nop
 80028f4:	08002929 	.word	0x08002929
 80028f8:	08002be9 	.word	0x08002be9
 80028fc:	08002be9 	.word	0x08002be9
 8002900:	08002be9 	.word	0x08002be9
 8002904:	08002931 	.word	0x08002931
 8002908:	08002be9 	.word	0x08002be9
 800290c:	08002be9 	.word	0x08002be9
 8002910:	08002be9 	.word	0x08002be9
 8002914:	08002939 	.word	0x08002939
 8002918:	08002be9 	.word	0x08002be9
 800291c:	08002be9 	.word	0x08002be9
 8002920:	08002be9 	.word	0x08002be9
 8002924:	08002aa3 	.word	0x08002aa3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4bb6      	ldr	r3, [pc, #728]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x34c>)
 800292a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800292e:	e15f      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002930:	4bb5      	ldr	r3, [pc, #724]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x350>)
 8002932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002936:	e15b      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002938:	4bb1      	ldr	r3, [pc, #708]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002944:	4bae      	ldr	r3, [pc, #696]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d031      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002950:	4bab      	ldr	r3, [pc, #684]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	2200      	movs	r2, #0
 8002958:	66bb      	str	r3, [r7, #104]	; 0x68
 800295a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800295c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002962:	663b      	str	r3, [r7, #96]	; 0x60
 8002964:	2300      	movs	r3, #0
 8002966:	667b      	str	r3, [r7, #100]	; 0x64
 8002968:	4ba7      	ldr	r3, [pc, #668]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x350>)
 800296a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800296e:	462a      	mov	r2, r5
 8002970:	fb03 f202 	mul.w	r2, r3, r2
 8002974:	2300      	movs	r3, #0
 8002976:	4621      	mov	r1, r4
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	4aa2      	ldr	r2, [pc, #648]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x350>)
 8002980:	4621      	mov	r1, r4
 8002982:	fba1 1202 	umull	r1, r2, r1, r2
 8002986:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002988:	460a      	mov	r2, r1
 800298a:	67ba      	str	r2, [r7, #120]	; 0x78
 800298c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800298e:	4413      	add	r3, r2
 8002990:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002996:	2200      	movs	r2, #0
 8002998:	65bb      	str	r3, [r7, #88]	; 0x58
 800299a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800299c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80029a4:	f7fd fc8c 	bl	80002c0 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4613      	mov	r3, r2
 80029ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029b2:	e064      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b4:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	2200      	movs	r2, #0
 80029bc:	653b      	str	r3, [r7, #80]	; 0x50
 80029be:	657a      	str	r2, [r7, #84]	; 0x54
 80029c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029c8:	2300      	movs	r3, #0
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029cc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80029d0:	4622      	mov	r2, r4
 80029d2:	462b      	mov	r3, r5
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	0159      	lsls	r1, r3, #5
 80029de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e2:	0150      	lsls	r0, r2, #5
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4621      	mov	r1, r4
 80029ea:	1a51      	subs	r1, r2, r1
 80029ec:	6139      	str	r1, [r7, #16]
 80029ee:	4629      	mov	r1, r5
 80029f0:	eb63 0301 	sbc.w	r3, r3, r1
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a02:	4659      	mov	r1, fp
 8002a04:	018b      	lsls	r3, r1, #6
 8002a06:	4651      	mov	r1, sl
 8002a08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	018a      	lsls	r2, r1, #6
 8002a10:	4651      	mov	r1, sl
 8002a12:	ebb2 0801 	subs.w	r8, r2, r1
 8002a16:	4659      	mov	r1, fp
 8002a18:	eb63 0901 	sbc.w	r9, r3, r1
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a30:	4690      	mov	r8, r2
 8002a32:	4699      	mov	r9, r3
 8002a34:	4623      	mov	r3, r4
 8002a36:	eb18 0303 	adds.w	r3, r8, r3
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	eb49 0303 	adc.w	r3, r9, r3
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a50:	4629      	mov	r1, r5
 8002a52:	028b      	lsls	r3, r1, #10
 8002a54:	4621      	mov	r1, r4
 8002a56:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	028a      	lsls	r2, r1, #10
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a66:	2200      	movs	r2, #0
 8002a68:	643b      	str	r3, [r7, #64]	; 0x40
 8002a6a:	647a      	str	r2, [r7, #68]	; 0x44
 8002a6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a70:	f7fd fc26 	bl	80002c0 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a7e:	4b60      	ldr	r3, [pc, #384]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002a90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002aa0:	e0a6      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa2:	4b57      	ldr	r3, [pc, #348]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aae:	4b54      	ldr	r3, [pc, #336]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02a      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aba:	4b51      	ldr	r3, [pc, #324]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002acc:	2100      	movs	r1, #0
 8002ace:	4b4e      	ldr	r3, [pc, #312]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ad0:	fb03 f201 	mul.w	r2, r3, r1
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	fb00 f303 	mul.w	r3, r0, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	4a4a      	ldr	r2, [pc, #296]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ade:	fba0 1202 	umull	r1, r2, r0, r2
 8002ae2:	677a      	str	r2, [r7, #116]	; 0x74
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	673a      	str	r2, [r7, #112]	; 0x70
 8002ae8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002aea:	4413      	add	r3, r2
 8002aec:	677b      	str	r3, [r7, #116]	; 0x74
 8002aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002af2:	2200      	movs	r2, #0
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
 8002af6:	637a      	str	r2, [r7, #52]	; 0x34
 8002af8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002afc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002b00:	f7fd fbde 	bl	80002c0 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b0e:	e05b      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b10:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	2200      	movs	r2, #0
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
 8002b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	464b      	mov	r3, r9
 8002b30:	f04f 0000 	mov.w	r0, #0
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	0159      	lsls	r1, r3, #5
 8002b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3e:	0150      	lsls	r0, r2, #5
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4641      	mov	r1, r8
 8002b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b64:	ebb2 040a 	subs.w	r4, r2, sl
 8002b68:	eb63 050b 	sbc.w	r5, r3, fp
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	00eb      	lsls	r3, r5, #3
 8002b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4643      	mov	r3, r8
 8002b82:	18e3      	adds	r3, r4, r3
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	464b      	mov	r3, r9
 8002b88:	eb45 0303 	adc.w	r3, r5, r3
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	028b      	lsls	r3, r1, #10
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	028a      	lsls	r2, r1, #10
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	61fa      	str	r2, [r7, #28]
 8002bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bba:	f7fd fb81 	bl	80002c0 <__aeabi_uldivmod>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0f1b      	lsrs	r3, r3, #28
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002be6:	e003      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002bee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3798      	adds	r7, #152	; 0x98
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	00f42400 	.word	0x00f42400
 8002c08:	017d7840 	.word	0x017d7840

08002c0c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c12:	f7fe fc4f 	bl	80014b4 <HAL_GetTick>
 8002c16:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c18:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a71      	ldr	r2, [pc, #452]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe fc45 	bl	80014b4 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0d0      	b.n	8002dda <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002c38:	4b6a      	ldr	r3, [pc, #424]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002c44:	4b67      	ldr	r3, [pc, #412]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a66      	ldr	r2, [pc, #408]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c50:	f7fe fc30 	bl	80014b4 <HAL_GetTick>
 8002c54:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002c56:	4b63      	ldr	r3, [pc, #396]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5e:	f7fe fc29 	bl	80014b4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0b2      	b.n	8002dda <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002c74:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c80:	f7fe fc18 	bl	80014b4 <HAL_GetTick>
 8002c84:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002c86:	4b57      	ldr	r3, [pc, #348]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a56      	ldr	r2, [pc, #344]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002c8c:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002c90:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe fc0e 	bl	80014b4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e099      	b.n	8002dda <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ca6:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002cb2:	f7fe fbff 	bl	80014b4 <HAL_GetTick>
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002cb8:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a49      	ldr	r2, [pc, #292]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe fbf5 	bl	80014b4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e080      	b.n	8002dda <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002cd8:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ce4:	f7fe fbe6 	bl	80014b4 <HAL_GetTick>
 8002ce8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002cea:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3d      	ldr	r2, [pc, #244]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002cf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cf8:	f7fe fbdc 	bl	80014b4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e067      	b.n	8002dda <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d16:	f7fe fbcd 	bl	80014b4 <HAL_GetTick>
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002d1c:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a30      	ldr	r2, [pc, #192]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d2a:	f7fe fbc3 	bl	80014b4 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e04e      	b.n	8002dda <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d4a:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <HAL_RCC_DeInit+0x1dc>)
 8002d4c:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d50:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <HAL_RCC_DeInit+0x1dc>)
 8002d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <HAL_RCC_DeInit+0x1e0>)
 8002d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002d5e:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d64:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002d68:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	4a1a      	ldr	r2, [pc, #104]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d88:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002d8c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002da0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <HAL_RCC_DeInit+0x1d8>)
 8002db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dbc:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_RCC_DeInit+0x1e4>)
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <HAL_RCC_DeInit+0x1e8>)
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <HAL_RCC_DeInit+0x1ec>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe fb2f 	bl	800142c <HAL_InitTick>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	24003010 	.word	0x24003010
 8002dec:	04003010 	.word	0x04003010
 8002df0:	20000000 	.word	0x20000000
 8002df4:	00f42400 	.word	0x00f42400
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e28d      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8083 	beq.w	8002f22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e1c:	4b94      	ldr	r3, [pc, #592]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d019      	beq.n	8002e5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e28:	4b91      	ldr	r3, [pc, #580]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e34:	4b8e      	ldr	r3, [pc, #568]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e40:	d00c      	beq.n	8002e5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e42:	4b8b      	ldr	r3, [pc, #556]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	d112      	bne.n	8002e74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4e:	4b88      	ldr	r3, [pc, #544]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	4b84      	ldr	r3, [pc, #528]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d05b      	beq.n	8002f20 <HAL_RCC_OscConfig+0x124>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d157      	bne.n	8002f20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e25a      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCC_OscConfig+0x90>
 8002e7e:	4b7c      	ldr	r3, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7b      	ldr	r2, [pc, #492]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e01d      	b.n	8002ec8 <HAL_RCC_OscConfig+0xcc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xb4>
 8002e96:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a75      	ldr	r2, [pc, #468]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b73      	ldr	r3, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a72      	ldr	r2, [pc, #456]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0xcc>
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4b6c      	ldr	r3, [pc, #432]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6b      	ldr	r2, [pc, #428]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d013      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe faf0 	bl	80014b4 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe faec 	bl	80014b4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e21f      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xdc>
 8002ef6:	e014      	b.n	8002f22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fadc 	bl	80014b4 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe fad8 	bl	80014b4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e20b      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	4b57      	ldr	r3, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x104>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d06f      	beq.n	800300e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f2e:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d017      	beq.n	8002f6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f3a:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d105      	bne.n	8002f52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f46:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d11c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5e:	4b44      	ldr	r3, [pc, #272]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d116      	bne.n	8002f98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6a:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_RCC_OscConfig+0x186>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e1d3      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4937      	ldr	r1, [pc, #220]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	e03a      	b.n	800300e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa0:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCC_OscConfig+0x278>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fa85 	bl	80014b4 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fe fa81 	bl	80014b4 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e1b4      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4925      	ldr	r1, [pc, #148]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]
 8002fe0:	e015      	b.n	800300e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCC_OscConfig+0x278>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fa64 	bl	80014b4 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff0:	f7fe fa60 	bl	80014b4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e193      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d036      	beq.n	8003088 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fe fa44 	bl	80014b4 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003030:	f7fe fa40 	bl	80014b4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e173      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8003044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x234>
 800304e:	e01b      	b.n	8003088 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003056:	f7fe fa2d 	bl	80014b4 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	e00e      	b.n	800307c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305e:	f7fe fa29 	bl	80014b4 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d907      	bls.n	800307c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e15c      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
 8003070:	40023800 	.word	0x40023800
 8003074:	42470000 	.word	0x42470000
 8003078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	4b8a      	ldr	r3, [pc, #552]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ea      	bne.n	800305e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8097 	beq.w	80031c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309a:	4b83      	ldr	r3, [pc, #524]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	4b7f      	ldr	r3, [pc, #508]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	4a7e      	ldr	r2, [pc, #504]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	6413      	str	r3, [r2, #64]	; 0x40
 80030b6:	4b7c      	ldr	r3, [pc, #496]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b79      	ldr	r3, [pc, #484]	; (80032ac <HAL_RCC_OscConfig+0x4b0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d118      	bne.n	8003104 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b76      	ldr	r3, [pc, #472]	; (80032ac <HAL_RCC_OscConfig+0x4b0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a75      	ldr	r2, [pc, #468]	; (80032ac <HAL_RCC_OscConfig+0x4b0>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fe f9e9 	bl	80014b4 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7fe f9e5 	bl	80014b4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e118      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x4b0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d106      	bne.n	800311a <HAL_RCC_OscConfig+0x31e>
 800310c:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
 8003118:	e01c      	b.n	8003154 <HAL_RCC_OscConfig+0x358>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x340>
 8003122:	4b61      	ldr	r3, [pc, #388]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a60      	ldr	r2, [pc, #384]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a5d      	ldr	r2, [pc, #372]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0x358>
 800313c:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a59      	ldr	r2, [pc, #356]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
 8003148:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a56      	ldr	r2, [pc, #344]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 800314e:	f023 0304 	bic.w	r3, r3, #4
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d015      	beq.n	8003188 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe f9aa 	bl	80014b4 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fe f9a6 	bl	80014b4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0d7      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317a:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0ee      	beq.n	8003164 <HAL_RCC_OscConfig+0x368>
 8003186:	e014      	b.n	80031b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe f994 	bl	80014b4 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fe f990 	bl	80014b4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0c1      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a6:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ee      	bne.n	8003190 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b8:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	4a3a      	ldr	r2, [pc, #232]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 80031be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80ad 	beq.w	8003328 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d060      	beq.n	800329c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d145      	bne.n	800326e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	4b33      	ldr	r3, [pc, #204]	; (80032b0 <HAL_RCC_OscConfig+0x4b4>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe f964 	bl	80014b4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe f960 	bl	80014b4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e093      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	019b      	lsls	r3, r3, #6
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	071b      	lsls	r3, r3, #28
 800323a:	491b      	ldr	r1, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_RCC_OscConfig+0x4b4>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fe f935 	bl	80014b4 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324e:	f7fe f931 	bl	80014b4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e064      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x452>
 800326c:	e05c      	b.n	8003328 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_RCC_OscConfig+0x4b4>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f91e 	bl	80014b4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe f91a 	bl	80014b4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e04d      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x480>
 800329a:	e045      	b.n	8003328 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e040      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40007000 	.word	0x40007000
 80032b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HAL_RCC_OscConfig+0x538>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d030      	beq.n	8003324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d129      	bne.n	8003324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d122      	bne.n	8003324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d119      	bne.n	8003324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	3b01      	subs	r3, #1
 80032fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d10f      	bne.n	8003324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e073      	b.n	8003436 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7f5b      	ldrb	r3, [r3, #29]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d105      	bne.n	8003364 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fe70 	bl	8001044 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d055      	beq.n	8003424 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	22ca      	movs	r2, #202	; 0xca
 800337e:	625a      	str	r2, [r3, #36]	; 0x24
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2253      	movs	r2, #83	; 0x53
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f99d 	bl	80036c8 <RTC_EnterInitMode>
 800338e:	4603      	mov	r3, r0
 8003390:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d12c      	bne.n	80033f2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033aa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6919      	ldr	r1, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	041a      	lsls	r2, r3, #16
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f9a4 	bl	8003736 <RTC_ExitInitMode>
 80033ee:	4603      	mov	r3, r0
 80033f0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d110      	bne.n	800341a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	22ff      	movs	r2, #255	; 0xff
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
 8003422:	e001      	b.n	8003428 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800343e:	b590      	push	{r4, r7, lr}
 8003440:	b087      	sub	sp, #28
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	7f1b      	ldrb	r3, [r3, #28]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_RTC_SetTime+0x1c>
 8003456:	2302      	movs	r3, #2
 8003458:	e087      	b.n	800356a <HAL_RTC_SetTime+0x12c>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2202      	movs	r2, #2
 8003464:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d126      	bne.n	80034ba <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2200      	movs	r2, #0
 800347e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f97b 	bl	8003780 <RTC_ByteToBcd2>
 800348a:	4603      	mov	r3, r0
 800348c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f974 	bl	8003780 <RTC_ByteToBcd2>
 8003498:	4603      	mov	r3, r0
 800349a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800349c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	789b      	ldrb	r3, [r3, #2]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f96c 	bl	8003780 <RTC_ByteToBcd2>
 80034a8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034aa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	78db      	ldrb	r3, [r3, #3]
 80034b2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e018      	b.n	80034ec <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2200      	movs	r2, #0
 80034cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034da:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034e0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	78db      	ldrb	r3, [r3, #3]
 80034e6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	22ca      	movs	r2, #202	; 0xca
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2253      	movs	r2, #83	; 0x53
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f8e3 	bl	80036c8 <RTC_EnterInitMode>
 8003502:	4603      	mov	r3, r0
 8003504:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d120      	bne.n	800354e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003516:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800351a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800352a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	431a      	orrs	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f8f6 	bl	8003736 <RTC_ExitInitMode>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	22ff      	movs	r2, #255	; 0xff
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]

  return status;
 8003568:	7cfb      	ldrb	r3, [r7, #19]
}
 800356a:	4618      	mov	r0, r3
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd90      	pop	{r4, r7, pc}

08003572 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003572:	b590      	push	{r4, r7, lr}
 8003574:	b087      	sub	sp, #28
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	7f1b      	ldrb	r3, [r3, #28]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_RTC_SetDate+0x1c>
 800358a:	2302      	movs	r3, #2
 800358c:	e071      	b.n	8003672 <HAL_RTC_SetDate+0x100>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2202      	movs	r2, #2
 8003598:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10e      	bne.n	80035be <HAL_RTC_SetDate+0x4c>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	785b      	ldrb	r3, [r3, #1]
 80035b0:	f023 0310 	bic.w	r3, r3, #16
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	330a      	adds	r3, #10
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11c      	bne.n	80035fe <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	78db      	ldrb	r3, [r3, #3]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f8d9 	bl	8003780 <RTC_ByteToBcd2>
 80035ce:	4603      	mov	r3, r0
 80035d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f8d2 	bl	8003780 <RTC_ByteToBcd2>
 80035dc:	4603      	mov	r3, r0
 80035de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80035e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	789b      	ldrb	r3, [r3, #2]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f8ca 	bl	8003780 <RTC_ByteToBcd2>
 80035ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80035ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e00e      	b.n	800361c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	78db      	ldrb	r3, [r3, #3]
 8003602:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800360a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003610:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	22ca      	movs	r2, #202	; 0xca
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2253      	movs	r2, #83	; 0x53
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f84b 	bl	80036c8 <RTC_EnterInitMode>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10c      	bne.n	8003656 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003646:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800364a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f872 	bl	8003736 <RTC_ExitInitMode>
 8003652:	4603      	mov	r3, r0
 8003654:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	22ff      	movs	r2, #255	; 0xff
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	771a      	strb	r2, [r3, #28]

  return status;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
}
 8003672:	4618      	mov	r0, r3
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bd90      	pop	{r4, r7, pc}
	...

0800367c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <HAL_RTC_WaitForSynchro+0x48>)
 800368e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003690:	f7fd ff10 	bl	80014b4 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003696:	e009      	b.n	80036ac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003698:	f7fd ff0c 	bl	80014b4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036a6:	d901      	bls.n	80036ac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e007      	b.n	80036bc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0ee      	beq.n	8003698 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	00017f5f 	.word	0x00017f5f

080036c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d122      	bne.n	800372c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036f6:	f7fd fedd 	bl	80014b4 <HAL_GetTick>
 80036fa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036fc:	e00c      	b.n	8003718 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036fe:	f7fd fed9 	bl	80014b4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370c:	d904      	bls.n	8003718 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2204      	movs	r2, #4
 8003712:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <RTC_EnterInitMode+0x64>
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d1e8      	bne.n	80036fe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003750:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff8b 	bl	800367c <HAL_RTC_WaitForSynchro>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800378e:	e005      	b.n	800379c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	3b0a      	subs	r3, #10
 800379a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	2b09      	cmp	r3, #9
 80037a0:	d8f6      	bhi.n	8003790 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	b2db      	uxtb	r3, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e042      	b.n	8003854 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fc58 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fa09 	bl	8003c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b20      	cmp	r3, #32
 800387a:	d175      	bne.n	8003968 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_UART_Transmit+0x2c>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e06e      	b.n	800396a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2221      	movs	r2, #33	; 0x21
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389a:	f7fd fe0b 	bl	80014b4 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d108      	bne.n	80038c8 <HAL_UART_Transmit+0x6c>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e003      	b.n	80038d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d0:	e02e      	b.n	8003930 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f8df 	bl	8003aa0 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e03a      	b.n	800396a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3302      	adds	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e007      	b.n	8003922 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1cb      	bne.n	80038d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	2140      	movs	r1, #64	; 0x40
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f8ab 	bl	8003aa0 <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e006      	b.n	800396a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b08a      	sub	sp, #40	; 0x28
 8003976:	af02      	add	r7, sp, #8
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b20      	cmp	r3, #32
 8003990:	f040 8081 	bne.w	8003a96 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_UART_Receive+0x2e>
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e079      	b.n	8003a98 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2222      	movs	r2, #34	; 0x22
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039b8:	f7fd fd7c 	bl	80014b4 <HAL_GetTick>
 80039bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d108      	bne.n	80039e6 <HAL_UART_Receive+0x74>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d104      	bne.n	80039e6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	e003      	b.n	80039ee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80039ee:	e047      	b.n	8003a80 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2200      	movs	r2, #0
 80039f8:	2120      	movs	r1, #32
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f850 	bl	8003aa0 <UART_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e042      	b.n	8003a98 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10c      	bne.n	8003a32 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e01f      	b.n	8003a72 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	d007      	beq.n	8003a4c <HAL_UART_Receive+0xda>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <HAL_UART_Receive+0xe8>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e008      	b.n	8003a6c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1b2      	bne.n	80039f0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e000      	b.n	8003a98 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
  }
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab0:	e03b      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab8:	d037      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fd fcfb 	bl	80014b4 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	6a3a      	ldr	r2, [r7, #32]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e03a      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d023      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d020      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d01d      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d116      	bne.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f81d 	bl	8003b52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e00f      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4013      	ands	r3, r2
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d0b4      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b095      	sub	sp, #84	; 0x54
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b7a:	643a      	str	r2, [r7, #64]	; 0x40
 8003b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e5      	bne.n	8003b5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d119      	bne.n	8003bfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 0310 	bic.w	r3, r3, #16
 8003be0:	647b      	str	r3, [r7, #68]	; 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bea:	61ba      	str	r2, [r7, #24]
 8003bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c0c:	bf00      	nop
 8003c0e:	3754      	adds	r7, #84	; 0x54
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	b0c0      	sub	sp, #256	; 0x100
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	68d9      	ldr	r1, [r3, #12]
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	ea40 0301 	orr.w	r3, r0, r1
 8003c40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c70:	f021 010c 	bic.w	r1, r1, #12
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c92:	6999      	ldr	r1, [r3, #24]
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	ea40 0301 	orr.w	r3, r0, r1
 8003c9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b8f      	ldr	r3, [pc, #572]	; (8003ee4 <UART_SetConfig+0x2cc>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d005      	beq.n	8003cb8 <UART_SetConfig+0xa0>
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <UART_SetConfig+0x2d0>)
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d104      	bne.n	8003cc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb8:	f7fe fac0 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8003cbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cc0:	e003      	b.n	8003cca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cc2:	f7fe faa7 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8003cc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd4:	f040 810c 	bne.w	8003ef0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ce2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ce6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cea:	4622      	mov	r2, r4
 8003cec:	462b      	mov	r3, r5
 8003cee:	1891      	adds	r1, r2, r2
 8003cf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cf2:	415b      	adcs	r3, r3
 8003cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	eb12 0801 	adds.w	r8, r2, r1
 8003d00:	4629      	mov	r1, r5
 8003d02:	eb43 0901 	adc.w	r9, r3, r1
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d1a:	4690      	mov	r8, r2
 8003d1c:	4699      	mov	r9, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	eb18 0303 	adds.w	r3, r8, r3
 8003d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d28:	462b      	mov	r3, r5
 8003d2a:	eb49 0303 	adc.w	r3, r9, r3
 8003d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d46:	460b      	mov	r3, r1
 8003d48:	18db      	adds	r3, r3, r3
 8003d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	eb42 0303 	adc.w	r3, r2, r3
 8003d52:	657b      	str	r3, [r7, #84]	; 0x54
 8003d54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d5c:	f7fc fab0 	bl	80002c0 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4b61      	ldr	r3, [pc, #388]	; (8003eec <UART_SetConfig+0x2d4>)
 8003d66:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	011c      	lsls	r4, r3, #4
 8003d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d80:	4642      	mov	r2, r8
 8003d82:	464b      	mov	r3, r9
 8003d84:	1891      	adds	r1, r2, r2
 8003d86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d88:	415b      	adcs	r3, r3
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d90:	4641      	mov	r1, r8
 8003d92:	eb12 0a01 	adds.w	sl, r2, r1
 8003d96:	4649      	mov	r1, r9
 8003d98:	eb43 0b01 	adc.w	fp, r3, r1
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003da8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db0:	4692      	mov	sl, r2
 8003db2:	469b      	mov	fp, r3
 8003db4:	4643      	mov	r3, r8
 8003db6:	eb1a 0303 	adds.w	r3, sl, r3
 8003dba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003dc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003dd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	18db      	adds	r3, r3, r3
 8003de0:	643b      	str	r3, [r7, #64]	; 0x40
 8003de2:	4613      	mov	r3, r2
 8003de4:	eb42 0303 	adc.w	r3, r2, r3
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003df2:	f7fc fa65 	bl	80002c0 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <UART_SetConfig+0x2d4>)
 8003dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2264      	movs	r2, #100	; 0x64
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	1acb      	subs	r3, r1, r3
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e12:	4b36      	ldr	r3, [pc, #216]	; (8003eec <UART_SetConfig+0x2d4>)
 8003e14:	fba3 2302 	umull	r2, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e20:	441c      	add	r4, r3
 8003e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	1891      	adds	r1, r2, r2
 8003e3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e3c:	415b      	adcs	r3, r3
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e44:	4641      	mov	r1, r8
 8003e46:	1851      	adds	r1, r2, r1
 8003e48:	6339      	str	r1, [r7, #48]	; 0x30
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	414b      	adcs	r3, r1
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	00cb      	lsls	r3, r1, #3
 8003e60:	4651      	mov	r1, sl
 8003e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e66:	4651      	mov	r1, sl
 8003e68:	00ca      	lsls	r2, r1, #3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4642      	mov	r2, r8
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e78:	464b      	mov	r3, r9
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	eb42 0303 	adc.w	r3, r2, r3
 8003e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e98:	460b      	mov	r3, r1
 8003e9a:	18db      	adds	r3, r3, r3
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	eb42 0303 	adc.w	r3, r2, r3
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003eae:	f7fc fa07 	bl	80002c0 <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <UART_SetConfig+0x2d4>)
 8003eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	2164      	movs	r1, #100	; 0x64
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	3332      	adds	r3, #50	; 0x32
 8003eca:	4a08      	ldr	r2, [pc, #32]	; (8003eec <UART_SetConfig+0x2d4>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	f003 0207 	and.w	r2, r3, #7
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4422      	add	r2, r4
 8003ede:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ee0:	e106      	b.n	80040f0 <UART_SetConfig+0x4d8>
 8003ee2:	bf00      	nop
 8003ee4:	40011000 	.word	0x40011000
 8003ee8:	40011400 	.word	0x40011400
 8003eec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003efa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003efe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f02:	4642      	mov	r2, r8
 8003f04:	464b      	mov	r3, r9
 8003f06:	1891      	adds	r1, r2, r2
 8003f08:	6239      	str	r1, [r7, #32]
 8003f0a:	415b      	adcs	r3, r3
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f12:	4641      	mov	r1, r8
 8003f14:	1854      	adds	r4, r2, r1
 8003f16:	4649      	mov	r1, r9
 8003f18:	eb43 0501 	adc.w	r5, r3, r1
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	00eb      	lsls	r3, r5, #3
 8003f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f2a:	00e2      	lsls	r2, r4, #3
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	461d      	mov	r5, r3
 8003f30:	4643      	mov	r3, r8
 8003f32:	18e3      	adds	r3, r4, r3
 8003f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f38:	464b      	mov	r3, r9
 8003f3a:	eb45 0303 	adc.w	r3, r5, r3
 8003f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f5e:	4629      	mov	r1, r5
 8003f60:	008b      	lsls	r3, r1, #2
 8003f62:	4621      	mov	r1, r4
 8003f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f68:	4621      	mov	r1, r4
 8003f6a:	008a      	lsls	r2, r1, #2
 8003f6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f70:	f7fc f9a6 	bl	80002c0 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4b60      	ldr	r3, [pc, #384]	; (80040fc <UART_SetConfig+0x4e4>)
 8003f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	011c      	lsls	r4, r3, #4
 8003f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	1891      	adds	r1, r2, r2
 8003f9a:	61b9      	str	r1, [r7, #24]
 8003f9c:	415b      	adcs	r3, r3
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	1851      	adds	r1, r2, r1
 8003fa8:	6139      	str	r1, [r7, #16]
 8003faa:	4649      	mov	r1, r9
 8003fac:	414b      	adcs	r3, r1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	00cb      	lsls	r3, r1, #3
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	00ca      	lsls	r2, r1, #3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fd8:	464b      	mov	r3, r9
 8003fda:	460a      	mov	r2, r1
 8003fdc:	eb42 0303 	adc.w	r3, r2, r3
 8003fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	008b      	lsls	r3, r1, #2
 8004000:	4641      	mov	r1, r8
 8004002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004006:	4641      	mov	r1, r8
 8004008:	008a      	lsls	r2, r1, #2
 800400a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800400e:	f7fc f957 	bl	80002c0 <__aeabi_uldivmod>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4611      	mov	r1, r2
 8004018:	4b38      	ldr	r3, [pc, #224]	; (80040fc <UART_SetConfig+0x4e4>)
 800401a:	fba3 2301 	umull	r2, r3, r3, r1
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2264      	movs	r2, #100	; 0x64
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	1acb      	subs	r3, r1, r3
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	3332      	adds	r3, #50	; 0x32
 800402c:	4a33      	ldr	r2, [pc, #204]	; (80040fc <UART_SetConfig+0x4e4>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004038:	441c      	add	r4, r3
 800403a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403e:	2200      	movs	r2, #0
 8004040:	673b      	str	r3, [r7, #112]	; 0x70
 8004042:	677a      	str	r2, [r7, #116]	; 0x74
 8004044:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004048:	4642      	mov	r2, r8
 800404a:	464b      	mov	r3, r9
 800404c:	1891      	adds	r1, r2, r2
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	415b      	adcs	r3, r3
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004058:	4641      	mov	r1, r8
 800405a:	1851      	adds	r1, r2, r1
 800405c:	6039      	str	r1, [r7, #0]
 800405e:	4649      	mov	r1, r9
 8004060:	414b      	adcs	r3, r1
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004070:	4659      	mov	r1, fp
 8004072:	00cb      	lsls	r3, r1, #3
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407a:	4651      	mov	r1, sl
 800407c:	00ca      	lsls	r2, r1, #3
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	4603      	mov	r3, r0
 8004084:	4642      	mov	r2, r8
 8004086:	189b      	adds	r3, r3, r2
 8004088:	66bb      	str	r3, [r7, #104]	; 0x68
 800408a:	464b      	mov	r3, r9
 800408c:	460a      	mov	r2, r1
 800408e:	eb42 0303 	adc.w	r3, r2, r3
 8004092:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	663b      	str	r3, [r7, #96]	; 0x60
 800409e:	667a      	str	r2, [r7, #100]	; 0x64
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040ac:	4649      	mov	r1, r9
 80040ae:	008b      	lsls	r3, r1, #2
 80040b0:	4641      	mov	r1, r8
 80040b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b6:	4641      	mov	r1, r8
 80040b8:	008a      	lsls	r2, r1, #2
 80040ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040be:	f7fc f8ff 	bl	80002c0 <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <UART_SetConfig+0x4e4>)
 80040c8:	fba3 1302 	umull	r1, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	2164      	movs	r1, #100	; 0x64
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	3332      	adds	r3, #50	; 0x32
 80040da:	4a08      	ldr	r2, [pc, #32]	; (80040fc <UART_SetConfig+0x4e4>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	f003 020f 	and.w	r2, r3, #15
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4422      	add	r2, r4
 80040ee:	609a      	str	r2, [r3, #8]
}
 80040f0:	bf00      	nop
 80040f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040f6:	46bd      	mov	sp, r7
 80040f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fc:	51eb851f 	.word	0x51eb851f

08004100 <std>:
 8004100:	2300      	movs	r3, #0
 8004102:	b510      	push	{r4, lr}
 8004104:	4604      	mov	r4, r0
 8004106:	e9c0 3300 	strd	r3, r3, [r0]
 800410a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800410e:	6083      	str	r3, [r0, #8]
 8004110:	8181      	strh	r1, [r0, #12]
 8004112:	6643      	str	r3, [r0, #100]	; 0x64
 8004114:	81c2      	strh	r2, [r0, #14]
 8004116:	6183      	str	r3, [r0, #24]
 8004118:	4619      	mov	r1, r3
 800411a:	2208      	movs	r2, #8
 800411c:	305c      	adds	r0, #92	; 0x5c
 800411e:	f000 f91f 	bl	8004360 <memset>
 8004122:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <std+0x58>)
 8004124:	6263      	str	r3, [r4, #36]	; 0x24
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <std+0x5c>)
 8004128:	62a3      	str	r3, [r4, #40]	; 0x28
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <std+0x60>)
 800412c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <std+0x64>)
 8004130:	6323      	str	r3, [r4, #48]	; 0x30
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <std+0x68>)
 8004134:	6224      	str	r4, [r4, #32]
 8004136:	429c      	cmp	r4, r3
 8004138:	d006      	beq.n	8004148 <std+0x48>
 800413a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800413e:	4294      	cmp	r4, r2
 8004140:	d002      	beq.n	8004148 <std+0x48>
 8004142:	33d0      	adds	r3, #208	; 0xd0
 8004144:	429c      	cmp	r4, r3
 8004146:	d105      	bne.n	8004154 <std+0x54>
 8004148:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800414c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004150:	f000 b938 	b.w	80043c4 <__retarget_lock_init_recursive>
 8004154:	bd10      	pop	{r4, pc}
 8004156:	bf00      	nop
 8004158:	08004c25 	.word	0x08004c25
 800415c:	08004c47 	.word	0x08004c47
 8004160:	08004c7f 	.word	0x08004c7f
 8004164:	08004ca3 	.word	0x08004ca3
 8004168:	20000934 	.word	0x20000934

0800416c <stdio_exit_handler>:
 800416c:	4a02      	ldr	r2, [pc, #8]	; (8004178 <stdio_exit_handler+0xc>)
 800416e:	4903      	ldr	r1, [pc, #12]	; (800417c <stdio_exit_handler+0x10>)
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <stdio_exit_handler+0x14>)
 8004172:	f000 b869 	b.w	8004248 <_fwalk_sglue>
 8004176:	bf00      	nop
 8004178:	2000000c 	.word	0x2000000c
 800417c:	08004bbd 	.word	0x08004bbd
 8004180:	20000018 	.word	0x20000018

08004184 <cleanup_stdio>:
 8004184:	6841      	ldr	r1, [r0, #4]
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <cleanup_stdio+0x34>)
 8004188:	4299      	cmp	r1, r3
 800418a:	b510      	push	{r4, lr}
 800418c:	4604      	mov	r4, r0
 800418e:	d001      	beq.n	8004194 <cleanup_stdio+0x10>
 8004190:	f000 fd14 	bl	8004bbc <_fflush_r>
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <cleanup_stdio+0x38>)
 8004198:	4299      	cmp	r1, r3
 800419a:	d002      	beq.n	80041a2 <cleanup_stdio+0x1e>
 800419c:	4620      	mov	r0, r4
 800419e:	f000 fd0d 	bl	8004bbc <_fflush_r>
 80041a2:	68e1      	ldr	r1, [r4, #12]
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <cleanup_stdio+0x3c>)
 80041a6:	4299      	cmp	r1, r3
 80041a8:	d004      	beq.n	80041b4 <cleanup_stdio+0x30>
 80041aa:	4620      	mov	r0, r4
 80041ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b0:	f000 bd04 	b.w	8004bbc <_fflush_r>
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	bf00      	nop
 80041b8:	20000934 	.word	0x20000934
 80041bc:	2000099c 	.word	0x2000099c
 80041c0:	20000a04 	.word	0x20000a04

080041c4 <global_stdio_init.part.0>:
 80041c4:	b510      	push	{r4, lr}
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <global_stdio_init.part.0+0x30>)
 80041c8:	4c0b      	ldr	r4, [pc, #44]	; (80041f8 <global_stdio_init.part.0+0x34>)
 80041ca:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <global_stdio_init.part.0+0x38>)
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	4620      	mov	r0, r4
 80041d0:	2200      	movs	r2, #0
 80041d2:	2104      	movs	r1, #4
 80041d4:	f7ff ff94 	bl	8004100 <std>
 80041d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80041dc:	2201      	movs	r2, #1
 80041de:	2109      	movs	r1, #9
 80041e0:	f7ff ff8e 	bl	8004100 <std>
 80041e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80041e8:	2202      	movs	r2, #2
 80041ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ee:	2112      	movs	r1, #18
 80041f0:	f7ff bf86 	b.w	8004100 <std>
 80041f4:	20000a6c 	.word	0x20000a6c
 80041f8:	20000934 	.word	0x20000934
 80041fc:	0800416d 	.word	0x0800416d

08004200 <__sfp_lock_acquire>:
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <__sfp_lock_acquire+0x8>)
 8004202:	f000 b8e0 	b.w	80043c6 <__retarget_lock_acquire_recursive>
 8004206:	bf00      	nop
 8004208:	20000a71 	.word	0x20000a71

0800420c <__sfp_lock_release>:
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <__sfp_lock_release+0x8>)
 800420e:	f000 b8db 	b.w	80043c8 <__retarget_lock_release_recursive>
 8004212:	bf00      	nop
 8004214:	20000a71 	.word	0x20000a71

08004218 <__sinit>:
 8004218:	b510      	push	{r4, lr}
 800421a:	4604      	mov	r4, r0
 800421c:	f7ff fff0 	bl	8004200 <__sfp_lock_acquire>
 8004220:	6a23      	ldr	r3, [r4, #32]
 8004222:	b11b      	cbz	r3, 800422c <__sinit+0x14>
 8004224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004228:	f7ff bff0 	b.w	800420c <__sfp_lock_release>
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <__sinit+0x28>)
 800422e:	6223      	str	r3, [r4, #32]
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <__sinit+0x2c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f5      	bne.n	8004224 <__sinit+0xc>
 8004238:	f7ff ffc4 	bl	80041c4 <global_stdio_init.part.0>
 800423c:	e7f2      	b.n	8004224 <__sinit+0xc>
 800423e:	bf00      	nop
 8004240:	08004185 	.word	0x08004185
 8004244:	20000a6c 	.word	0x20000a6c

08004248 <_fwalk_sglue>:
 8004248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800424c:	4607      	mov	r7, r0
 800424e:	4688      	mov	r8, r1
 8004250:	4614      	mov	r4, r2
 8004252:	2600      	movs	r6, #0
 8004254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004258:	f1b9 0901 	subs.w	r9, r9, #1
 800425c:	d505      	bpl.n	800426a <_fwalk_sglue+0x22>
 800425e:	6824      	ldr	r4, [r4, #0]
 8004260:	2c00      	cmp	r4, #0
 8004262:	d1f7      	bne.n	8004254 <_fwalk_sglue+0xc>
 8004264:	4630      	mov	r0, r6
 8004266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800426a:	89ab      	ldrh	r3, [r5, #12]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d907      	bls.n	8004280 <_fwalk_sglue+0x38>
 8004270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004274:	3301      	adds	r3, #1
 8004276:	d003      	beq.n	8004280 <_fwalk_sglue+0x38>
 8004278:	4629      	mov	r1, r5
 800427a:	4638      	mov	r0, r7
 800427c:	47c0      	blx	r8
 800427e:	4306      	orrs	r6, r0
 8004280:	3568      	adds	r5, #104	; 0x68
 8004282:	e7e9      	b.n	8004258 <_fwalk_sglue+0x10>

08004284 <iprintf>:
 8004284:	b40f      	push	{r0, r1, r2, r3}
 8004286:	b507      	push	{r0, r1, r2, lr}
 8004288:	4906      	ldr	r1, [pc, #24]	; (80042a4 <iprintf+0x20>)
 800428a:	ab04      	add	r3, sp, #16
 800428c:	6808      	ldr	r0, [r1, #0]
 800428e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004292:	6881      	ldr	r1, [r0, #8]
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	f000 f8c1 	bl	800441c <_vfiprintf_r>
 800429a:	b003      	add	sp, #12
 800429c:	f85d eb04 	ldr.w	lr, [sp], #4
 80042a0:	b004      	add	sp, #16
 80042a2:	4770      	bx	lr
 80042a4:	20000064 	.word	0x20000064

080042a8 <_puts_r>:
 80042a8:	6a03      	ldr	r3, [r0, #32]
 80042aa:	b570      	push	{r4, r5, r6, lr}
 80042ac:	6884      	ldr	r4, [r0, #8]
 80042ae:	4605      	mov	r5, r0
 80042b0:	460e      	mov	r6, r1
 80042b2:	b90b      	cbnz	r3, 80042b8 <_puts_r+0x10>
 80042b4:	f7ff ffb0 	bl	8004218 <__sinit>
 80042b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042ba:	07db      	lsls	r3, r3, #31
 80042bc:	d405      	bmi.n	80042ca <_puts_r+0x22>
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	0598      	lsls	r0, r3, #22
 80042c2:	d402      	bmi.n	80042ca <_puts_r+0x22>
 80042c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042c6:	f000 f87e 	bl	80043c6 <__retarget_lock_acquire_recursive>
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	0719      	lsls	r1, r3, #28
 80042ce:	d513      	bpl.n	80042f8 <_puts_r+0x50>
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	b18b      	cbz	r3, 80042f8 <_puts_r+0x50>
 80042d4:	3e01      	subs	r6, #1
 80042d6:	68a3      	ldr	r3, [r4, #8]
 80042d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042dc:	3b01      	subs	r3, #1
 80042de:	60a3      	str	r3, [r4, #8]
 80042e0:	b9e9      	cbnz	r1, 800431e <_puts_r+0x76>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da2e      	bge.n	8004344 <_puts_r+0x9c>
 80042e6:	4622      	mov	r2, r4
 80042e8:	210a      	movs	r1, #10
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 fcdd 	bl	8004caa <__swbuf_r>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d007      	beq.n	8004304 <_puts_r+0x5c>
 80042f4:	250a      	movs	r5, #10
 80042f6:	e007      	b.n	8004308 <_puts_r+0x60>
 80042f8:	4621      	mov	r1, r4
 80042fa:	4628      	mov	r0, r5
 80042fc:	f000 fd12 	bl	8004d24 <__swsetup_r>
 8004300:	2800      	cmp	r0, #0
 8004302:	d0e7      	beq.n	80042d4 <_puts_r+0x2c>
 8004304:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800430a:	07da      	lsls	r2, r3, #31
 800430c:	d405      	bmi.n	800431a <_puts_r+0x72>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	059b      	lsls	r3, r3, #22
 8004312:	d402      	bmi.n	800431a <_puts_r+0x72>
 8004314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004316:	f000 f857 	bl	80043c8 <__retarget_lock_release_recursive>
 800431a:	4628      	mov	r0, r5
 800431c:	bd70      	pop	{r4, r5, r6, pc}
 800431e:	2b00      	cmp	r3, #0
 8004320:	da04      	bge.n	800432c <_puts_r+0x84>
 8004322:	69a2      	ldr	r2, [r4, #24]
 8004324:	429a      	cmp	r2, r3
 8004326:	dc06      	bgt.n	8004336 <_puts_r+0x8e>
 8004328:	290a      	cmp	r1, #10
 800432a:	d004      	beq.n	8004336 <_puts_r+0x8e>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	6022      	str	r2, [r4, #0]
 8004332:	7019      	strb	r1, [r3, #0]
 8004334:	e7cf      	b.n	80042d6 <_puts_r+0x2e>
 8004336:	4622      	mov	r2, r4
 8004338:	4628      	mov	r0, r5
 800433a:	f000 fcb6 	bl	8004caa <__swbuf_r>
 800433e:	3001      	adds	r0, #1
 8004340:	d1c9      	bne.n	80042d6 <_puts_r+0x2e>
 8004342:	e7df      	b.n	8004304 <_puts_r+0x5c>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	250a      	movs	r5, #10
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	6022      	str	r2, [r4, #0]
 800434c:	701d      	strb	r5, [r3, #0]
 800434e:	e7db      	b.n	8004308 <_puts_r+0x60>

08004350 <puts>:
 8004350:	4b02      	ldr	r3, [pc, #8]	; (800435c <puts+0xc>)
 8004352:	4601      	mov	r1, r0
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	f7ff bfa7 	b.w	80042a8 <_puts_r>
 800435a:	bf00      	nop
 800435c:	20000064 	.word	0x20000064

08004360 <memset>:
 8004360:	4402      	add	r2, r0
 8004362:	4603      	mov	r3, r0
 8004364:	4293      	cmp	r3, r2
 8004366:	d100      	bne.n	800436a <memset+0xa>
 8004368:	4770      	bx	lr
 800436a:	f803 1b01 	strb.w	r1, [r3], #1
 800436e:	e7f9      	b.n	8004364 <memset+0x4>

08004370 <__errno>:
 8004370:	4b01      	ldr	r3, [pc, #4]	; (8004378 <__errno+0x8>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20000064 	.word	0x20000064

0800437c <__libc_init_array>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	4d0d      	ldr	r5, [pc, #52]	; (80043b4 <__libc_init_array+0x38>)
 8004380:	4c0d      	ldr	r4, [pc, #52]	; (80043b8 <__libc_init_array+0x3c>)
 8004382:	1b64      	subs	r4, r4, r5
 8004384:	10a4      	asrs	r4, r4, #2
 8004386:	2600      	movs	r6, #0
 8004388:	42a6      	cmp	r6, r4
 800438a:	d109      	bne.n	80043a0 <__libc_init_array+0x24>
 800438c:	4d0b      	ldr	r5, [pc, #44]	; (80043bc <__libc_init_array+0x40>)
 800438e:	4c0c      	ldr	r4, [pc, #48]	; (80043c0 <__libc_init_array+0x44>)
 8004390:	f000 fe46 	bl	8005020 <_init>
 8004394:	1b64      	subs	r4, r4, r5
 8004396:	10a4      	asrs	r4, r4, #2
 8004398:	2600      	movs	r6, #0
 800439a:	42a6      	cmp	r6, r4
 800439c:	d105      	bne.n	80043aa <__libc_init_array+0x2e>
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a4:	4798      	blx	r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	e7ee      	b.n	8004388 <__libc_init_array+0xc>
 80043aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ae:	4798      	blx	r3
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7f2      	b.n	800439a <__libc_init_array+0x1e>
 80043b4:	08005630 	.word	0x08005630
 80043b8:	08005630 	.word	0x08005630
 80043bc:	08005630 	.word	0x08005630
 80043c0:	08005634 	.word	0x08005634

080043c4 <__retarget_lock_init_recursive>:
 80043c4:	4770      	bx	lr

080043c6 <__retarget_lock_acquire_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <__retarget_lock_release_recursive>:
 80043c8:	4770      	bx	lr

080043ca <__sfputc_r>:
 80043ca:	6893      	ldr	r3, [r2, #8]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	b410      	push	{r4}
 80043d2:	6093      	str	r3, [r2, #8]
 80043d4:	da08      	bge.n	80043e8 <__sfputc_r+0x1e>
 80043d6:	6994      	ldr	r4, [r2, #24]
 80043d8:	42a3      	cmp	r3, r4
 80043da:	db01      	blt.n	80043e0 <__sfputc_r+0x16>
 80043dc:	290a      	cmp	r1, #10
 80043de:	d103      	bne.n	80043e8 <__sfputc_r+0x1e>
 80043e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e4:	f000 bc61 	b.w	8004caa <__swbuf_r>
 80043e8:	6813      	ldr	r3, [r2, #0]
 80043ea:	1c58      	adds	r0, r3, #1
 80043ec:	6010      	str	r0, [r2, #0]
 80043ee:	7019      	strb	r1, [r3, #0]
 80043f0:	4608      	mov	r0, r1
 80043f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <__sfputs_r>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	4606      	mov	r6, r0
 80043fc:	460f      	mov	r7, r1
 80043fe:	4614      	mov	r4, r2
 8004400:	18d5      	adds	r5, r2, r3
 8004402:	42ac      	cmp	r4, r5
 8004404:	d101      	bne.n	800440a <__sfputs_r+0x12>
 8004406:	2000      	movs	r0, #0
 8004408:	e007      	b.n	800441a <__sfputs_r+0x22>
 800440a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440e:	463a      	mov	r2, r7
 8004410:	4630      	mov	r0, r6
 8004412:	f7ff ffda 	bl	80043ca <__sfputc_r>
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	d1f3      	bne.n	8004402 <__sfputs_r+0xa>
 800441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800441c <_vfiprintf_r>:
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	460d      	mov	r5, r1
 8004422:	b09d      	sub	sp, #116	; 0x74
 8004424:	4614      	mov	r4, r2
 8004426:	4698      	mov	r8, r3
 8004428:	4606      	mov	r6, r0
 800442a:	b118      	cbz	r0, 8004434 <_vfiprintf_r+0x18>
 800442c:	6a03      	ldr	r3, [r0, #32]
 800442e:	b90b      	cbnz	r3, 8004434 <_vfiprintf_r+0x18>
 8004430:	f7ff fef2 	bl	8004218 <__sinit>
 8004434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004436:	07d9      	lsls	r1, r3, #31
 8004438:	d405      	bmi.n	8004446 <_vfiprintf_r+0x2a>
 800443a:	89ab      	ldrh	r3, [r5, #12]
 800443c:	059a      	lsls	r2, r3, #22
 800443e:	d402      	bmi.n	8004446 <_vfiprintf_r+0x2a>
 8004440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004442:	f7ff ffc0 	bl	80043c6 <__retarget_lock_acquire_recursive>
 8004446:	89ab      	ldrh	r3, [r5, #12]
 8004448:	071b      	lsls	r3, r3, #28
 800444a:	d501      	bpl.n	8004450 <_vfiprintf_r+0x34>
 800444c:	692b      	ldr	r3, [r5, #16]
 800444e:	b99b      	cbnz	r3, 8004478 <_vfiprintf_r+0x5c>
 8004450:	4629      	mov	r1, r5
 8004452:	4630      	mov	r0, r6
 8004454:	f000 fc66 	bl	8004d24 <__swsetup_r>
 8004458:	b170      	cbz	r0, 8004478 <_vfiprintf_r+0x5c>
 800445a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800445c:	07dc      	lsls	r4, r3, #31
 800445e:	d504      	bpl.n	800446a <_vfiprintf_r+0x4e>
 8004460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004464:	b01d      	add	sp, #116	; 0x74
 8004466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446a:	89ab      	ldrh	r3, [r5, #12]
 800446c:	0598      	lsls	r0, r3, #22
 800446e:	d4f7      	bmi.n	8004460 <_vfiprintf_r+0x44>
 8004470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004472:	f7ff ffa9 	bl	80043c8 <__retarget_lock_release_recursive>
 8004476:	e7f3      	b.n	8004460 <_vfiprintf_r+0x44>
 8004478:	2300      	movs	r3, #0
 800447a:	9309      	str	r3, [sp, #36]	; 0x24
 800447c:	2320      	movs	r3, #32
 800447e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004482:	f8cd 800c 	str.w	r8, [sp, #12]
 8004486:	2330      	movs	r3, #48	; 0x30
 8004488:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800463c <_vfiprintf_r+0x220>
 800448c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004490:	f04f 0901 	mov.w	r9, #1
 8004494:	4623      	mov	r3, r4
 8004496:	469a      	mov	sl, r3
 8004498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800449c:	b10a      	cbz	r2, 80044a2 <_vfiprintf_r+0x86>
 800449e:	2a25      	cmp	r2, #37	; 0x25
 80044a0:	d1f9      	bne.n	8004496 <_vfiprintf_r+0x7a>
 80044a2:	ebba 0b04 	subs.w	fp, sl, r4
 80044a6:	d00b      	beq.n	80044c0 <_vfiprintf_r+0xa4>
 80044a8:	465b      	mov	r3, fp
 80044aa:	4622      	mov	r2, r4
 80044ac:	4629      	mov	r1, r5
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7ff ffa2 	bl	80043f8 <__sfputs_r>
 80044b4:	3001      	adds	r0, #1
 80044b6:	f000 80a9 	beq.w	800460c <_vfiprintf_r+0x1f0>
 80044ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044bc:	445a      	add	r2, fp
 80044be:	9209      	str	r2, [sp, #36]	; 0x24
 80044c0:	f89a 3000 	ldrb.w	r3, [sl]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80a1 	beq.w	800460c <_vfiprintf_r+0x1f0>
 80044ca:	2300      	movs	r3, #0
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044d4:	f10a 0a01 	add.w	sl, sl, #1
 80044d8:	9304      	str	r3, [sp, #16]
 80044da:	9307      	str	r3, [sp, #28]
 80044dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044e0:	931a      	str	r3, [sp, #104]	; 0x68
 80044e2:	4654      	mov	r4, sl
 80044e4:	2205      	movs	r2, #5
 80044e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ea:	4854      	ldr	r0, [pc, #336]	; (800463c <_vfiprintf_r+0x220>)
 80044ec:	f7fb fe98 	bl	8000220 <memchr>
 80044f0:	9a04      	ldr	r2, [sp, #16]
 80044f2:	b9d8      	cbnz	r0, 800452c <_vfiprintf_r+0x110>
 80044f4:	06d1      	lsls	r1, r2, #27
 80044f6:	bf44      	itt	mi
 80044f8:	2320      	movmi	r3, #32
 80044fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044fe:	0713      	lsls	r3, r2, #28
 8004500:	bf44      	itt	mi
 8004502:	232b      	movmi	r3, #43	; 0x2b
 8004504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004508:	f89a 3000 	ldrb.w	r3, [sl]
 800450c:	2b2a      	cmp	r3, #42	; 0x2a
 800450e:	d015      	beq.n	800453c <_vfiprintf_r+0x120>
 8004510:	9a07      	ldr	r2, [sp, #28]
 8004512:	4654      	mov	r4, sl
 8004514:	2000      	movs	r0, #0
 8004516:	f04f 0c0a 	mov.w	ip, #10
 800451a:	4621      	mov	r1, r4
 800451c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004520:	3b30      	subs	r3, #48	; 0x30
 8004522:	2b09      	cmp	r3, #9
 8004524:	d94d      	bls.n	80045c2 <_vfiprintf_r+0x1a6>
 8004526:	b1b0      	cbz	r0, 8004556 <_vfiprintf_r+0x13a>
 8004528:	9207      	str	r2, [sp, #28]
 800452a:	e014      	b.n	8004556 <_vfiprintf_r+0x13a>
 800452c:	eba0 0308 	sub.w	r3, r0, r8
 8004530:	fa09 f303 	lsl.w	r3, r9, r3
 8004534:	4313      	orrs	r3, r2
 8004536:	9304      	str	r3, [sp, #16]
 8004538:	46a2      	mov	sl, r4
 800453a:	e7d2      	b.n	80044e2 <_vfiprintf_r+0xc6>
 800453c:	9b03      	ldr	r3, [sp, #12]
 800453e:	1d19      	adds	r1, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	9103      	str	r1, [sp, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	bfbb      	ittet	lt
 8004548:	425b      	neglt	r3, r3
 800454a:	f042 0202 	orrlt.w	r2, r2, #2
 800454e:	9307      	strge	r3, [sp, #28]
 8004550:	9307      	strlt	r3, [sp, #28]
 8004552:	bfb8      	it	lt
 8004554:	9204      	strlt	r2, [sp, #16]
 8004556:	7823      	ldrb	r3, [r4, #0]
 8004558:	2b2e      	cmp	r3, #46	; 0x2e
 800455a:	d10c      	bne.n	8004576 <_vfiprintf_r+0x15a>
 800455c:	7863      	ldrb	r3, [r4, #1]
 800455e:	2b2a      	cmp	r3, #42	; 0x2a
 8004560:	d134      	bne.n	80045cc <_vfiprintf_r+0x1b0>
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	1d1a      	adds	r2, r3, #4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	9203      	str	r2, [sp, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfb8      	it	lt
 800456e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004572:	3402      	adds	r4, #2
 8004574:	9305      	str	r3, [sp, #20]
 8004576:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800464c <_vfiprintf_r+0x230>
 800457a:	7821      	ldrb	r1, [r4, #0]
 800457c:	2203      	movs	r2, #3
 800457e:	4650      	mov	r0, sl
 8004580:	f7fb fe4e 	bl	8000220 <memchr>
 8004584:	b138      	cbz	r0, 8004596 <_vfiprintf_r+0x17a>
 8004586:	9b04      	ldr	r3, [sp, #16]
 8004588:	eba0 000a 	sub.w	r0, r0, sl
 800458c:	2240      	movs	r2, #64	; 0x40
 800458e:	4082      	lsls	r2, r0
 8004590:	4313      	orrs	r3, r2
 8004592:	3401      	adds	r4, #1
 8004594:	9304      	str	r3, [sp, #16]
 8004596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459a:	4829      	ldr	r0, [pc, #164]	; (8004640 <_vfiprintf_r+0x224>)
 800459c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045a0:	2206      	movs	r2, #6
 80045a2:	f7fb fe3d 	bl	8000220 <memchr>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d03f      	beq.n	800462a <_vfiprintf_r+0x20e>
 80045aa:	4b26      	ldr	r3, [pc, #152]	; (8004644 <_vfiprintf_r+0x228>)
 80045ac:	bb1b      	cbnz	r3, 80045f6 <_vfiprintf_r+0x1da>
 80045ae:	9b03      	ldr	r3, [sp, #12]
 80045b0:	3307      	adds	r3, #7
 80045b2:	f023 0307 	bic.w	r3, r3, #7
 80045b6:	3308      	adds	r3, #8
 80045b8:	9303      	str	r3, [sp, #12]
 80045ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045bc:	443b      	add	r3, r7
 80045be:	9309      	str	r3, [sp, #36]	; 0x24
 80045c0:	e768      	b.n	8004494 <_vfiprintf_r+0x78>
 80045c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80045c6:	460c      	mov	r4, r1
 80045c8:	2001      	movs	r0, #1
 80045ca:	e7a6      	b.n	800451a <_vfiprintf_r+0xfe>
 80045cc:	2300      	movs	r3, #0
 80045ce:	3401      	adds	r4, #1
 80045d0:	9305      	str	r3, [sp, #20]
 80045d2:	4619      	mov	r1, r3
 80045d4:	f04f 0c0a 	mov.w	ip, #10
 80045d8:	4620      	mov	r0, r4
 80045da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045de:	3a30      	subs	r2, #48	; 0x30
 80045e0:	2a09      	cmp	r2, #9
 80045e2:	d903      	bls.n	80045ec <_vfiprintf_r+0x1d0>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0c6      	beq.n	8004576 <_vfiprintf_r+0x15a>
 80045e8:	9105      	str	r1, [sp, #20]
 80045ea:	e7c4      	b.n	8004576 <_vfiprintf_r+0x15a>
 80045ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80045f0:	4604      	mov	r4, r0
 80045f2:	2301      	movs	r3, #1
 80045f4:	e7f0      	b.n	80045d8 <_vfiprintf_r+0x1bc>
 80045f6:	ab03      	add	r3, sp, #12
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	462a      	mov	r2, r5
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <_vfiprintf_r+0x22c>)
 80045fe:	a904      	add	r1, sp, #16
 8004600:	4630      	mov	r0, r6
 8004602:	f3af 8000 	nop.w
 8004606:	4607      	mov	r7, r0
 8004608:	1c78      	adds	r0, r7, #1
 800460a:	d1d6      	bne.n	80045ba <_vfiprintf_r+0x19e>
 800460c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800460e:	07d9      	lsls	r1, r3, #31
 8004610:	d405      	bmi.n	800461e <_vfiprintf_r+0x202>
 8004612:	89ab      	ldrh	r3, [r5, #12]
 8004614:	059a      	lsls	r2, r3, #22
 8004616:	d402      	bmi.n	800461e <_vfiprintf_r+0x202>
 8004618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800461a:	f7ff fed5 	bl	80043c8 <__retarget_lock_release_recursive>
 800461e:	89ab      	ldrh	r3, [r5, #12]
 8004620:	065b      	lsls	r3, r3, #25
 8004622:	f53f af1d 	bmi.w	8004460 <_vfiprintf_r+0x44>
 8004626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004628:	e71c      	b.n	8004464 <_vfiprintf_r+0x48>
 800462a:	ab03      	add	r3, sp, #12
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	462a      	mov	r2, r5
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <_vfiprintf_r+0x22c>)
 8004632:	a904      	add	r1, sp, #16
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f919 	bl	800486c <_printf_i>
 800463a:	e7e4      	b.n	8004606 <_vfiprintf_r+0x1ea>
 800463c:	080055f4 	.word	0x080055f4
 8004640:	080055fe 	.word	0x080055fe
 8004644:	00000000 	.word	0x00000000
 8004648:	080043f9 	.word	0x080043f9
 800464c:	080055fa 	.word	0x080055fa

08004650 <sbrk_aligned>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4e0e      	ldr	r6, [pc, #56]	; (800468c <sbrk_aligned+0x3c>)
 8004654:	460c      	mov	r4, r1
 8004656:	6831      	ldr	r1, [r6, #0]
 8004658:	4605      	mov	r5, r0
 800465a:	b911      	cbnz	r1, 8004662 <sbrk_aligned+0x12>
 800465c:	f000 fc72 	bl	8004f44 <_sbrk_r>
 8004660:	6030      	str	r0, [r6, #0]
 8004662:	4621      	mov	r1, r4
 8004664:	4628      	mov	r0, r5
 8004666:	f000 fc6d 	bl	8004f44 <_sbrk_r>
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	d00a      	beq.n	8004684 <sbrk_aligned+0x34>
 800466e:	1cc4      	adds	r4, r0, #3
 8004670:	f024 0403 	bic.w	r4, r4, #3
 8004674:	42a0      	cmp	r0, r4
 8004676:	d007      	beq.n	8004688 <sbrk_aligned+0x38>
 8004678:	1a21      	subs	r1, r4, r0
 800467a:	4628      	mov	r0, r5
 800467c:	f000 fc62 	bl	8004f44 <_sbrk_r>
 8004680:	3001      	adds	r0, #1
 8004682:	d101      	bne.n	8004688 <sbrk_aligned+0x38>
 8004684:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004688:	4620      	mov	r0, r4
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	20000a78 	.word	0x20000a78

08004690 <_malloc_r>:
 8004690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004694:	1ccd      	adds	r5, r1, #3
 8004696:	f025 0503 	bic.w	r5, r5, #3
 800469a:	3508      	adds	r5, #8
 800469c:	2d0c      	cmp	r5, #12
 800469e:	bf38      	it	cc
 80046a0:	250c      	movcc	r5, #12
 80046a2:	2d00      	cmp	r5, #0
 80046a4:	4607      	mov	r7, r0
 80046a6:	db01      	blt.n	80046ac <_malloc_r+0x1c>
 80046a8:	42a9      	cmp	r1, r5
 80046aa:	d905      	bls.n	80046b8 <_malloc_r+0x28>
 80046ac:	230c      	movs	r3, #12
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	2600      	movs	r6, #0
 80046b2:	4630      	mov	r0, r6
 80046b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800478c <_malloc_r+0xfc>
 80046bc:	f000 faa6 	bl	8004c0c <__malloc_lock>
 80046c0:	f8d8 3000 	ldr.w	r3, [r8]
 80046c4:	461c      	mov	r4, r3
 80046c6:	bb5c      	cbnz	r4, 8004720 <_malloc_r+0x90>
 80046c8:	4629      	mov	r1, r5
 80046ca:	4638      	mov	r0, r7
 80046cc:	f7ff ffc0 	bl	8004650 <sbrk_aligned>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	4604      	mov	r4, r0
 80046d4:	d155      	bne.n	8004782 <_malloc_r+0xf2>
 80046d6:	f8d8 4000 	ldr.w	r4, [r8]
 80046da:	4626      	mov	r6, r4
 80046dc:	2e00      	cmp	r6, #0
 80046de:	d145      	bne.n	800476c <_malloc_r+0xdc>
 80046e0:	2c00      	cmp	r4, #0
 80046e2:	d048      	beq.n	8004776 <_malloc_r+0xe6>
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	4631      	mov	r1, r6
 80046e8:	4638      	mov	r0, r7
 80046ea:	eb04 0903 	add.w	r9, r4, r3
 80046ee:	f000 fc29 	bl	8004f44 <_sbrk_r>
 80046f2:	4581      	cmp	r9, r0
 80046f4:	d13f      	bne.n	8004776 <_malloc_r+0xe6>
 80046f6:	6821      	ldr	r1, [r4, #0]
 80046f8:	1a6d      	subs	r5, r5, r1
 80046fa:	4629      	mov	r1, r5
 80046fc:	4638      	mov	r0, r7
 80046fe:	f7ff ffa7 	bl	8004650 <sbrk_aligned>
 8004702:	3001      	adds	r0, #1
 8004704:	d037      	beq.n	8004776 <_malloc_r+0xe6>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	442b      	add	r3, r5
 800470a:	6023      	str	r3, [r4, #0]
 800470c:	f8d8 3000 	ldr.w	r3, [r8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d038      	beq.n	8004786 <_malloc_r+0xf6>
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	42a2      	cmp	r2, r4
 8004718:	d12b      	bne.n	8004772 <_malloc_r+0xe2>
 800471a:	2200      	movs	r2, #0
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	e00f      	b.n	8004740 <_malloc_r+0xb0>
 8004720:	6822      	ldr	r2, [r4, #0]
 8004722:	1b52      	subs	r2, r2, r5
 8004724:	d41f      	bmi.n	8004766 <_malloc_r+0xd6>
 8004726:	2a0b      	cmp	r2, #11
 8004728:	d917      	bls.n	800475a <_malloc_r+0xca>
 800472a:	1961      	adds	r1, r4, r5
 800472c:	42a3      	cmp	r3, r4
 800472e:	6025      	str	r5, [r4, #0]
 8004730:	bf18      	it	ne
 8004732:	6059      	strne	r1, [r3, #4]
 8004734:	6863      	ldr	r3, [r4, #4]
 8004736:	bf08      	it	eq
 8004738:	f8c8 1000 	streq.w	r1, [r8]
 800473c:	5162      	str	r2, [r4, r5]
 800473e:	604b      	str	r3, [r1, #4]
 8004740:	4638      	mov	r0, r7
 8004742:	f104 060b 	add.w	r6, r4, #11
 8004746:	f000 fa67 	bl	8004c18 <__malloc_unlock>
 800474a:	f026 0607 	bic.w	r6, r6, #7
 800474e:	1d23      	adds	r3, r4, #4
 8004750:	1af2      	subs	r2, r6, r3
 8004752:	d0ae      	beq.n	80046b2 <_malloc_r+0x22>
 8004754:	1b9b      	subs	r3, r3, r6
 8004756:	50a3      	str	r3, [r4, r2]
 8004758:	e7ab      	b.n	80046b2 <_malloc_r+0x22>
 800475a:	42a3      	cmp	r3, r4
 800475c:	6862      	ldr	r2, [r4, #4]
 800475e:	d1dd      	bne.n	800471c <_malloc_r+0x8c>
 8004760:	f8c8 2000 	str.w	r2, [r8]
 8004764:	e7ec      	b.n	8004740 <_malloc_r+0xb0>
 8004766:	4623      	mov	r3, r4
 8004768:	6864      	ldr	r4, [r4, #4]
 800476a:	e7ac      	b.n	80046c6 <_malloc_r+0x36>
 800476c:	4634      	mov	r4, r6
 800476e:	6876      	ldr	r6, [r6, #4]
 8004770:	e7b4      	b.n	80046dc <_malloc_r+0x4c>
 8004772:	4613      	mov	r3, r2
 8004774:	e7cc      	b.n	8004710 <_malloc_r+0x80>
 8004776:	230c      	movs	r3, #12
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	4638      	mov	r0, r7
 800477c:	f000 fa4c 	bl	8004c18 <__malloc_unlock>
 8004780:	e797      	b.n	80046b2 <_malloc_r+0x22>
 8004782:	6025      	str	r5, [r4, #0]
 8004784:	e7dc      	b.n	8004740 <_malloc_r+0xb0>
 8004786:	605b      	str	r3, [r3, #4]
 8004788:	deff      	udf	#255	; 0xff
 800478a:	bf00      	nop
 800478c:	20000a74 	.word	0x20000a74

08004790 <_printf_common>:
 8004790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	4616      	mov	r6, r2
 8004796:	4699      	mov	r9, r3
 8004798:	688a      	ldr	r2, [r1, #8]
 800479a:	690b      	ldr	r3, [r1, #16]
 800479c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a0:	4293      	cmp	r3, r2
 80047a2:	bfb8      	it	lt
 80047a4:	4613      	movlt	r3, r2
 80047a6:	6033      	str	r3, [r6, #0]
 80047a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ac:	4607      	mov	r7, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	b10a      	cbz	r2, 80047b6 <_printf_common+0x26>
 80047b2:	3301      	adds	r3, #1
 80047b4:	6033      	str	r3, [r6, #0]
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	0699      	lsls	r1, r3, #26
 80047ba:	bf42      	ittt	mi
 80047bc:	6833      	ldrmi	r3, [r6, #0]
 80047be:	3302      	addmi	r3, #2
 80047c0:	6033      	strmi	r3, [r6, #0]
 80047c2:	6825      	ldr	r5, [r4, #0]
 80047c4:	f015 0506 	ands.w	r5, r5, #6
 80047c8:	d106      	bne.n	80047d8 <_printf_common+0x48>
 80047ca:	f104 0a19 	add.w	sl, r4, #25
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	6832      	ldr	r2, [r6, #0]
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	42ab      	cmp	r3, r5
 80047d6:	dc26      	bgt.n	8004826 <_printf_common+0x96>
 80047d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047dc:	1e13      	subs	r3, r2, #0
 80047de:	6822      	ldr	r2, [r4, #0]
 80047e0:	bf18      	it	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	0692      	lsls	r2, r2, #26
 80047e6:	d42b      	bmi.n	8004840 <_printf_common+0xb0>
 80047e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047ec:	4649      	mov	r1, r9
 80047ee:	4638      	mov	r0, r7
 80047f0:	47c0      	blx	r8
 80047f2:	3001      	adds	r0, #1
 80047f4:	d01e      	beq.n	8004834 <_printf_common+0xa4>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	6922      	ldr	r2, [r4, #16]
 80047fa:	f003 0306 	and.w	r3, r3, #6
 80047fe:	2b04      	cmp	r3, #4
 8004800:	bf02      	ittt	eq
 8004802:	68e5      	ldreq	r5, [r4, #12]
 8004804:	6833      	ldreq	r3, [r6, #0]
 8004806:	1aed      	subeq	r5, r5, r3
 8004808:	68a3      	ldr	r3, [r4, #8]
 800480a:	bf0c      	ite	eq
 800480c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004810:	2500      	movne	r5, #0
 8004812:	4293      	cmp	r3, r2
 8004814:	bfc4      	itt	gt
 8004816:	1a9b      	subgt	r3, r3, r2
 8004818:	18ed      	addgt	r5, r5, r3
 800481a:	2600      	movs	r6, #0
 800481c:	341a      	adds	r4, #26
 800481e:	42b5      	cmp	r5, r6
 8004820:	d11a      	bne.n	8004858 <_printf_common+0xc8>
 8004822:	2000      	movs	r0, #0
 8004824:	e008      	b.n	8004838 <_printf_common+0xa8>
 8004826:	2301      	movs	r3, #1
 8004828:	4652      	mov	r2, sl
 800482a:	4649      	mov	r1, r9
 800482c:	4638      	mov	r0, r7
 800482e:	47c0      	blx	r8
 8004830:	3001      	adds	r0, #1
 8004832:	d103      	bne.n	800483c <_printf_common+0xac>
 8004834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483c:	3501      	adds	r5, #1
 800483e:	e7c6      	b.n	80047ce <_printf_common+0x3e>
 8004840:	18e1      	adds	r1, r4, r3
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	2030      	movs	r0, #48	; 0x30
 8004846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800484a:	4422      	add	r2, r4
 800484c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004854:	3302      	adds	r3, #2
 8004856:	e7c7      	b.n	80047e8 <_printf_common+0x58>
 8004858:	2301      	movs	r3, #1
 800485a:	4622      	mov	r2, r4
 800485c:	4649      	mov	r1, r9
 800485e:	4638      	mov	r0, r7
 8004860:	47c0      	blx	r8
 8004862:	3001      	adds	r0, #1
 8004864:	d0e6      	beq.n	8004834 <_printf_common+0xa4>
 8004866:	3601      	adds	r6, #1
 8004868:	e7d9      	b.n	800481e <_printf_common+0x8e>
	...

0800486c <_printf_i>:
 800486c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004870:	7e0f      	ldrb	r7, [r1, #24]
 8004872:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004874:	2f78      	cmp	r7, #120	; 0x78
 8004876:	4691      	mov	r9, r2
 8004878:	4680      	mov	r8, r0
 800487a:	460c      	mov	r4, r1
 800487c:	469a      	mov	sl, r3
 800487e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004882:	d807      	bhi.n	8004894 <_printf_i+0x28>
 8004884:	2f62      	cmp	r7, #98	; 0x62
 8004886:	d80a      	bhi.n	800489e <_printf_i+0x32>
 8004888:	2f00      	cmp	r7, #0
 800488a:	f000 80d4 	beq.w	8004a36 <_printf_i+0x1ca>
 800488e:	2f58      	cmp	r7, #88	; 0x58
 8004890:	f000 80c0 	beq.w	8004a14 <_printf_i+0x1a8>
 8004894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800489c:	e03a      	b.n	8004914 <_printf_i+0xa8>
 800489e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048a2:	2b15      	cmp	r3, #21
 80048a4:	d8f6      	bhi.n	8004894 <_printf_i+0x28>
 80048a6:	a101      	add	r1, pc, #4	; (adr r1, 80048ac <_printf_i+0x40>)
 80048a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048ac:	08004905 	.word	0x08004905
 80048b0:	08004919 	.word	0x08004919
 80048b4:	08004895 	.word	0x08004895
 80048b8:	08004895 	.word	0x08004895
 80048bc:	08004895 	.word	0x08004895
 80048c0:	08004895 	.word	0x08004895
 80048c4:	08004919 	.word	0x08004919
 80048c8:	08004895 	.word	0x08004895
 80048cc:	08004895 	.word	0x08004895
 80048d0:	08004895 	.word	0x08004895
 80048d4:	08004895 	.word	0x08004895
 80048d8:	08004a1d 	.word	0x08004a1d
 80048dc:	08004945 	.word	0x08004945
 80048e0:	080049d7 	.word	0x080049d7
 80048e4:	08004895 	.word	0x08004895
 80048e8:	08004895 	.word	0x08004895
 80048ec:	08004a3f 	.word	0x08004a3f
 80048f0:	08004895 	.word	0x08004895
 80048f4:	08004945 	.word	0x08004945
 80048f8:	08004895 	.word	0x08004895
 80048fc:	08004895 	.word	0x08004895
 8004900:	080049df 	.word	0x080049df
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	602a      	str	r2, [r5, #0]
 800490c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004914:	2301      	movs	r3, #1
 8004916:	e09f      	b.n	8004a58 <_printf_i+0x1ec>
 8004918:	6820      	ldr	r0, [r4, #0]
 800491a:	682b      	ldr	r3, [r5, #0]
 800491c:	0607      	lsls	r7, r0, #24
 800491e:	f103 0104 	add.w	r1, r3, #4
 8004922:	6029      	str	r1, [r5, #0]
 8004924:	d501      	bpl.n	800492a <_printf_i+0xbe>
 8004926:	681e      	ldr	r6, [r3, #0]
 8004928:	e003      	b.n	8004932 <_printf_i+0xc6>
 800492a:	0646      	lsls	r6, r0, #25
 800492c:	d5fb      	bpl.n	8004926 <_printf_i+0xba>
 800492e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004932:	2e00      	cmp	r6, #0
 8004934:	da03      	bge.n	800493e <_printf_i+0xd2>
 8004936:	232d      	movs	r3, #45	; 0x2d
 8004938:	4276      	negs	r6, r6
 800493a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800493e:	485a      	ldr	r0, [pc, #360]	; (8004aa8 <_printf_i+0x23c>)
 8004940:	230a      	movs	r3, #10
 8004942:	e012      	b.n	800496a <_printf_i+0xfe>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	1d19      	adds	r1, r3, #4
 800494a:	6029      	str	r1, [r5, #0]
 800494c:	0605      	lsls	r5, r0, #24
 800494e:	d501      	bpl.n	8004954 <_printf_i+0xe8>
 8004950:	681e      	ldr	r6, [r3, #0]
 8004952:	e002      	b.n	800495a <_printf_i+0xee>
 8004954:	0641      	lsls	r1, r0, #25
 8004956:	d5fb      	bpl.n	8004950 <_printf_i+0xe4>
 8004958:	881e      	ldrh	r6, [r3, #0]
 800495a:	4853      	ldr	r0, [pc, #332]	; (8004aa8 <_printf_i+0x23c>)
 800495c:	2f6f      	cmp	r7, #111	; 0x6f
 800495e:	bf0c      	ite	eq
 8004960:	2308      	moveq	r3, #8
 8004962:	230a      	movne	r3, #10
 8004964:	2100      	movs	r1, #0
 8004966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800496a:	6865      	ldr	r5, [r4, #4]
 800496c:	60a5      	str	r5, [r4, #8]
 800496e:	2d00      	cmp	r5, #0
 8004970:	bfa2      	ittt	ge
 8004972:	6821      	ldrge	r1, [r4, #0]
 8004974:	f021 0104 	bicge.w	r1, r1, #4
 8004978:	6021      	strge	r1, [r4, #0]
 800497a:	b90e      	cbnz	r6, 8004980 <_printf_i+0x114>
 800497c:	2d00      	cmp	r5, #0
 800497e:	d04b      	beq.n	8004a18 <_printf_i+0x1ac>
 8004980:	4615      	mov	r5, r2
 8004982:	fbb6 f1f3 	udiv	r1, r6, r3
 8004986:	fb03 6711 	mls	r7, r3, r1, r6
 800498a:	5dc7      	ldrb	r7, [r0, r7]
 800498c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004990:	4637      	mov	r7, r6
 8004992:	42bb      	cmp	r3, r7
 8004994:	460e      	mov	r6, r1
 8004996:	d9f4      	bls.n	8004982 <_printf_i+0x116>
 8004998:	2b08      	cmp	r3, #8
 800499a:	d10b      	bne.n	80049b4 <_printf_i+0x148>
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	07de      	lsls	r6, r3, #31
 80049a0:	d508      	bpl.n	80049b4 <_printf_i+0x148>
 80049a2:	6923      	ldr	r3, [r4, #16]
 80049a4:	6861      	ldr	r1, [r4, #4]
 80049a6:	4299      	cmp	r1, r3
 80049a8:	bfde      	ittt	le
 80049aa:	2330      	movle	r3, #48	; 0x30
 80049ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80049b4:	1b52      	subs	r2, r2, r5
 80049b6:	6122      	str	r2, [r4, #16]
 80049b8:	f8cd a000 	str.w	sl, [sp]
 80049bc:	464b      	mov	r3, r9
 80049be:	aa03      	add	r2, sp, #12
 80049c0:	4621      	mov	r1, r4
 80049c2:	4640      	mov	r0, r8
 80049c4:	f7ff fee4 	bl	8004790 <_printf_common>
 80049c8:	3001      	adds	r0, #1
 80049ca:	d14a      	bne.n	8004a62 <_printf_i+0x1f6>
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049d0:	b004      	add	sp, #16
 80049d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	f043 0320 	orr.w	r3, r3, #32
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	4833      	ldr	r0, [pc, #204]	; (8004aac <_printf_i+0x240>)
 80049e0:	2778      	movs	r7, #120	; 0x78
 80049e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	6829      	ldr	r1, [r5, #0]
 80049ea:	061f      	lsls	r7, r3, #24
 80049ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80049f0:	d402      	bmi.n	80049f8 <_printf_i+0x18c>
 80049f2:	065f      	lsls	r7, r3, #25
 80049f4:	bf48      	it	mi
 80049f6:	b2b6      	uxthmi	r6, r6
 80049f8:	07df      	lsls	r7, r3, #31
 80049fa:	bf48      	it	mi
 80049fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004a00:	6029      	str	r1, [r5, #0]
 8004a02:	bf48      	it	mi
 8004a04:	6023      	strmi	r3, [r4, #0]
 8004a06:	b91e      	cbnz	r6, 8004a10 <_printf_i+0x1a4>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	f023 0320 	bic.w	r3, r3, #32
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	2310      	movs	r3, #16
 8004a12:	e7a7      	b.n	8004964 <_printf_i+0xf8>
 8004a14:	4824      	ldr	r0, [pc, #144]	; (8004aa8 <_printf_i+0x23c>)
 8004a16:	e7e4      	b.n	80049e2 <_printf_i+0x176>
 8004a18:	4615      	mov	r5, r2
 8004a1a:	e7bd      	b.n	8004998 <_printf_i+0x12c>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	6826      	ldr	r6, [r4, #0]
 8004a20:	6961      	ldr	r1, [r4, #20]
 8004a22:	1d18      	adds	r0, r3, #4
 8004a24:	6028      	str	r0, [r5, #0]
 8004a26:	0635      	lsls	r5, r6, #24
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	d501      	bpl.n	8004a30 <_printf_i+0x1c4>
 8004a2c:	6019      	str	r1, [r3, #0]
 8004a2e:	e002      	b.n	8004a36 <_printf_i+0x1ca>
 8004a30:	0670      	lsls	r0, r6, #25
 8004a32:	d5fb      	bpl.n	8004a2c <_printf_i+0x1c0>
 8004a34:	8019      	strh	r1, [r3, #0]
 8004a36:	2300      	movs	r3, #0
 8004a38:	6123      	str	r3, [r4, #16]
 8004a3a:	4615      	mov	r5, r2
 8004a3c:	e7bc      	b.n	80049b8 <_printf_i+0x14c>
 8004a3e:	682b      	ldr	r3, [r5, #0]
 8004a40:	1d1a      	adds	r2, r3, #4
 8004a42:	602a      	str	r2, [r5, #0]
 8004a44:	681d      	ldr	r5, [r3, #0]
 8004a46:	6862      	ldr	r2, [r4, #4]
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f7fb fbe8 	bl	8000220 <memchr>
 8004a50:	b108      	cbz	r0, 8004a56 <_printf_i+0x1ea>
 8004a52:	1b40      	subs	r0, r0, r5
 8004a54:	6060      	str	r0, [r4, #4]
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	6123      	str	r3, [r4, #16]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a60:	e7aa      	b.n	80049b8 <_printf_i+0x14c>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	462a      	mov	r2, r5
 8004a66:	4649      	mov	r1, r9
 8004a68:	4640      	mov	r0, r8
 8004a6a:	47d0      	blx	sl
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d0ad      	beq.n	80049cc <_printf_i+0x160>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	079b      	lsls	r3, r3, #30
 8004a74:	d413      	bmi.n	8004a9e <_printf_i+0x232>
 8004a76:	68e0      	ldr	r0, [r4, #12]
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	4298      	cmp	r0, r3
 8004a7c:	bfb8      	it	lt
 8004a7e:	4618      	movlt	r0, r3
 8004a80:	e7a6      	b.n	80049d0 <_printf_i+0x164>
 8004a82:	2301      	movs	r3, #1
 8004a84:	4632      	mov	r2, r6
 8004a86:	4649      	mov	r1, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	47d0      	blx	sl
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d09d      	beq.n	80049cc <_printf_i+0x160>
 8004a90:	3501      	adds	r5, #1
 8004a92:	68e3      	ldr	r3, [r4, #12]
 8004a94:	9903      	ldr	r1, [sp, #12]
 8004a96:	1a5b      	subs	r3, r3, r1
 8004a98:	42ab      	cmp	r3, r5
 8004a9a:	dcf2      	bgt.n	8004a82 <_printf_i+0x216>
 8004a9c:	e7eb      	b.n	8004a76 <_printf_i+0x20a>
 8004a9e:	2500      	movs	r5, #0
 8004aa0:	f104 0619 	add.w	r6, r4, #25
 8004aa4:	e7f5      	b.n	8004a92 <_printf_i+0x226>
 8004aa6:	bf00      	nop
 8004aa8:	08005605 	.word	0x08005605
 8004aac:	08005616 	.word	0x08005616

08004ab0 <__sflush_r>:
 8004ab0:	898a      	ldrh	r2, [r1, #12]
 8004ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	0710      	lsls	r0, r2, #28
 8004aba:	460c      	mov	r4, r1
 8004abc:	d458      	bmi.n	8004b70 <__sflush_r+0xc0>
 8004abe:	684b      	ldr	r3, [r1, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	dc05      	bgt.n	8004ad0 <__sflush_r+0x20>
 8004ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dc02      	bgt.n	8004ad0 <__sflush_r+0x20>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad2:	2e00      	cmp	r6, #0
 8004ad4:	d0f9      	beq.n	8004aca <__sflush_r+0x1a>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004adc:	682f      	ldr	r7, [r5, #0]
 8004ade:	6a21      	ldr	r1, [r4, #32]
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	d032      	beq.n	8004b4a <__sflush_r+0x9a>
 8004ae4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	075a      	lsls	r2, r3, #29
 8004aea:	d505      	bpl.n	8004af8 <__sflush_r+0x48>
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	1ac0      	subs	r0, r0, r3
 8004af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af2:	b10b      	cbz	r3, 8004af8 <__sflush_r+0x48>
 8004af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af6:	1ac0      	subs	r0, r0, r3
 8004af8:	2300      	movs	r3, #0
 8004afa:	4602      	mov	r2, r0
 8004afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004afe:	6a21      	ldr	r1, [r4, #32]
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b0      	blx	r6
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	d106      	bne.n	8004b18 <__sflush_r+0x68>
 8004b0a:	6829      	ldr	r1, [r5, #0]
 8004b0c:	291d      	cmp	r1, #29
 8004b0e:	d82b      	bhi.n	8004b68 <__sflush_r+0xb8>
 8004b10:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <__sflush_r+0x108>)
 8004b12:	410a      	asrs	r2, r1
 8004b14:	07d6      	lsls	r6, r2, #31
 8004b16:	d427      	bmi.n	8004b68 <__sflush_r+0xb8>
 8004b18:	2200      	movs	r2, #0
 8004b1a:	6062      	str	r2, [r4, #4]
 8004b1c:	04d9      	lsls	r1, r3, #19
 8004b1e:	6922      	ldr	r2, [r4, #16]
 8004b20:	6022      	str	r2, [r4, #0]
 8004b22:	d504      	bpl.n	8004b2e <__sflush_r+0x7e>
 8004b24:	1c42      	adds	r2, r0, #1
 8004b26:	d101      	bne.n	8004b2c <__sflush_r+0x7c>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b903      	cbnz	r3, 8004b2e <__sflush_r+0x7e>
 8004b2c:	6560      	str	r0, [r4, #84]	; 0x54
 8004b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b30:	602f      	str	r7, [r5, #0]
 8004b32:	2900      	cmp	r1, #0
 8004b34:	d0c9      	beq.n	8004aca <__sflush_r+0x1a>
 8004b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b3a:	4299      	cmp	r1, r3
 8004b3c:	d002      	beq.n	8004b44 <__sflush_r+0x94>
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f000 fa22 	bl	8004f88 <_free_r>
 8004b44:	2000      	movs	r0, #0
 8004b46:	6360      	str	r0, [r4, #52]	; 0x34
 8004b48:	e7c0      	b.n	8004acc <__sflush_r+0x1c>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b0      	blx	r6
 8004b50:	1c41      	adds	r1, r0, #1
 8004b52:	d1c8      	bne.n	8004ae6 <__sflush_r+0x36>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0c5      	beq.n	8004ae6 <__sflush_r+0x36>
 8004b5a:	2b1d      	cmp	r3, #29
 8004b5c:	d001      	beq.n	8004b62 <__sflush_r+0xb2>
 8004b5e:	2b16      	cmp	r3, #22
 8004b60:	d101      	bne.n	8004b66 <__sflush_r+0xb6>
 8004b62:	602f      	str	r7, [r5, #0]
 8004b64:	e7b1      	b.n	8004aca <__sflush_r+0x1a>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	e7ad      	b.n	8004acc <__sflush_r+0x1c>
 8004b70:	690f      	ldr	r7, [r1, #16]
 8004b72:	2f00      	cmp	r7, #0
 8004b74:	d0a9      	beq.n	8004aca <__sflush_r+0x1a>
 8004b76:	0793      	lsls	r3, r2, #30
 8004b78:	680e      	ldr	r6, [r1, #0]
 8004b7a:	bf08      	it	eq
 8004b7c:	694b      	ldreq	r3, [r1, #20]
 8004b7e:	600f      	str	r7, [r1, #0]
 8004b80:	bf18      	it	ne
 8004b82:	2300      	movne	r3, #0
 8004b84:	eba6 0807 	sub.w	r8, r6, r7
 8004b88:	608b      	str	r3, [r1, #8]
 8004b8a:	f1b8 0f00 	cmp.w	r8, #0
 8004b8e:	dd9c      	ble.n	8004aca <__sflush_r+0x1a>
 8004b90:	6a21      	ldr	r1, [r4, #32]
 8004b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b94:	4643      	mov	r3, r8
 8004b96:	463a      	mov	r2, r7
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b0      	blx	r6
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	dc06      	bgt.n	8004bae <__sflush_r+0xfe>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bac:	e78e      	b.n	8004acc <__sflush_r+0x1c>
 8004bae:	4407      	add	r7, r0
 8004bb0:	eba8 0800 	sub.w	r8, r8, r0
 8004bb4:	e7e9      	b.n	8004b8a <__sflush_r+0xda>
 8004bb6:	bf00      	nop
 8004bb8:	dfbffffe 	.word	0xdfbffffe

08004bbc <_fflush_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	690b      	ldr	r3, [r1, #16]
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	b913      	cbnz	r3, 8004bcc <_fflush_r+0x10>
 8004bc6:	2500      	movs	r5, #0
 8004bc8:	4628      	mov	r0, r5
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
 8004bcc:	b118      	cbz	r0, 8004bd6 <_fflush_r+0x1a>
 8004bce:	6a03      	ldr	r3, [r0, #32]
 8004bd0:	b90b      	cbnz	r3, 8004bd6 <_fflush_r+0x1a>
 8004bd2:	f7ff fb21 	bl	8004218 <__sinit>
 8004bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f3      	beq.n	8004bc6 <_fflush_r+0xa>
 8004bde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004be0:	07d0      	lsls	r0, r2, #31
 8004be2:	d404      	bmi.n	8004bee <_fflush_r+0x32>
 8004be4:	0599      	lsls	r1, r3, #22
 8004be6:	d402      	bmi.n	8004bee <_fflush_r+0x32>
 8004be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bea:	f7ff fbec 	bl	80043c6 <__retarget_lock_acquire_recursive>
 8004bee:	4628      	mov	r0, r5
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	f7ff ff5d 	bl	8004ab0 <__sflush_r>
 8004bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bf8:	07da      	lsls	r2, r3, #31
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	d4e4      	bmi.n	8004bc8 <_fflush_r+0xc>
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	059b      	lsls	r3, r3, #22
 8004c02:	d4e1      	bmi.n	8004bc8 <_fflush_r+0xc>
 8004c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c06:	f7ff fbdf 	bl	80043c8 <__retarget_lock_release_recursive>
 8004c0a:	e7dd      	b.n	8004bc8 <_fflush_r+0xc>

08004c0c <__malloc_lock>:
 8004c0c:	4801      	ldr	r0, [pc, #4]	; (8004c14 <__malloc_lock+0x8>)
 8004c0e:	f7ff bbda 	b.w	80043c6 <__retarget_lock_acquire_recursive>
 8004c12:	bf00      	nop
 8004c14:	20000a70 	.word	0x20000a70

08004c18 <__malloc_unlock>:
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <__malloc_unlock+0x8>)
 8004c1a:	f7ff bbd5 	b.w	80043c8 <__retarget_lock_release_recursive>
 8004c1e:	bf00      	nop
 8004c20:	20000a70 	.word	0x20000a70

08004c24 <__sread>:
 8004c24:	b510      	push	{r4, lr}
 8004c26:	460c      	mov	r4, r1
 8004c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2c:	f000 f978 	bl	8004f20 <_read_r>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	bfab      	itete	ge
 8004c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c36:	89a3      	ldrhlt	r3, [r4, #12]
 8004c38:	181b      	addge	r3, r3, r0
 8004c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c3e:	bfac      	ite	ge
 8004c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c42:	81a3      	strhlt	r3, [r4, #12]
 8004c44:	bd10      	pop	{r4, pc}

08004c46 <__swrite>:
 8004c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4a:	461f      	mov	r7, r3
 8004c4c:	898b      	ldrh	r3, [r1, #12]
 8004c4e:	05db      	lsls	r3, r3, #23
 8004c50:	4605      	mov	r5, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	4616      	mov	r6, r2
 8004c56:	d505      	bpl.n	8004c64 <__swrite+0x1e>
 8004c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f000 f94c 	bl	8004efc <_lseek_r>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	4632      	mov	r2, r6
 8004c72:	463b      	mov	r3, r7
 8004c74:	4628      	mov	r0, r5
 8004c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7a:	f000 b973 	b.w	8004f64 <_write_r>

08004c7e <__sseek>:
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	460c      	mov	r4, r1
 8004c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c86:	f000 f939 	bl	8004efc <_lseek_r>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	bf15      	itete	ne
 8004c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c9a:	81a3      	strheq	r3, [r4, #12]
 8004c9c:	bf18      	it	ne
 8004c9e:	81a3      	strhne	r3, [r4, #12]
 8004ca0:	bd10      	pop	{r4, pc}

08004ca2 <__sclose>:
 8004ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca6:	f000 b8f7 	b.w	8004e98 <_close_r>

08004caa <__swbuf_r>:
 8004caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cac:	460e      	mov	r6, r1
 8004cae:	4614      	mov	r4, r2
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	b118      	cbz	r0, 8004cbc <__swbuf_r+0x12>
 8004cb4:	6a03      	ldr	r3, [r0, #32]
 8004cb6:	b90b      	cbnz	r3, 8004cbc <__swbuf_r+0x12>
 8004cb8:	f7ff faae 	bl	8004218 <__sinit>
 8004cbc:	69a3      	ldr	r3, [r4, #24]
 8004cbe:	60a3      	str	r3, [r4, #8]
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	071a      	lsls	r2, r3, #28
 8004cc4:	d525      	bpl.n	8004d12 <__swbuf_r+0x68>
 8004cc6:	6923      	ldr	r3, [r4, #16]
 8004cc8:	b31b      	cbz	r3, 8004d12 <__swbuf_r+0x68>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	6922      	ldr	r2, [r4, #16]
 8004cce:	1a98      	subs	r0, r3, r2
 8004cd0:	6963      	ldr	r3, [r4, #20]
 8004cd2:	b2f6      	uxtb	r6, r6
 8004cd4:	4283      	cmp	r3, r0
 8004cd6:	4637      	mov	r7, r6
 8004cd8:	dc04      	bgt.n	8004ce4 <__swbuf_r+0x3a>
 8004cda:	4621      	mov	r1, r4
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f7ff ff6d 	bl	8004bbc <_fflush_r>
 8004ce2:	b9e0      	cbnz	r0, 8004d1e <__swbuf_r+0x74>
 8004ce4:	68a3      	ldr	r3, [r4, #8]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	60a3      	str	r3, [r4, #8]
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	6022      	str	r2, [r4, #0]
 8004cf0:	701e      	strb	r6, [r3, #0]
 8004cf2:	6962      	ldr	r2, [r4, #20]
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d004      	beq.n	8004d04 <__swbuf_r+0x5a>
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	07db      	lsls	r3, r3, #31
 8004cfe:	d506      	bpl.n	8004d0e <__swbuf_r+0x64>
 8004d00:	2e0a      	cmp	r6, #10
 8004d02:	d104      	bne.n	8004d0e <__swbuf_r+0x64>
 8004d04:	4621      	mov	r1, r4
 8004d06:	4628      	mov	r0, r5
 8004d08:	f7ff ff58 	bl	8004bbc <_fflush_r>
 8004d0c:	b938      	cbnz	r0, 8004d1e <__swbuf_r+0x74>
 8004d0e:	4638      	mov	r0, r7
 8004d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d12:	4621      	mov	r1, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f805 	bl	8004d24 <__swsetup_r>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d0d5      	beq.n	8004cca <__swbuf_r+0x20>
 8004d1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004d22:	e7f4      	b.n	8004d0e <__swbuf_r+0x64>

08004d24 <__swsetup_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4b2a      	ldr	r3, [pc, #168]	; (8004dd0 <__swsetup_r+0xac>)
 8004d28:	4605      	mov	r5, r0
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	b118      	cbz	r0, 8004d38 <__swsetup_r+0x14>
 8004d30:	6a03      	ldr	r3, [r0, #32]
 8004d32:	b90b      	cbnz	r3, 8004d38 <__swsetup_r+0x14>
 8004d34:	f7ff fa70 	bl	8004218 <__sinit>
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d3e:	0718      	lsls	r0, r3, #28
 8004d40:	d422      	bmi.n	8004d88 <__swsetup_r+0x64>
 8004d42:	06d9      	lsls	r1, r3, #27
 8004d44:	d407      	bmi.n	8004d56 <__swsetup_r+0x32>
 8004d46:	2309      	movs	r3, #9
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d4e:	81a3      	strh	r3, [r4, #12]
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d54:	e034      	b.n	8004dc0 <__swsetup_r+0x9c>
 8004d56:	0758      	lsls	r0, r3, #29
 8004d58:	d512      	bpl.n	8004d80 <__swsetup_r+0x5c>
 8004d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d5c:	b141      	cbz	r1, 8004d70 <__swsetup_r+0x4c>
 8004d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d62:	4299      	cmp	r1, r3
 8004d64:	d002      	beq.n	8004d6c <__swsetup_r+0x48>
 8004d66:	4628      	mov	r0, r5
 8004d68:	f000 f90e 	bl	8004f88 <_free_r>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	6363      	str	r3, [r4, #52]	; 0x34
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d76:	81a3      	strh	r3, [r4, #12]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6063      	str	r3, [r4, #4]
 8004d7c:	6923      	ldr	r3, [r4, #16]
 8004d7e:	6023      	str	r3, [r4, #0]
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	f043 0308 	orr.w	r3, r3, #8
 8004d86:	81a3      	strh	r3, [r4, #12]
 8004d88:	6923      	ldr	r3, [r4, #16]
 8004d8a:	b94b      	cbnz	r3, 8004da0 <__swsetup_r+0x7c>
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d96:	d003      	beq.n	8004da0 <__swsetup_r+0x7c>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 f840 	bl	8004e20 <__smakebuf_r>
 8004da0:	89a0      	ldrh	r0, [r4, #12]
 8004da2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004da6:	f010 0301 	ands.w	r3, r0, #1
 8004daa:	d00a      	beq.n	8004dc2 <__swsetup_r+0x9e>
 8004dac:	2300      	movs	r3, #0
 8004dae:	60a3      	str	r3, [r4, #8]
 8004db0:	6963      	ldr	r3, [r4, #20]
 8004db2:	425b      	negs	r3, r3
 8004db4:	61a3      	str	r3, [r4, #24]
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	b943      	cbnz	r3, 8004dcc <__swsetup_r+0xa8>
 8004dba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004dbe:	d1c4      	bne.n	8004d4a <__swsetup_r+0x26>
 8004dc0:	bd38      	pop	{r3, r4, r5, pc}
 8004dc2:	0781      	lsls	r1, r0, #30
 8004dc4:	bf58      	it	pl
 8004dc6:	6963      	ldrpl	r3, [r4, #20]
 8004dc8:	60a3      	str	r3, [r4, #8]
 8004dca:	e7f4      	b.n	8004db6 <__swsetup_r+0x92>
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e7f7      	b.n	8004dc0 <__swsetup_r+0x9c>
 8004dd0:	20000064 	.word	0x20000064

08004dd4 <__swhatbuf_r>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	b096      	sub	sp, #88	; 0x58
 8004de0:	4615      	mov	r5, r2
 8004de2:	461e      	mov	r6, r3
 8004de4:	da0d      	bge.n	8004e02 <__swhatbuf_r+0x2e>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004dec:	f04f 0100 	mov.w	r1, #0
 8004df0:	bf0c      	ite	eq
 8004df2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004df6:	2340      	movne	r3, #64	; 0x40
 8004df8:	2000      	movs	r0, #0
 8004dfa:	6031      	str	r1, [r6, #0]
 8004dfc:	602b      	str	r3, [r5, #0]
 8004dfe:	b016      	add	sp, #88	; 0x58
 8004e00:	bd70      	pop	{r4, r5, r6, pc}
 8004e02:	466a      	mov	r2, sp
 8004e04:	f000 f858 	bl	8004eb8 <_fstat_r>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	dbec      	blt.n	8004de6 <__swhatbuf_r+0x12>
 8004e0c:	9901      	ldr	r1, [sp, #4]
 8004e0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004e12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004e16:	4259      	negs	r1, r3
 8004e18:	4159      	adcs	r1, r3
 8004e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e1e:	e7eb      	b.n	8004df8 <__swhatbuf_r+0x24>

08004e20 <__smakebuf_r>:
 8004e20:	898b      	ldrh	r3, [r1, #12]
 8004e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e24:	079d      	lsls	r5, r3, #30
 8004e26:	4606      	mov	r6, r0
 8004e28:	460c      	mov	r4, r1
 8004e2a:	d507      	bpl.n	8004e3c <__smakebuf_r+0x1c>
 8004e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	6123      	str	r3, [r4, #16]
 8004e34:	2301      	movs	r3, #1
 8004e36:	6163      	str	r3, [r4, #20]
 8004e38:	b002      	add	sp, #8
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	ab01      	add	r3, sp, #4
 8004e3e:	466a      	mov	r2, sp
 8004e40:	f7ff ffc8 	bl	8004dd4 <__swhatbuf_r>
 8004e44:	9900      	ldr	r1, [sp, #0]
 8004e46:	4605      	mov	r5, r0
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f7ff fc21 	bl	8004690 <_malloc_r>
 8004e4e:	b948      	cbnz	r0, 8004e64 <__smakebuf_r+0x44>
 8004e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e54:	059a      	lsls	r2, r3, #22
 8004e56:	d4ef      	bmi.n	8004e38 <__smakebuf_r+0x18>
 8004e58:	f023 0303 	bic.w	r3, r3, #3
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	e7e3      	b.n	8004e2c <__smakebuf_r+0xc>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	6020      	str	r0, [r4, #0]
 8004e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	9b00      	ldr	r3, [sp, #0]
 8004e70:	6163      	str	r3, [r4, #20]
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	6120      	str	r0, [r4, #16]
 8004e76:	b15b      	cbz	r3, 8004e90 <__smakebuf_r+0x70>
 8004e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f000 f82d 	bl	8004edc <_isatty_r>
 8004e82:	b128      	cbz	r0, 8004e90 <__smakebuf_r+0x70>
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	81a3      	strh	r3, [r4, #12]
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	431d      	orrs	r5, r3
 8004e94:	81a5      	strh	r5, [r4, #12]
 8004e96:	e7cf      	b.n	8004e38 <__smakebuf_r+0x18>

08004e98 <_close_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d06      	ldr	r5, [pc, #24]	; (8004eb4 <_close_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f7fc f9c3 	bl	800122e <_close>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_close_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_close_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20000a7c 	.word	0x20000a7c

08004eb8 <_fstat_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d07      	ldr	r5, [pc, #28]	; (8004ed8 <_fstat_r+0x20>)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	602b      	str	r3, [r5, #0]
 8004ec6:	f7fc f9be 	bl	8001246 <_fstat>
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	d102      	bne.n	8004ed4 <_fstat_r+0x1c>
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	b103      	cbz	r3, 8004ed4 <_fstat_r+0x1c>
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	bd38      	pop	{r3, r4, r5, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000a7c 	.word	0x20000a7c

08004edc <_isatty_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4d06      	ldr	r5, [pc, #24]	; (8004ef8 <_isatty_r+0x1c>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	f7fc f9bd 	bl	8001266 <_isatty>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_isatty_r+0x1a>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_isatty_r+0x1a>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	20000a7c 	.word	0x20000a7c

08004efc <_lseek_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d07      	ldr	r5, [pc, #28]	; (8004f1c <_lseek_r+0x20>)
 8004f00:	4604      	mov	r4, r0
 8004f02:	4608      	mov	r0, r1
 8004f04:	4611      	mov	r1, r2
 8004f06:	2200      	movs	r2, #0
 8004f08:	602a      	str	r2, [r5, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f7fc f9b6 	bl	800127c <_lseek>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d102      	bne.n	8004f1a <_lseek_r+0x1e>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	b103      	cbz	r3, 8004f1a <_lseek_r+0x1e>
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	20000a7c 	.word	0x20000a7c

08004f20 <_read_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d07      	ldr	r5, [pc, #28]	; (8004f40 <_read_r+0x20>)
 8004f24:	4604      	mov	r4, r0
 8004f26:	4608      	mov	r0, r1
 8004f28:	4611      	mov	r1, r2
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	602a      	str	r2, [r5, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f7fc f944 	bl	80011bc <_read>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	d102      	bne.n	8004f3e <_read_r+0x1e>
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	b103      	cbz	r3, 8004f3e <_read_r+0x1e>
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	20000a7c 	.word	0x20000a7c

08004f44 <_sbrk_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4d06      	ldr	r5, [pc, #24]	; (8004f60 <_sbrk_r+0x1c>)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	f7fc f9a2 	bl	8001298 <_sbrk>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_sbrk_r+0x1a>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_sbrk_r+0x1a>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	20000a7c 	.word	0x20000a7c

08004f64 <_write_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d07      	ldr	r5, [pc, #28]	; (8004f84 <_write_r+0x20>)
 8004f68:	4604      	mov	r4, r0
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	2200      	movs	r2, #0
 8004f70:	602a      	str	r2, [r5, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f7fc f93f 	bl	80011f6 <_write>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d102      	bne.n	8004f82 <_write_r+0x1e>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	b103      	cbz	r3, 8004f82 <_write_r+0x1e>
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	20000a7c 	.word	0x20000a7c

08004f88 <_free_r>:
 8004f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f8a:	2900      	cmp	r1, #0
 8004f8c:	d044      	beq.n	8005018 <_free_r+0x90>
 8004f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f92:	9001      	str	r0, [sp, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f1a1 0404 	sub.w	r4, r1, #4
 8004f9a:	bfb8      	it	lt
 8004f9c:	18e4      	addlt	r4, r4, r3
 8004f9e:	f7ff fe35 	bl	8004c0c <__malloc_lock>
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <_free_r+0x94>)
 8004fa4:	9801      	ldr	r0, [sp, #4]
 8004fa6:	6813      	ldr	r3, [r2, #0]
 8004fa8:	b933      	cbnz	r3, 8004fb8 <_free_r+0x30>
 8004faa:	6063      	str	r3, [r4, #4]
 8004fac:	6014      	str	r4, [r2, #0]
 8004fae:	b003      	add	sp, #12
 8004fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fb4:	f7ff be30 	b.w	8004c18 <__malloc_unlock>
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d908      	bls.n	8004fce <_free_r+0x46>
 8004fbc:	6825      	ldr	r5, [r4, #0]
 8004fbe:	1961      	adds	r1, r4, r5
 8004fc0:	428b      	cmp	r3, r1
 8004fc2:	bf01      	itttt	eq
 8004fc4:	6819      	ldreq	r1, [r3, #0]
 8004fc6:	685b      	ldreq	r3, [r3, #4]
 8004fc8:	1949      	addeq	r1, r1, r5
 8004fca:	6021      	streq	r1, [r4, #0]
 8004fcc:	e7ed      	b.n	8004faa <_free_r+0x22>
 8004fce:	461a      	mov	r2, r3
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	b10b      	cbz	r3, 8004fd8 <_free_r+0x50>
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d9fa      	bls.n	8004fce <_free_r+0x46>
 8004fd8:	6811      	ldr	r1, [r2, #0]
 8004fda:	1855      	adds	r5, r2, r1
 8004fdc:	42a5      	cmp	r5, r4
 8004fde:	d10b      	bne.n	8004ff8 <_free_r+0x70>
 8004fe0:	6824      	ldr	r4, [r4, #0]
 8004fe2:	4421      	add	r1, r4
 8004fe4:	1854      	adds	r4, r2, r1
 8004fe6:	42a3      	cmp	r3, r4
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	d1e0      	bne.n	8004fae <_free_r+0x26>
 8004fec:	681c      	ldr	r4, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	6053      	str	r3, [r2, #4]
 8004ff2:	440c      	add	r4, r1
 8004ff4:	6014      	str	r4, [r2, #0]
 8004ff6:	e7da      	b.n	8004fae <_free_r+0x26>
 8004ff8:	d902      	bls.n	8005000 <_free_r+0x78>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	6003      	str	r3, [r0, #0]
 8004ffe:	e7d6      	b.n	8004fae <_free_r+0x26>
 8005000:	6825      	ldr	r5, [r4, #0]
 8005002:	1961      	adds	r1, r4, r5
 8005004:	428b      	cmp	r3, r1
 8005006:	bf04      	itt	eq
 8005008:	6819      	ldreq	r1, [r3, #0]
 800500a:	685b      	ldreq	r3, [r3, #4]
 800500c:	6063      	str	r3, [r4, #4]
 800500e:	bf04      	itt	eq
 8005010:	1949      	addeq	r1, r1, r5
 8005012:	6021      	streq	r1, [r4, #0]
 8005014:	6054      	str	r4, [r2, #4]
 8005016:	e7ca      	b.n	8004fae <_free_r+0x26>
 8005018:	b003      	add	sp, #12
 800501a:	bd30      	pop	{r4, r5, pc}
 800501c:	20000a74 	.word	0x20000a74

08005020 <_init>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr

0800502c <_fini>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr


BMS_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050cc  080050cc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d4  080050d4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080050dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a10  20000068  08005144  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  08005144  00020a78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b612  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002118  00000000  00000000  0002b6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  0002d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079b  00000000  00000000  0002e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023013  00000000  00000000  0002e9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d02f  00000000  00000000  000519be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d08ae  00000000  00000000  0005e9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f7c  00000000  00000000  0012f29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00132218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ec4 	.word	0x08004ec4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004ec4 	.word	0x08004ec4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005c0:	b092      	sub	sp, #72	; 0x48
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fe48 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f8da 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f9ce 	bl	800096c <MX_GPIO_Init>
  MX_UART5_Init();
 80005d0:	f000 f9a2 	bl	8000918 <MX_UART5_Init>
  MX_RTC_Init();
 80005d4:	f000 f946 	bl	8000864 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  uint32_t magic_value = *(__IO uint32_t*)OTA_CONFIG_SECTOR;
 80005d8:	4b61      	ldr	r3, [pc, #388]	; (8000760 <main+0x1a4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (magic_value == OTA_MAGIC_VALUE) {  // Check for magic value in config sector indicating an OTA update was requested
 80005de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e0:	4a60      	ldr	r2, [pc, #384]	; (8000764 <main+0x1a8>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	f040 80b8 	bne.w	8000758 <main+0x19c>
      // Clear the magic value to prevent repeated OTA updates
      HAL_FLASH_Unlock();
 80005e8:	f001 f832 	bl	8001650 <HAL_FLASH_Unlock>
      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80005ec:	4b5e      	ldr	r3, [pc, #376]	; (8000768 <main+0x1ac>)
 80005ee:	22f3      	movs	r2, #243	; 0xf3
 80005f0:	60da      	str	r2, [r3, #12]
      FLASH_Erase_Sector(FLASH_SECTOR_2, VOLTAGE_RANGE_3);
 80005f2:	2102      	movs	r1, #2
 80005f4:	2002      	movs	r0, #2
 80005f6:	f001 fa31 	bl	8001a5c <FLASH_Erase_Sector>
      HAL_FLASH_Lock();
 80005fa:	f001 f84b 	bl	8001694 <HAL_FLASH_Lock>

      // Initiate the OTA update process
      runOtaUpdate();
 80005fe:	f000 fa55 	bl	8000aac <runOtaUpdate>

      // If OTA_Update() does not reset the system, you can add a reset here
      HAL_StatusTypeDef ret;

      // Unlock the Flash memory for write access
      ret = HAL_FLASH_Unlock();
 8000602:	f001 f825 	bl	8001650 <HAL_FLASH_Unlock>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      if (ret != HAL_OK) {
 800060c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000610:	2b00      	cmp	r3, #0
 8000612:	d01e      	beq.n	8000652 <main+0x96>
    	  char msg[] = "Error unlocking flash while attempting OTA update!";
 8000614:	4b55      	ldr	r3, [pc, #340]	; (800076c <main+0x1b0>)
 8000616:	463c      	mov	r4, r7
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	682b      	ldr	r3, [r5, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	8022      	strh	r2, [r4, #0]
 800062c:	3402      	adds	r4, #2
 800062e:	0c1b      	lsrs	r3, r3, #16
 8000630:	7023      	strb	r3, [r4, #0]
    	  HAL_UART_Transmit(&huart5, (uint8_t*) msg, strlen(msg) + 1, HAL_MAX_DELAY);
 8000632:	463b      	mov	r3, r7
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fdeb 	bl	8000210 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29b      	uxth	r3, r3
 800063e:	3301      	adds	r3, #1
 8000640:	b29a      	uxth	r2, r3
 8000642:	4639      	mov	r1, r7
 8000644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000648:	4849      	ldr	r0, [pc, #292]	; (8000770 <main+0x1b4>)
 800064a:	f003 f859 	bl	8003700 <HAL_UART_Transmit>
    	  Error_Handler();
 800064e:	f000 fa27 	bl	8000aa0 <Error_Handler>
      }

      // Clear any existing flags
      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8000652:	4b45      	ldr	r3, [pc, #276]	; (8000768 <main+0x1ac>)
 8000654:	22f3      	movs	r2, #243	; 0xf3
 8000656:	60da      	str	r2, [r3, #12]

      // Erase the specific sector where the magic value is stored
      FLASH_Erase_Sector(FLASH_SECTOR_2, VOLTAGE_RANGE_3);
 8000658:	2102      	movs	r1, #2
 800065a:	2002      	movs	r0, #2
 800065c:	f001 f9fe 	bl	8001a5c <FLASH_Erase_Sector>
      if (ret != HAL_OK) {
 8000660:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000664:	2b00      	cmp	r3, #0
 8000666:	d01e      	beq.n	80006a6 <main+0xea>
    	  char msg[] = "Error erasing config sector while attempting OTA update!";
 8000668:	4b42      	ldr	r3, [pc, #264]	; (8000774 <main+0x1b8>)
 800066a:	463c      	mov	r4, r7
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067e:	c403      	stmia	r4!, {r0, r1}
 8000680:	7022      	strb	r2, [r4, #0]
    	  HAL_UART_Transmit(&huart5, (uint8_t*) msg, strlen(msg) + 1, HAL_MAX_DELAY);
 8000682:	463b      	mov	r3, r7
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdc3 	bl	8000210 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29b      	uxth	r3, r3
 800068e:	3301      	adds	r3, #1
 8000690:	b29a      	uxth	r2, r3
 8000692:	4639      	mov	r1, r7
 8000694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000698:	4835      	ldr	r0, [pc, #212]	; (8000770 <main+0x1b4>)
 800069a:	f003 f831 	bl	8003700 <HAL_UART_Transmit>
          HAL_FLASH_Lock();
 800069e:	f000 fff9 	bl	8001694 <HAL_FLASH_Lock>
          Error_Handler();
 80006a2:	f000 f9fd 	bl	8000aa0 <Error_Handler>
      }

      // write a different value to the address to explicitly clear it
      uint32_t clear_value = 0xFFFFFFFF;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      ret = HAL_FLASH_Program(TYPEPROGRAM_WORD, OTA_CONFIG_SECTOR, clear_value);
 80006ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ae:	2200      	movs	r2, #0
 80006b0:	4698      	mov	r8, r3
 80006b2:	4691      	mov	r9, r2
 80006b4:	4642      	mov	r2, r8
 80006b6:	464b      	mov	r3, r9
 80006b8:	4929      	ldr	r1, [pc, #164]	; (8000760 <main+0x1a4>)
 80006ba:	2002      	movs	r0, #2
 80006bc:	f000 ff74 	bl	80015a8 <HAL_FLASH_Program>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      if (ret != HAL_OK) {
 80006c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d01e      	beq.n	800070c <main+0x150>
    	  char msg[] = "Error writing to config sector while attempting OTA update!";
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <main+0x1bc>)
 80006d0:	463c      	mov	r4, r7
 80006d2:	461d      	mov	r5, r3
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  HAL_UART_Transmit(&huart5, (uint8_t*) msg, strlen(msg) + 1, HAL_MAX_DELAY);
 80006e8:	463b      	mov	r3, r7
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd90 	bl	8000210 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	3301      	adds	r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4639      	mov	r1, r7
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006fe:	481c      	ldr	r0, [pc, #112]	; (8000770 <main+0x1b4>)
 8000700:	f002 fffe 	bl	8003700 <HAL_UART_Transmit>
          HAL_FLASH_Lock();
 8000704:	f000 ffc6 	bl	8001694 <HAL_FLASH_Lock>
    	  Error_Handler();
 8000708:	f000 f9ca 	bl	8000aa0 <Error_Handler>
      }

      // Lock the Flash memory again
      ret = HAL_FLASH_Lock();
 800070c:	f000 ffc2 	bl	8001694 <HAL_FLASH_Lock>
 8000710:	4603      	mov	r3, r0
 8000712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      if (ret != HAL_OK) {
 8000716:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800071a:	2b00      	cmp	r3, #0
 800071c:	d01a      	beq.n	8000754 <main+0x198>
    	  char msg[] = "Error locking flash while attempting OTA update!";
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <main+0x1c0>)
 8000720:	463c      	mov	r4, r7
 8000722:	461d      	mov	r5, r3
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	682b      	ldr	r3, [r5, #0]
 8000732:	7023      	strb	r3, [r4, #0]
    	  HAL_UART_Transmit(&huart5, (uint8_t*) msg, strlen(msg) + 1, HAL_MAX_DELAY);
 8000734:	463b      	mov	r3, r7
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd6a 	bl	8000210 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29b      	uxth	r3, r3
 8000740:	3301      	adds	r3, #1
 8000742:	b29a      	uxth	r2, r3
 8000744:	4639      	mov	r1, r7
 8000746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <main+0x1b4>)
 800074c:	f002 ffd8 	bl	8003700 <HAL_UART_Transmit>
    	  Error_Handler();
 8000750:	f000 f9a6 	bl	8000aa0 <Error_Handler>
      }

      HAL_NVIC_SystemReset();
 8000754:	f000 ff17 	bl	8001586 <HAL_NVIC_SystemReset>
  }

  // No OTA Magic Value found in config sector, jump to application
  goto_application();
 8000758:	f000 f984 	bl	8000a64 <goto_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800075c:	e7fe      	b.n	800075c <main+0x1a0>
 800075e:	bf00      	nop
 8000760:	08008000 	.word	0x08008000
 8000764:	deadbeef 	.word	0xdeadbeef
 8000768:	40023c00 	.word	0x40023c00
 800076c:	08004edc 	.word	0x08004edc
 8000770:	200000a4 	.word	0x200000a4
 8000774:	08004f10 	.word	0x08004f10
 8000778:	08004f4c 	.word	0x08004f4c
 800077c:	08004f88 	.word	0x08004f88

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2234      	movs	r2, #52	; 0x34
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fd38 	bl	8004204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <SystemClock_Config+0xdc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a2b      	ldr	r2, [pc, #172]	; (800085c <SystemClock_Config+0xdc>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <SystemClock_Config+0xdc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <SystemClock_Config+0xe0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007cc:	4a24      	ldr	r2, [pc, #144]	; (8000860 <SystemClock_Config+0xe0>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <SystemClock_Config+0xe0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007e0:	2309      	movs	r3, #9
 80007e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007fc:	2319      	movs	r3, #25
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fa43 	bl	8002ca0 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000820:	f000 f93e 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000830:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2102      	movs	r1, #2
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fb46 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800084e:	f000 f927 	bl	8000aa0 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	; 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_RTC_Init+0xac>)
 800087e:	4a25      	ldr	r2, [pc, #148]	; (8000914 <MX_RTC_Init+0xb0>)
 8000880:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_RTC_Init+0xac>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_RTC_Init+0xac>)
 800088a:	227f      	movs	r2, #127	; 0x7f
 800088c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_RTC_Init+0xac>)
 8000890:	22ff      	movs	r2, #255	; 0xff
 8000892:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_RTC_Init+0xac>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_RTC_Init+0xac>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_RTC_Init+0xac>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a6:	481a      	ldr	r0, [pc, #104]	; (8000910 <MX_RTC_Init+0xac>)
 80008a8:	f002 fc98 	bl	80031dc <HAL_RTC_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f8f5 	bl	8000aa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80008be:	2300      	movs	r3, #0
 80008c0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2201      	movs	r2, #1
 80008ce:	4619      	mov	r1, r3
 80008d0:	480f      	ldr	r0, [pc, #60]	; (8000910 <MX_RTC_Init+0xac>)
 80008d2:	f002 fd06 	bl	80032e2 <HAL_RTC_SetTime>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f8e0 	bl	8000aa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008e0:	2301      	movs	r3, #1
 80008e2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008e4:	2301      	movs	r3, #1
 80008e6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	2201      	movs	r2, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <MX_RTC_Init+0xac>)
 80008f8:	f002 fd8d 	bl	8003416 <HAL_RTC_SetDate>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000902:	f000 f8cd 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000084 	.word	0x20000084
 8000914:	40002800 	.word	0x40002800

08000918 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_UART5_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_UART5_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_UART5_Init+0x4c>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_UART5_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_UART5_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_UART5_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_UART5_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_UART5_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_UART5_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_UART5_Init+0x4c>)
 8000950:	f002 fe86 	bl	8003660 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800095a:	f000 f8a1 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000a4 	.word	0x200000a4
 8000968:	40005000 	.word	0x40005000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <MX_GPIO_Init+0xec>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <MX_GPIO_Init+0xec>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <MX_GPIO_Init+0xec>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a2c      	ldr	r2, [pc, #176]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <MX_GPIO_Init+0xec>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_GPIO_Init+0xec>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	4812      	ldr	r0, [pc, #72]	; (8000a5c <MX_GPIO_Init+0xf0>)
 8000a14:	f001 fa44 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_GPIO_Init+0xf4>)
 8000a2e:	f001 f8a3 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a32:	2320      	movs	r3, #32
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_GPIO_Init+0xf0>)
 8000a4a:	f001 f895 	bl	8001b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40020800 	.word	0x40020800

08000a64 <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (APP_FLASH_ADDR + 4U)));
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <goto_application+0x34>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	607b      	str	r3, [r7, #4]

	HAL_RCC_DeInit();
 8000a70:	f002 f81e 	bl	8002ab0 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000a74:	f000 fc12 	bl	800129c <HAL_DeInit>
//	__set_MSP(*(volatile uint32_t*) APP_FLASH_ADDR);
	SysTick->CTRL = 0;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <goto_application+0x38>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <goto_application+0x38>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <goto_application+0x38>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]

	// Jump to App
	app_reset_handler();
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4798      	blx	r3
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0800c004 	.word	0x0800c004
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <runOtaUpdate>:
/**
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
int runOtaUpdate() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	sendOtaResponse(PACKET_ACK);  // Send Ack to signal that we are ready to start OTA
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8ac 	bl	8000c10 <sendOtaResponse>

	ota_state = START;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <runOtaUpdate+0x70>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
	int bytes_received = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]

	while (ota_state != IDLE) {
 8000ac2:	e022      	b.n	8000b0a <runOtaUpdate+0x5e>
		memset(RX_BUFFER, 0, PACKET_MAX_SIZE);
 8000ac4:	f640 020b 	movw	r2, #2059	; 0x80b
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4815      	ldr	r0, [pc, #84]	; (8000b20 <runOtaUpdate+0x74>)
 8000acc:	f003 fb9a 	bl	8004204 <memset>

		bytes_received = receiveOtaPacket(RX_BUFFER, PACKET_MAX_SIZE);
 8000ad0:	f640 010b 	movw	r1, #2059	; 0x80b
 8000ad4:	4812      	ldr	r0, [pc, #72]	; (8000b20 <runOtaUpdate+0x74>)
 8000ad6:	f000 f825 	bl	8000b24 <receiveOtaPacket>
 8000ada:	6078      	str	r0, [r7, #4]
		if (bytes_received > 0) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	dd12      	ble.n	8000b08 <runOtaUpdate+0x5c>
			if (processOtaPacket(RX_BUFFER, bytes_received)) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <runOtaUpdate+0x74>)
 8000aea:	f000 f8c9 	bl	8000c80 <processOtaPacket>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <runOtaUpdate+0x54>
				sendOtaResponse(PACKET_NACK);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f000 f88b 	bl	8000c10 <sendOtaResponse>
				return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afe:	e009      	b.n	8000b14 <runOtaUpdate+0x68>
			} else {
				sendOtaResponse(PACKET_ACK);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 f885 	bl	8000c10 <sendOtaResponse>
 8000b06:	e000      	b.n	8000b0a <runOtaUpdate+0x5e>
			}
		} else {
			continue;
 8000b08:	bf00      	nop
	while (ota_state != IDLE) {
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <runOtaUpdate+0x70>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1d8      	bne.n	8000ac4 <runOtaUpdate+0x18>
		}
	}

	return 0;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200008f7 	.word	0x200008f7
 8000b20:	200000ec 	.word	0x200000ec

08000b24 <receiveOtaPacket>:


static int receiveOtaPacket(uint8_t* buf, uint16_t size) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
	// Parse Ota Packet
	HAL_StatusTypeDef ret;
	uint16_t index = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	81fb      	strh	r3, [r7, #14]
	memset(buf, 0, PACKET_MAX_SIZE);
 8000b34:	f640 020b 	movw	r2, #2059	; 0x80b
 8000b38:	2100      	movs	r1, #0
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f003 fb62 	bl	8004204 <memset>

	// Receive the SOF, packet type, packet number, and payload length (6 bytes)
	ret = HAL_UART_Receive(&huart5, buf + index, 6, HAL_MAX_DELAY);
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	18d1      	adds	r1, r2, r3
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4a:	2206      	movs	r2, #6
 8000b4c:	482f      	ldr	r0, [pc, #188]	; (8000c0c <receiveOtaPacket+0xe8>)
 8000b4e:	f002 fe62 	bl	8003816 <HAL_UART_Receive>
 8000b52:	4603      	mov	r3, r0
 8000b54:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000b56:	7b7b      	ldrb	r3, [r7, #13]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <receiveOtaPacket+0x3c>
		return 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e050      	b.n	8000c02 <receiveOtaPacket+0xde>
	}

	if (buf[index] != PACKET_SOF) {
 8000b60:	89fb      	ldrh	r3, [r7, #14]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d001      	beq.n	8000b70 <receiveOtaPacket+0x4c>
//		printf("Did not receive SOF!\n");
		return 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e048      	b.n	8000c02 <receiveOtaPacket+0xde>
	}
	index += 6;
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	3306      	adds	r3, #6
 8000b74:	81fb      	strh	r3, [r7, #14]

	// Get payload length (bytes 4 and 5)
	uint16_t payload_len = *((uint16_t*) &buf[4]);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	889b      	ldrh	r3, [r3, #4]
 8000b7a:	817b      	strh	r3, [r7, #10]
	// receive payload
	ret = HAL_UART_Receive(&huart5, buf + index, payload_len, HAL_MAX_DELAY);
 8000b7c:	89fb      	ldrh	r3, [r7, #14]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	18d1      	adds	r1, r2, r3
 8000b82:	897a      	ldrh	r2, [r7, #10]
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b88:	4820      	ldr	r0, [pc, #128]	; (8000c0c <receiveOtaPacket+0xe8>)
 8000b8a:	f002 fe44 	bl	8003816 <HAL_UART_Receive>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000b92:	7b7b      	ldrb	r3, [r7, #13]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <receiveOtaPacket+0x78>
//		printf("HAL Receive failed!\n");
		return 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e032      	b.n	8000c02 <receiveOtaPacket+0xde>
	}
	index += payload_len;
 8000b9c:	89fa      	ldrh	r2, [r7, #14]
 8000b9e:	897b      	ldrh	r3, [r7, #10]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	81fb      	strh	r3, [r7, #14]

	// receive crc
	ret = HAL_UART_Receive(&huart5, buf + index, 4, HAL_MAX_DELAY);
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	18d1      	adds	r1, r2, r3
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4816      	ldr	r0, [pc, #88]	; (8000c0c <receiveOtaPacket+0xe8>)
 8000bb2:	f002 fe30 	bl	8003816 <HAL_UART_Receive>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000bba:	7b7b      	ldrb	r3, [r7, #13]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <receiveOtaPacket+0xa0>
//		printf("HAL Receive failed!\n");
		return 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e01e      	b.n	8000c02 <receiveOtaPacket+0xde>
	}
	index += 4;
 8000bc4:	89fb      	ldrh	r3, [r7, #14]
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	81fb      	strh	r3, [r7, #14]

	// receive EOF
	ret = HAL_UART_Receive(&huart5, buf + index, 1, HAL_MAX_DELAY);
 8000bca:	89fb      	ldrh	r3, [r7, #14]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	18d1      	adds	r1, r2, r3
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <receiveOtaPacket+0xe8>)
 8000bd8:	f002 fe1d 	bl	8003816 <HAL_UART_Receive>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000be0:	7b7b      	ldrb	r3, [r7, #13]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <receiveOtaPacket+0xc6>
//		printf("HAL Receive failed!\n");
		return 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e00b      	b.n	8000c02 <receiveOtaPacket+0xde>
	}
	if (buf[index] != PACKET_EOF) {
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d001      	beq.n	8000bfa <receiveOtaPacket+0xd6>
//		printf("Did not receive EOF!\n");
		return 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e003      	b.n	8000c02 <receiveOtaPacket+0xde>
	}
	index++;
 8000bfa:	89fb      	ldrh	r3, [r7, #14]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	81fb      	strh	r3, [r7, #14]

	return index;
 8000c00:	89fb      	ldrh	r3, [r7, #14]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000a4 	.word	0x200000a4

08000c10 <sendOtaResponse>:

static int sendOtaResponse(uint8_t status) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	OtaResponsePacket response_packet;

    // Build command packet to send
    memset(&response_packet, 0, sizeof(OtaResponsePacket));
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	220c      	movs	r2, #12
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 faee 	bl	8004204 <memset>
    response_packet.sof         = PACKET_SOF;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	723b      	strb	r3, [r7, #8]
    response_packet.packet_type = OTA_RESPONSE;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	727b      	strb	r3, [r7, #9]
    response_packet.packet_num  = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	817b      	strh	r3, [r7, #10]
    response_packet.payload_len = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	81bb      	strh	r3, [r7, #12]
    response_packet.status      = status;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	73bb      	strb	r3, [r7, #14]
    response_packet.crc32       = 0;  // TBD: Implement CRC32
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	2300      	movs	r3, #0
 8000c42:	743b      	strb	r3, [r7, #16]
 8000c44:	2300      	movs	r3, #0
 8000c46:	747b      	strb	r3, [r7, #17]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	74bb      	strb	r3, [r7, #18]
    response_packet.eof         = PACKET_EOF;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	74fb      	strb	r3, [r7, #19]

    HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart5, (uint8_t*) &response_packet, sizeof(OtaResponsePacket), HAL_MAX_DELAY);
 8000c50:	f107 0108 	add.w	r1, r7, #8
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c58:	220c      	movs	r2, #12
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <sendOtaResponse+0x6c>)
 8000c5c:	f002 fd50 	bl	8003700 <HAL_UART_Transmit>
 8000c60:	4603      	mov	r3, r0
 8000c62:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8000c64:	7dfb      	ldrb	r3, [r7, #23]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <sendOtaResponse+0x60>
//		printf("Failed to send Ota response with status: %d!\n", status);
		return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c6e:	e000      	b.n	8000c72 <sendOtaResponse+0x62>
	}
	return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000a4 	.word	0x200000a4

08000c80 <processOtaPacket>:

static int processOtaPacket(uint8_t* buf, uint16_t size) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]
    OtaCommandPacket* packet = (OtaCommandPacket*) buf;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	617b      	str	r3, [r7, #20]

    // Check if we received a ABORT command
    if (packet->packet_type == OTA_COMMAND && packet->cmd == OTA_ABORT_CMD) {
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d108      	bne.n	8000caa <processOtaPacket+0x2a>
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	799b      	ldrb	r3, [r3, #6]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d104      	bne.n	8000caa <processOtaPacket+0x2a>
//        printf("Received OTA ABORT command!\n");
        ota_state = IDLE;
 8000ca0:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <processOtaPacket+0x120>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
        return 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e075      	b.n	8000d96 <processOtaPacket+0x116>
    }

    switch(ota_state) {
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <processOtaPacket+0x120>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d865      	bhi.n	8000d80 <processOtaPacket+0x100>
 8000cb4:	a201      	add	r2, pc, #4	; (adr r2, 8000cbc <processOtaPacket+0x3c>)
 8000cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cba:	bf00      	nop
 8000cbc:	08000ccd 	.word	0x08000ccd
 8000cc0:	08000ce7 	.word	0x08000ce7
 8000cc4:	08000d11 	.word	0x08000d11
 8000cc8:	08000d67 	.word	0x08000d67
        case START:
            if (packet->packet_type == OTA_COMMAND && packet->cmd == OTA_START_CMD) {
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	785b      	ldrb	r3, [r3, #1]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d157      	bne.n	8000d84 <processOtaPacket+0x104>
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	799b      	ldrb	r3, [r3, #6]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d153      	bne.n	8000d84 <processOtaPacket+0x104>
//                printf("Received OTA START command!\n");
                ota_state = HEADER;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <processOtaPacket+0x120>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	701a      	strb	r2, [r3, #0]
                return 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e057      	b.n	8000d96 <processOtaPacket+0x116>
            }
//            printf("Error: Expected OTA start command!\n");
            break;

        case HEADER:
            OtaHeaderPacket* header_packet = (OtaHeaderPacket*) buf;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60bb      	str	r3, [r7, #8]
            if (header_packet->packet_type == OTA_HEADER) {
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	785b      	ldrb	r3, [r3, #1]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d14a      	bne.n	8000d88 <processOtaPacket+0x108>
                fw_image_meta_data.file_size = header_packet->file_info.file_size;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8000cf8:	4a2a      	ldr	r2, [pc, #168]	; (8000da4 <processOtaPacket+0x124>)
 8000cfa:	6013      	str	r3, [r2, #0]
                fw_image_meta_data.crc32 = header_packet->file_info.crc32;
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000d02:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <processOtaPacket+0x124>)
 8000d04:	6053      	str	r3, [r2, #4]
                ota_state = DATA;
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <processOtaPacket+0x120>)
 8000d08:	2203      	movs	r2, #3
 8000d0a:	701a      	strb	r2, [r3, #0]
//                printf("Received OTA header! FW Size: %ld bytes\n", fw_image_meta_data.file_size);
                return 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e042      	b.n	8000d96 <processOtaPacket+0x116>
            }
//            printf("Error: Expected OTA header, received packet type: %d!\n", header_packet->packet_type);
            break;

        case DATA:
            OtaDataPacket* data_packet = (OtaDataPacket*) buf;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	613b      	str	r3, [r7, #16]
            if (data_packet->packet_type == OTA_DATA) {
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	785b      	ldrb	r3, [r3, #1]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d137      	bne.n	8000d8c <processOtaPacket+0x10c>
            	uint8_t* data = (uint8_t*) &(data_packet->payload);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	3306      	adds	r3, #6
 8000d20:	60fb      	str	r3, [r7, #12]
            	flashWrite(data, data_packet->payload_len, (ota_fw_received_size == 0));
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	889b      	ldrh	r3, [r3, #4]
 8000d26:	b299      	uxth	r1, r3
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <processOtaPacket+0x128>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf0c      	ite	eq
 8000d30:	2301      	moveq	r3, #1
 8000d32:	2300      	movne	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f000 f837 	bl	8000dac <flashWrite>
                ota_fw_received_size += data_packet->payload_len;
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	889b      	ldrh	r3, [r3, #4]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <processOtaPacket+0x128>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <processOtaPacket+0x128>)
 8000d4e:	6013      	str	r3, [r2, #0]
                if (ota_fw_received_size >= fw_image_meta_data.file_size) {
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <processOtaPacket+0x124>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <processOtaPacket+0x128>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d802      	bhi.n	8000d62 <processOtaPacket+0xe2>
                    ota_state = END;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <processOtaPacket+0x120>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	701a      	strb	r2, [r3, #0]
                }
                return 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e017      	b.n	8000d96 <processOtaPacket+0x116>
            }
//            printf("Error: Expected OTA data!\n");
            break;

        case END:
            if (packet->packet_type == OTA_COMMAND && packet->cmd == OTA_END_CMD) {
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d110      	bne.n	8000d90 <processOtaPacket+0x110>
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	799b      	ldrb	r3, [r3, #6]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d10c      	bne.n	8000d90 <processOtaPacket+0x110>
//                printf("Received OTA END command!\n");
                // TODO: Verify full package CRC
                ota_state = IDLE;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <processOtaPacket+0x120>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
                return 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e00a      	b.n	8000d96 <processOtaPacket+0x116>
            }
//            printf("Error: Expected OTA end command!\n");
            break;

        default:
            break;
 8000d80:	bf00      	nop
 8000d82:	e006      	b.n	8000d92 <processOtaPacket+0x112>
            break;
 8000d84:	bf00      	nop
 8000d86:	e004      	b.n	8000d92 <processOtaPacket+0x112>
            break;
 8000d88:	bf00      	nop
 8000d8a:	e002      	b.n	8000d92 <processOtaPacket+0x112>
            break;
 8000d8c:	bf00      	nop
 8000d8e:	e000      	b.n	8000d92 <processOtaPacket+0x112>
            break;
 8000d90:	bf00      	nop
    }

    // TODO: Add CRC verification

    // if we didn't return early, then we have an error
    return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200008f7 	.word	0x200008f7
 8000da4:	200008f8 	.word	0x200008f8
 8000da8:	20000900 	.word	0x20000900

08000dac <flashWrite>:


static int flashWrite(uint8_t* data, uint16_t data_len, bool first_write) {
 8000dac:	b5b0      	push	{r4, r5, r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret = HAL_FLASH_Unlock();
 8000dbc:	f000 fc48 	bl	8001650 <HAL_FLASH_Unlock>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret != HAL_OK) {
 8000dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <flashWrite+0x2e>
		printf("Failed to unlock flash!\n");
 8000dce:	4839      	ldr	r0, [pc, #228]	; (8000eb4 <flashWrite+0x108>)
 8000dd0:	f003 fa10 	bl	80041f4 <puts>
		return -1;
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd8:	e068      	b.n	8000eac <flashWrite+0x100>
	}

	// Erase flash once
	if (first_write) {
 8000dda:	787b      	ldrb	r3, [r7, #1]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d028      	beq.n	8000e32 <flashWrite+0x86>
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t sector_error;

		EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.Sector        = FLASH_SECTOR_2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
		EraseInitStruct.NbSectors     = 6;                    //erase 6 sectors (2, 3, 4, 5, 6, 7)
 8000de8:	2306      	movs	r3, #6
 8000dea:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]

		printf("Erasing flash memory sectors %ld - %ld", EraseInitStruct.Sector, EraseInitStruct.Sector + EraseInitStruct.NbSectors - 1);
 8000df0:	6979      	ldr	r1, [r7, #20]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	4413      	add	r3, r2
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	482e      	ldr	r0, [pc, #184]	; (8000eb8 <flashWrite+0x10c>)
 8000dfe:	f003 f993 	bl	8004128 <iprintf>
		ret = HAL_FLASHEx_Erase( &EraseInitStruct, &sector_error );
 8000e02:	f107 0208 	add.w	r2, r7, #8
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fd91 	bl	8001934 <HAL_FLASHEx_Erase>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if( ret != HAL_OK ) {
 8000e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <flashWrite+0x80>
			printf("Failed to erase flash!\n");
 8000e20:	4826      	ldr	r0, [pc, #152]	; (8000ebc <flashWrite+0x110>)
 8000e22:	f003 f9e7 	bl	80041f4 <puts>
			return -1;  // TODO: return HAL_FLASH_GetError()
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e2a:	e03f      	b.n	8000eac <flashWrite+0x100>
		}
		printf("Erased flash successfully!\n");
 8000e2c:	4824      	ldr	r0, [pc, #144]	; (8000ec0 <flashWrite+0x114>)
 8000e2e:	f003 f9e1 	bl	80041f4 <puts>
	}

	// Write to flash
	for (int i = 0; i < data_len; i++) {
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
 8000e36:	e025      	b.n	8000e84 <flashWrite+0xd8>
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, APP_FLASH_ADDR + ota_fw_received_size + i, data[i]);
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <flashWrite+0x118>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	4413      	add	r3, r2
 8000e40:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000e44:	f501 4140 	add.w	r1, r1, #49152	; 0xc000
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2200      	movs	r2, #0
 8000e54:	461c      	mov	r4, r3
 8000e56:	4615      	mov	r5, r2
 8000e58:	4622      	mov	r2, r4
 8000e5a:	462b      	mov	r3, r5
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 fba3 	bl	80015a8 <HAL_FLASH_Program>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != HAL_OK) {
 8000e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <flashWrite+0xd2>
			printf("Flash program failed! only %d bytes written to flash!\n", i);
 8000e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e72:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <flashWrite+0x11c>)
 8000e74:	f003 f958 	bl	8004128 <iprintf>
			return -1;
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7c:	e016      	b.n	8000eac <flashWrite+0x100>
	for (int i = 0; i < data_len; i++) {
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	3301      	adds	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbd5      	blt.n	8000e38 <flashWrite+0x8c>
		}
	}

    ret = HAL_FLASH_Lock();
 8000e8c:	f000 fc02 	bl	8001694 <HAL_FLASH_Lock>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( ret != HAL_OK ) {
 8000e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <flashWrite+0xfe>
    	printf("Failed to lock flash!\n");
 8000e9e:	480b      	ldr	r0, [pc, #44]	; (8000ecc <flashWrite+0x120>)
 8000ea0:	f003 f9a8 	bl	80041f4 <puts>
    	return -1;
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea8:	e000      	b.n	8000eac <flashWrite+0x100>
    }

    return 0;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb4:	08004fbc 	.word	0x08004fbc
 8000eb8:	08004fd4 	.word	0x08004fd4
 8000ebc:	08004ffc 	.word	0x08004ffc
 8000ec0:	08005014 	.word	0x08005014
 8000ec4:	20000900 	.word	0x20000900
 8000ec8:	08005030 	.word	0x08005030
 8000ecc:	08005068 	.word	0x08005068

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x4c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f0e:	2007      	movs	r0, #7
 8000f10:	f000 fb12 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800

08000f20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b09a      	sub	sp, #104	; 0x68
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	225c      	movs	r2, #92	; 0x5c
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 f967 	bl	8004204 <memset>
  if(hrtc->Instance==RTC)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <HAL_RTC_MspInit+0x4c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d111      	bne.n	8000f64 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f40:	2320      	movs	r3, #32
 8000f42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f8da 	bl	8002108 <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000f5a:	f7ff fda1 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_RTC_MspInit+0x50>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3768      	adds	r7, #104	; 0x68
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40002800 	.word	0x40002800
 8000f70:	42470e3c 	.word	0x42470e3c

08000f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a28      	ldr	r2, [pc, #160]	; (8001034 <HAL_UART_MspInit+0xc0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d14a      	bne.n	800102c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_UART_MspInit+0xc4>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a26      	ldr	r2, [pc, #152]	; (8001038 <HAL_UART_MspInit+0xc4>)
 8000fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_UART_MspInit+0xc4>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <HAL_UART_MspInit+0xc4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <HAL_UART_MspInit+0xc4>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_UART_MspInit+0xc4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_UART_MspInit+0xc4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <HAL_UART_MspInit+0xc4>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_UART_MspInit+0xc4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <HAL_UART_MspInit+0xc8>)
 8001008:	f000 fdb6 	bl	8001b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800100c:	2304      	movs	r3, #4
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800101c:	2308      	movs	r3, #8
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <HAL_UART_MspInit+0xcc>)
 8001028:	f000 fda6 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40005000 	.word	0x40005000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f96a 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e00a      	b.n	80010c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010aa:	f3af 8000 	nop.w
 80010ae:	4601      	mov	r1, r0
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	b2ca      	uxtb	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbf0      	blt.n	80010aa <_read+0x12>
  }

  return len;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e009      	b.n	80010f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf1      	blt.n	80010e4 <_write+0x12>
  }
  return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_close>:

int _close(int file)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001132:	605a      	str	r2, [r3, #4]
  return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_isatty>:

int _isatty(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f003 f836 	bl	8004214 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20020000 	.word	0x20020000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	20000904 	.word	0x20000904
 80011dc:	20000a78 	.word	0x20000a78

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001208:	f7ff ffea 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001232:	f002 fff5 	bl	8004220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001236:	f7ff f9c1 	bl	80005bc <main>
  bx  lr    
 800123a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800123c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001248:	080050dc 	.word	0x080050dc
  ldr r2, =_sbss
 800124c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001250:	20000a78 	.word	0x20000a78

08001254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_Init+0x40>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_Init+0x40>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_Init+0x40>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f959 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f83e 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fe20 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00

0800129c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_DeInit+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <HAL_DeInit+0x50>)
 80012a4:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_DeInit+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_DeInit+0x4c>)
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_DeInit+0x54>)
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_DeInit+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_DeInit+0x4c>)
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_DeInit+0x58>)
 80012bc:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_DeInit+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_DeInit+0x4c>)
 80012c6:	2281      	movs	r2, #129	; 0x81
 80012c8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_DeInit+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_DeInit+0x4c>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <HAL_DeInit+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80012dc:	f000 f80c 	bl	80012f8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	3fffc9ff 	.word	0x3fffc9ff
 80012f0:	00c77933 	.word	0x00c77933
 80012f4:	206010ff 	.word	0x206010ff

080012f8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f931 	bl	800158e <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001344:	f000 f903 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_InitTick+0x5c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000000 	.word	0x20000000
 8001360:	20000008 	.word	0x20000008
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008
 800138c:	20000908 	.word	0x20000908

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000908 	.word	0x20000908

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80014cc:	f3bf 8f4f 	dsb	sy
}
 80014d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <__NVIC_SystemReset+0x24>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014da:	4904      	ldr	r1, [pc, #16]	; (80014ec <__NVIC_SystemReset+0x24>)
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <__NVIC_SystemReset+0x28>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e2:	f3bf 8f4f 	dsb	sy
}
 80014e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <__NVIC_SystemReset+0x20>
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	05fa0004 	.word	0x05fa0004

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001518:	f7ff ff78 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff31 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff46 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff78 	bl	8001460 <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff47 	bl	800140c <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800158a:	f7ff ff9d 	bl	80014c8 <__NVIC_SystemReset>

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffac 	bl	80014f4 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_FLASH_Program+0xa0>)
 80015bc:	7e1b      	ldrb	r3, [r3, #24]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_FLASH_Program+0x1e>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e03b      	b.n	800163e <HAL_FLASH_Program+0x96>
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_FLASH_Program+0xa0>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015d0:	f000 f870 	bl	80016b4 <FLASH_WaitForLastOperation>
 80015d4:	4603      	mov	r3, r0
 80015d6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d12b      	bne.n	8001636 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80015e4:	783b      	ldrb	r3, [r7, #0]
 80015e6:	4619      	mov	r1, r3
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f000 f91b 	bl	8001824 <FLASH_Program_Byte>
 80015ee:	e016      	b.n	800161e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d105      	bne.n	8001602 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80015f6:	883b      	ldrh	r3, [r7, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	68b8      	ldr	r0, [r7, #8]
 80015fc:	f000 f8ee 	bl	80017dc <FLASH_Program_HalfWord>
 8001600:	e00d      	b.n	800161e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d105      	bne.n	8001614 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 f8c3 	bl	8001798 <FLASH_Program_Word>
 8001612:	e004      	b.n	800161e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001618:	68b8      	ldr	r0, [r7, #8]
 800161a:	f000 f88b 	bl	8001734 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800161e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001622:	f000 f847 	bl	80016b4 <FLASH_WaitForLastOperation>
 8001626:	4603      	mov	r3, r0
 8001628:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_FLASH_Program+0xa4>)
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_FLASH_Program+0xa4>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <HAL_FLASH_Program+0xa0>)
 8001638:	2200      	movs	r2, #0
 800163a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000090c 	.word	0x2000090c
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_FLASH_Unlock+0x38>)
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	da0b      	bge.n	800167a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_FLASH_Unlock+0x38>)
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_FLASH_Unlock+0x3c>)
 8001666:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_FLASH_Unlock+0x38>)
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <HAL_FLASH_Unlock+0x40>)
 800166c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_FLASH_Unlock+0x38>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	da01      	bge.n	800167a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800167a:	79fb      	ldrb	r3, [r7, #7]
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40023c00 	.word	0x40023c00
 800168c:	45670123 	.word	0x45670123
 8001690:	cdef89ab 	.word	0xcdef89ab

08001694 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_FLASH_Lock+0x1c>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_FLASH_Lock+0x1c>)
 800169e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016a2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <FLASH_WaitForLastOperation+0x78>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80016c6:	f7ff fe63 	bl	8001390 <HAL_GetTick>
 80016ca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80016cc:	e010      	b.n	80016f0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d4:	d00c      	beq.n	80016f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d007      	beq.n	80016ec <FLASH_WaitForLastOperation+0x38>
 80016dc:	f7ff fe58 	bl	8001390 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d201      	bcs.n	80016f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e019      	b.n	8001724 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <FLASH_WaitForLastOperation+0x7c>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1e8      	bne.n	80016ce <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <FLASH_WaitForLastOperation+0x7c>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <FLASH_WaitForLastOperation+0x7c>)
 800170a:	2201      	movs	r2, #1
 800170c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <FLASH_WaitForLastOperation+0x7c>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800171a:	f000 f8a5 	bl	8001868 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
  
}  
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000090c 	.word	0x2000090c
 8001730:	40023c00 	.word	0x40023c00

08001734 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <FLASH_Program_DoubleWord+0x60>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a13      	ldr	r2, [pc, #76]	; (8001794 <FLASH_Program_DoubleWord+0x60>)
 8001746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800174a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <FLASH_Program_DoubleWord+0x60>)
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	4a10      	ldr	r2, [pc, #64]	; (8001794 <FLASH_Program_DoubleWord+0x60>)
 8001752:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001756:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <FLASH_Program_DoubleWord+0x60>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <FLASH_Program_DoubleWord+0x60>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800176a:	f3bf 8f6f 	isb	sy
}
 800176e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	000a      	movs	r2, r1
 800177e:	2300      	movs	r3, #0
 8001780:	68f9      	ldr	r1, [r7, #12]
 8001782:	3104      	adds	r1, #4
 8001784:	4613      	mov	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40023c00 	.word	0x40023c00

08001798 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <FLASH_Program_Word+0x40>)
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <FLASH_Program_Word+0x40>)
 80017a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <FLASH_Program_Word+0x40>)
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <FLASH_Program_Word+0x40>)
 80017b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <FLASH_Program_Word+0x40>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <FLASH_Program_Word+0x40>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	601a      	str	r2, [r3, #0]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40023c00 	.word	0x40023c00

080017dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <FLASH_Program_HalfWord+0x44>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <FLASH_Program_HalfWord+0x44>)
 80017ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <FLASH_Program_HalfWord+0x44>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4a09      	ldr	r2, [pc, #36]	; (8001820 <FLASH_Program_HalfWord+0x44>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <FLASH_Program_HalfWord+0x44>)
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <FLASH_Program_HalfWord+0x44>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	801a      	strh	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00

08001824 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <FLASH_Program_Byte+0x40>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <FLASH_Program_Byte+0x40>)
 8001836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800183a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <FLASH_Program_Byte+0x40>)
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <FLASH_Program_Byte+0x40>)
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <FLASH_Program_Byte+0x40>)
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <FLASH_Program_Byte+0x40>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	701a      	strb	r2, [r3, #0]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800186c:	4b2f      	ldr	r3, [pc, #188]	; (800192c <FLASH_SetErrorCode+0xc4>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 8001882:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <FLASH_SetErrorCode+0xc4>)
 8001886:	2210      	movs	r2, #16
 8001888:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <FLASH_SetErrorCode+0xc4>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	4a24      	ldr	r2, [pc, #144]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 80018a0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <FLASH_SetErrorCode+0xc4>)
 80018a4:	2220      	movs	r2, #32
 80018a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <FLASH_SetErrorCode+0xc4>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 80018be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <FLASH_SetErrorCode+0xc4>)
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <FLASH_SetErrorCode+0xc4>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 80018dc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <FLASH_SetErrorCode+0xc4>)
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <FLASH_SetErrorCode+0xc4>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 80018fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <FLASH_SetErrorCode+0xc4>)
 80018fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001902:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <FLASH_SetErrorCode+0xc4>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <FLASH_SetErrorCode+0xc8>)
 800191a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <FLASH_SetErrorCode+0xc4>)
 800191e:	2202      	movs	r2, #2
 8001920:	60da      	str	r2, [r3, #12]
  }
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40023c00 	.word	0x40023c00
 8001930:	2000090c 	.word	0x2000090c

08001934 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_FLASHEx_Erase+0xd8>)
 8001948:	7e1b      	ldrb	r3, [r3, #24]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_FLASHEx_Erase+0x1e>
 800194e:	2302      	movs	r3, #2
 8001950:	e058      	b.n	8001a04 <HAL_FLASHEx_Erase+0xd0>
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_FLASHEx_Erase+0xd8>)
 8001954:	2201      	movs	r2, #1
 8001956:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001958:	f24c 3050 	movw	r0, #50000	; 0xc350
 800195c:	f7ff feaa 	bl	80016b4 <FLASH_WaitForLastOperation>
 8001960:	4603      	mov	r3, r0
 8001962:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d148      	bne.n	80019fc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001970:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d115      	bne.n	80019a6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f000 f844 	bl	8001a14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800198c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001990:	f7ff fe90 	bl	80016b4 <FLASH_WaitForLastOperation>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_FLASHEx_Erase+0xdc>)
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <HAL_FLASHEx_Erase+0xdc>)
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	6113      	str	r3, [r2, #16]
 80019a4:	e028      	b.n	80019f8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	e01c      	b.n	80019e8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4619      	mov	r1, r3
 80019b6:	68b8      	ldr	r0, [r7, #8]
 80019b8:	f000 f850 	bl	8001a5c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019c0:	f7ff fe78 	bl	80016b4 <FLASH_WaitForLastOperation>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_FLASHEx_Erase+0xdc>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_FLASHEx_Erase+0xdc>)
 80019ce:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80019d2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	601a      	str	r2, [r3, #0]
          break;
 80019e0:	e00a      	b.n	80019f8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4413      	add	r3, r2
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3da      	bcc.n	80019ae <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80019f8:	f000 f878 	bl	8001aec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_FLASHEx_Erase+0xd8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	761a      	strb	r2, [r3, #24]

  return status;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000090c 	.word	0x2000090c
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <FLASH_MassErase+0x44>)
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <FLASH_MassErase+0x44>)
 8001a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <FLASH_MassErase+0x44>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <FLASH_MassErase+0x44>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <FLASH_MassErase+0x44>)
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	4313      	orrs	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <FLASH_MassErase+0x44>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6113      	str	r3, [r2, #16]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e010      	b.n	8001a9a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d103      	bne.n	8001a86 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e009      	b.n	8001a9a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d103      	bne.n	8001a94 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	e002      	b.n	8001a9a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001a94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	490f      	ldr	r1, [pc, #60]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001ab8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001abc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <FLASH_Erase_Sector+0x8c>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6113      	str	r3, [r2, #16]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001af0:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d017      	beq.n	8001b2c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1c      	ldr	r2, [pc, #112]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b1e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d017      	beq.n	8001b68 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b42:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b5a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <FLASH_FlushCaches+0x88>)
 8001b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b66:	6013      	str	r3, [r2, #0]
  }
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e165      	b.n	8001e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 8154 	bne.w	8001e5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d005      	beq.n	8001bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d130      	bne.n	8001c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0201 	and.w	r2, r3, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d017      	beq.n	8001c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d123      	bne.n	8001cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80ae 	beq.w	8001e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <HAL_GPIO_Init+0x300>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <HAL_GPIO_Init+0x300>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <HAL_GPIO_Init+0x300>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1a:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <HAL_GPIO_Init+0x308>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d025      	beq.n	8001d92 <HAL_GPIO_Init+0x21a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4e      	ldr	r2, [pc, #312]	; (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_Init+0x216>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <HAL_GPIO_Init+0x310>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x314>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_Init+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_GPIO_Init+0x318>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_Init+0x20a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_GPIO_Init+0x31c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_Init+0x206>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a49      	ldr	r2, [pc, #292]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_Init+0x202>
 8001d76:	2306      	movs	r3, #6
 8001d78:	e00c      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00a      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d7e:	2305      	movs	r3, #5
 8001d80:	e008      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d86:	2303      	movs	r3, #3
 8001d88:	e004      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d92:	2300      	movs	r3, #0
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	f002 0203 	and.w	r2, r2, #3
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da4:	4935      	ldr	r1, [pc, #212]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd6:	4a31      	ldr	r2, [pc, #196]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e00:	4a26      	ldr	r2, [pc, #152]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	f67f ae96 	bls.w	8001b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40013800 	.word	0x40013800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40021400 	.word	0x40021400
 8001e98:	40021800 	.word	0x40021800
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
 8001eac:	4613      	mov	r3, r2
 8001eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb0:	787b      	ldrb	r3, [r7, #1]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ebc:	e003      	b.n	8001ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	041a      	lsls	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	619a      	str	r2, [r3, #24]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0cc      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d90c      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f28:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	494d      	ldr	r1, [pc, #308]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d044      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d119      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e067      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4934      	ldr	r1, [pc, #208]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff f9e4 	bl	8001390 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7ff f9e0 	bl	8001390 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e04f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d20c      	bcs.n	800201c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e032      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4916      	ldr	r1, [pc, #88]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490e      	ldr	r1, [pc, #56]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800205a:	f000 fb7f 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800205e:	4602      	mov	r2, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	490a      	ldr	r1, [pc, #40]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	5ccb      	ldrb	r3, [r1, r3]
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f944 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00
 8002090:	40023800 	.word	0x40023800
 8002094:	08005080 	.word	0x08005080
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4903      	ldr	r1, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	08005090 	.word	0x08005090

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffdc 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0b5b      	lsrs	r3, r3, #13
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4903      	ldr	r1, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5ccb      	ldrb	r3, [r1, r3]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	08005090 	.word	0x08005090

08002108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d010      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002140:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002146:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	496c      	ldr	r1, [pc, #432]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800215e:	2301      	movs	r3, #1
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800216e:	4b64      	ldr	r3, [pc, #400]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002174:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	4960      	ldr	r1, [pc, #384]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800218c:	2301      	movs	r3, #1
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d017      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800219c:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800219e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4955      	ldr	r1, [pc, #340]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ba:	d101      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80021bc:	2301      	movs	r3, #1
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80021c8:	2301      	movs	r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d017      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021d8:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	4946      	ldr	r1, [pc, #280]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f6:	d101      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002204:	2301      	movs	r3, #1
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 808a 	beq.w	800232a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a38      	ldr	r2, [pc, #224]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002232:	4b34      	ldr	r3, [pc, #208]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a33      	ldr	r2, [pc, #204]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800223e:	f7ff f8a7 	bl	8001390 <HAL_GetTick>
 8002242:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7ff f8a3 	bl	8001390 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e278      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002264:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02f      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	429a      	cmp	r2, r3
 8002280:	d028      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002282:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d114      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022aa:	f7ff f871 	bl	8001390 <HAL_GetTick>
 80022ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7ff f86d 	bl	8001390 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e240      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ee      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022e0:	d114      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x204>
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f6:	4902      	ldr	r1, [pc, #8]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
 80022fc:	e00c      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40007000 	.word	0x40007000
 8002308:	42470e40 	.word	0x42470e40
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a49      	ldr	r2, [pc, #292]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002312:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002316:	6093      	str	r3, [r2, #8]
 8002318:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800231a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	4944      	ldr	r1, [pc, #272]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002326:	4313      	orrs	r3, r2
 8002328:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800233c:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800233e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800234c:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	4937      	ldr	r1, [pc, #220]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800236e:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002374:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	492e      	ldr	r1, [pc, #184]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d011      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002396:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	4926      	ldr	r1, [pc, #152]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ae:	d101      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	491a      	ldr	r1, [pc, #104]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d011      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f0:	4911      	ldr	r1, [pc, #68]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002400:	d101      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002402:	2301      	movs	r3, #1
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d005      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002414:	f040 80ff 	bne.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800241e:	f7fe ffb7 	bl	8001390 <HAL_GetTick>
 8002422:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002424:	e00e      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002426:	f7fe ffb3 	bl	8001390 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d907      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e188      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002438:	40023800 	.word	0x40023800
 800243c:	424711e0 	.word	0x424711e0
 8002440:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002444:	4b7e      	ldr	r3, [pc, #504]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ea      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800246c:	2b00      	cmp	r3, #0
 800246e:	d028      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d124      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002478:	4b71      	ldr	r3, [pc, #452]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247e:	0c1b      	lsrs	r3, r3, #16
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	3301      	adds	r3, #1
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800248c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002490:	0e1b      	lsrs	r3, r3, #24
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	431a      	orrs	r2, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	3b01      	subs	r3, #1
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	431a      	orrs	r2, r3
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	071b      	lsls	r3, r3, #28
 80024ba:	4961      	ldr	r1, [pc, #388]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d035      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ec:	d130      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80024ee:	4b54      	ldr	r3, [pc, #336]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	3301      	adds	r3, #1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002500:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002506:	0f1b      	lsrs	r3, r3, #28
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	019b      	lsls	r3, r3, #6
 8002518:	431a      	orrs	r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	3b01      	subs	r3, #1
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	431a      	orrs	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	071b      	lsls	r3, r3, #28
 8002530:	4943      	ldr	r1, [pc, #268]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800253a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800253e:	f023 021f 	bic.w	r2, r3, #31
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	493d      	ldr	r1, [pc, #244]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d029      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002564:	d124      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002566:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800257a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257e:	0f1b      	lsrs	r3, r3, #28
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	019b      	lsls	r3, r3, #6
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	3b01      	subs	r3, #1
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	431a      	orrs	r2, r3
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	431a      	orrs	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	071b      	lsls	r3, r3, #28
 80025a8:	4925      	ldr	r1, [pc, #148]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d016      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	071b      	lsls	r3, r3, #28
 80025e2:	4917      	ldr	r1, [pc, #92]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fe fece 	bl	8001390 <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025f8:	f7fe feca 	bl	8001390 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e09f      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	2b01      	cmp	r3, #1
 800261a:	f040 8095 	bne.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002624:	f7fe feb4 	bl	8001390 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800262a:	e00f      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800262c:	f7fe feb0 	bl	8001390 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d908      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e085      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	42470068 	.word	0x42470068
 8002648:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800264c:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002658:	d0e8      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002676:	2b00      	cmp	r3, #0
 8002678:	d02b      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	2b00      	cmp	r3, #0
 8002680:	d127      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	431a      	orrs	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	4928      	ldr	r1, [pc, #160]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	3b01      	subs	r3, #1
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	4922      	ldr	r1, [pc, #136]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01d      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e6:	d118      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	0e1b      	lsrs	r3, r3, #24
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	019b      	lsls	r3, r3, #6
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	4910      	ldr	r1, [pc, #64]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fe36 	bl	8001390 <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002728:	f7fe fe32 	bl	8001390 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e007      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002746:	d1ef      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3730      	adds	r7, #48	; 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	42470070 	.word	0x42470070

0800275c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002760:	b0a6      	sub	sp, #152	; 0x98
 8002762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002782:	4bc8      	ldr	r3, [pc, #800]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b0c      	cmp	r3, #12
 800278c:	f200 817e 	bhi.w	8002a8c <HAL_RCC_GetSysClockFreq+0x330>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027cd 	.word	0x080027cd
 800279c:	08002a8d 	.word	0x08002a8d
 80027a0:	08002a8d 	.word	0x08002a8d
 80027a4:	08002a8d 	.word	0x08002a8d
 80027a8:	080027d5 	.word	0x080027d5
 80027ac:	08002a8d 	.word	0x08002a8d
 80027b0:	08002a8d 	.word	0x08002a8d
 80027b4:	08002a8d 	.word	0x08002a8d
 80027b8:	080027dd 	.word	0x080027dd
 80027bc:	08002a8d 	.word	0x08002a8d
 80027c0:	08002a8d 	.word	0x08002a8d
 80027c4:	08002a8d 	.word	0x08002a8d
 80027c8:	08002947 	.word	0x08002947
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027cc:	4bb6      	ldr	r3, [pc, #728]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80027ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80027d2:	e15f      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4bb5      	ldr	r3, [pc, #724]	; (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 80027d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80027da:	e15b      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027dc:	4bb1      	ldr	r3, [pc, #708]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e8:	4bae      	ldr	r3, [pc, #696]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d031      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f4:	4bab      	ldr	r3, [pc, #684]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	2200      	movs	r2, #0
 80027fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80027fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	663b      	str	r3, [r7, #96]	; 0x60
 8002808:	2300      	movs	r3, #0
 800280a:	667b      	str	r3, [r7, #100]	; 0x64
 800280c:	4ba7      	ldr	r3, [pc, #668]	; (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 800280e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002812:	462a      	mov	r2, r5
 8002814:	fb03 f202 	mul.w	r2, r3, r2
 8002818:	2300      	movs	r3, #0
 800281a:	4621      	mov	r1, r4
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	4aa2      	ldr	r2, [pc, #648]	; (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 8002824:	4621      	mov	r1, r4
 8002826:	fba1 1202 	umull	r1, r2, r1, r2
 800282a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800282c:	460a      	mov	r2, r1
 800282e:	67ba      	str	r2, [r7, #120]	; 0x78
 8002830:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002832:	4413      	add	r3, r2
 8002834:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800283a:	2200      	movs	r2, #0
 800283c:	65bb      	str	r3, [r7, #88]	; 0x58
 800283e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002840:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002844:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002848:	f7fd fd3a 	bl	80002c0 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4613      	mov	r3, r2
 8002852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002856:	e064      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	2200      	movs	r2, #0
 8002860:	653b      	str	r3, [r7, #80]	; 0x50
 8002862:	657a      	str	r2, [r7, #84]	; 0x54
 8002864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286a:	64bb      	str	r3, [r7, #72]	; 0x48
 800286c:	2300      	movs	r3, #0
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002870:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002874:	4622      	mov	r2, r4
 8002876:	462b      	mov	r3, r5
 8002878:	f04f 0000 	mov.w	r0, #0
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	0159      	lsls	r1, r3, #5
 8002882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002886:	0150      	lsls	r0, r2, #5
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4621      	mov	r1, r4
 800288e:	1a51      	subs	r1, r2, r1
 8002890:	6139      	str	r1, [r7, #16]
 8002892:	4629      	mov	r1, r5
 8002894:	eb63 0301 	sbc.w	r3, r3, r1
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028a6:	4659      	mov	r1, fp
 80028a8:	018b      	lsls	r3, r1, #6
 80028aa:	4651      	mov	r1, sl
 80028ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028b0:	4651      	mov	r1, sl
 80028b2:	018a      	lsls	r2, r1, #6
 80028b4:	4651      	mov	r1, sl
 80028b6:	ebb2 0801 	subs.w	r8, r2, r1
 80028ba:	4659      	mov	r1, fp
 80028bc:	eb63 0901 	sbc.w	r9, r3, r1
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d4:	4690      	mov	r8, r2
 80028d6:	4699      	mov	r9, r3
 80028d8:	4623      	mov	r3, r4
 80028da:	eb18 0303 	adds.w	r3, r8, r3
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	462b      	mov	r3, r5
 80028e2:	eb49 0303 	adc.w	r3, r9, r3
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028f4:	4629      	mov	r1, r5
 80028f6:	028b      	lsls	r3, r1, #10
 80028f8:	4621      	mov	r1, r4
 80028fa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028fe:	4621      	mov	r1, r4
 8002900:	028a      	lsls	r2, r1, #10
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290a:	2200      	movs	r2, #0
 800290c:	643b      	str	r3, [r7, #64]	; 0x40
 800290e:	647a      	str	r2, [r7, #68]	; 0x44
 8002910:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002914:	f7fd fcd4 	bl	80002c0 <__aeabi_uldivmod>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4613      	mov	r3, r2
 800291e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002922:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	3301      	adds	r3, #1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002934:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002944:	e0a6      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002946:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800294e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d02a      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	2200      	movs	r2, #0
 8002966:	63bb      	str	r3, [r7, #56]	; 0x38
 8002968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002970:	2100      	movs	r1, #0
 8002972:	4b4e      	ldr	r3, [pc, #312]	; (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 8002974:	fb03 f201 	mul.w	r2, r3, r1
 8002978:	2300      	movs	r3, #0
 800297a:	fb00 f303 	mul.w	r3, r0, r3
 800297e:	4413      	add	r3, r2
 8002980:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 8002982:	fba0 1202 	umull	r1, r2, r0, r2
 8002986:	677a      	str	r2, [r7, #116]	; 0x74
 8002988:	460a      	mov	r2, r1
 800298a:	673a      	str	r2, [r7, #112]	; 0x70
 800298c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800298e:	4413      	add	r3, r2
 8002990:	677b      	str	r3, [r7, #116]	; 0x74
 8002992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002996:	2200      	movs	r2, #0
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
 800299a:	637a      	str	r2, [r7, #52]	; 0x34
 800299c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80029a4:	f7fd fc8c 	bl	80002c0 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4613      	mov	r3, r2
 80029ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029b2:	e05b      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b4:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	2200      	movs	r2, #0
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
 80029cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	0159      	lsls	r1, r3, #5
 80029de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e2:	0150      	lsls	r0, r2, #5
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4641      	mov	r1, r8
 80029ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ee:	4649      	mov	r1, r9
 80029f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a08:	ebb2 040a 	subs.w	r4, r2, sl
 8002a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	00eb      	lsls	r3, r5, #3
 8002a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1e:	00e2      	lsls	r2, r4, #3
 8002a20:	4614      	mov	r4, r2
 8002a22:	461d      	mov	r5, r3
 8002a24:	4643      	mov	r3, r8
 8002a26:	18e3      	adds	r3, r4, r3
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	eb45 0303 	adc.w	r3, r5, r3
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a3e:	4629      	mov	r1, r5
 8002a40:	028b      	lsls	r3, r1, #10
 8002a42:	4621      	mov	r1, r4
 8002a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a48:	4621      	mov	r1, r4
 8002a4a:	028a      	lsls	r2, r1, #10
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a54:	2200      	movs	r2, #0
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	61fa      	str	r2, [r7, #28]
 8002a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5e:	f7fd fc2f 	bl	80002c0 <__aeabi_uldivmod>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4613      	mov	r3, r2
 8002a68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0f1b      	lsrs	r3, r3, #28
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002a7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a8a:	e003      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3798      	adds	r7, #152	; 0x98
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	017d7840 	.word	0x017d7840

08002ab0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ab6:	f7fe fc6b 	bl	8001390 <HAL_GetTick>
 8002aba:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002abc:	4b72      	ldr	r3, [pc, #456]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a71      	ldr	r2, [pc, #452]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aca:	f7fe fc61 	bl	8001390 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0d0      	b.n	8002c7e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002adc:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002ae8:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a66      	ldr	r2, [pc, #408]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002af4:	f7fe fc4c 	bl	8001390 <HAL_GetTick>
 8002af8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b02:	f7fe fc45 	bl	8001390 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0b2      	b.n	8002c7e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002b18:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ee      	bne.n	8002b02 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b24:	f7fe fc34 	bl	8001390 <HAL_GetTick>
 8002b28:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002b2a:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a56      	ldr	r2, [pc, #344]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002b30:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002b34:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fc2a 	bl	8001390 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e099      	b.n	8002c7e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002b4a:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b56:	f7fe fc1b 	bl	8001390 <HAL_GetTick>
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b5c:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a49      	ldr	r2, [pc, #292]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b66:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fc11 	bl	8001390 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e080      	b.n	8002c7e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002b7c:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b88:	f7fe fc02 	bl	8001390 <HAL_GetTick>
 8002b8c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002b8e:	4b3e      	ldr	r3, [pc, #248]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3d      	ldr	r2, [pc, #244]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002b94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b98:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b9c:	f7fe fbf8 	bl	8001390 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e067      	b.n	8002c7e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002bba:	f7fe fbe9 	bl	8001390 <HAL_GetTick>
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a30      	ldr	r2, [pc, #192]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bca:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bce:	f7fe fbdf 	bl	8001390 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e04e      	b.n	8002c7e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002be0:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f0      	bne.n	8002bce <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002bee:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_RCC_DeInit+0x1dc>)
 8002bf0:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002bf4:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <HAL_RCC_DeInit+0x1dc>)
 8002bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8002bfa:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <HAL_RCC_DeInit+0x1e0>)
 8002bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c08:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002c0c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	4a1a      	ldr	r2, [pc, #104]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c2c:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002c30:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <HAL_RCC_DeInit+0x1d8>)
 8002c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c60:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_RCC_DeInit+0x1e4>)
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_RCC_DeInit+0x1e8>)
 8002c66:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCC_DeInit+0x1ec>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe fb4b 	bl	8001308 <HAL_InitTick>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	24003010 	.word	0x24003010
 8002c90:	04003010 	.word	0x04003010
 8002c94:	20000000 	.word	0x20000000
 8002c98:	00f42400 	.word	0x00f42400
 8002c9c:	20000004 	.word	0x20000004

08002ca0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e28d      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8083 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cc0:	4b94      	ldr	r3, [pc, #592]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d019      	beq.n	8002d00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ccc:	4b91      	ldr	r3, [pc, #580]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cd8:	4b8e      	ldr	r3, [pc, #568]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce4:	d00c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b8b      	ldr	r3, [pc, #556]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b84      	ldr	r3, [pc, #528]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x124>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e25a      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x90>
 8002d22:	4b7c      	ldr	r3, [pc, #496]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a7b      	ldr	r2, [pc, #492]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xcc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0xb4>
 8002d3a:	4b76      	ldr	r3, [pc, #472]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a75      	ldr	r2, [pc, #468]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a72      	ldr	r2, [pc, #456]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xcc>
 8002d54:	4b6f      	ldr	r3, [pc, #444]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a6e      	ldr	r2, [pc, #440]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b6c      	ldr	r3, [pc, #432]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a6b      	ldr	r2, [pc, #428]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fb0c 	bl	8001390 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fb08 	bl	8001390 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e21f      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xdc>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe faf8 	bl	8001390 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe faf4 	bl	8001390 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e20b      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	4b57      	ldr	r3, [pc, #348]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x104>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d06f      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dd2:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d017      	beq.n	8002e0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dde:	4b4d      	ldr	r3, [pc, #308]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d105      	bne.n	8002df6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dea:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d11c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	4b44      	ldr	r3, [pc, #272]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x186>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1d3      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4937      	ldr	r1, [pc, #220]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_RCC_OscConfig+0x278>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fe faa1 	bl	8001390 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fe fa9d 	bl	8001390 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1b4      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4925      	ldr	r1, [pc, #148]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCC_OscConfig+0x278>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fa80 	bl	8001390 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fe fa7c 	bl	8001390 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e193      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d036      	beq.n	8002f2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fa60 	bl	8001390 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fa5c 	bl	8001390 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e173      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x234>
 8002ef2:	e01b      	b.n	8002f2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fe fa49 	bl	8001390 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	e00e      	b.n	8002f20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f02:	f7fe fa45 	bl	8001390 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d907      	bls.n	8002f20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e15c      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
 8002f14:	40023800 	.word	0x40023800
 8002f18:	42470000 	.word	0x42470000
 8002f1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	4b8a      	ldr	r3, [pc, #552]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ea      	bne.n	8002f02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8097 	beq.w	8003068 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3e:	4b83      	ldr	r3, [pc, #524]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	4b7f      	ldr	r3, [pc, #508]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a7e      	ldr	r2, [pc, #504]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b7c      	ldr	r3, [pc, #496]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6a:	4b79      	ldr	r3, [pc, #484]	; (8003150 <HAL_RCC_OscConfig+0x4b0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f76:	4b76      	ldr	r3, [pc, #472]	; (8003150 <HAL_RCC_OscConfig+0x4b0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a75      	ldr	r2, [pc, #468]	; (8003150 <HAL_RCC_OscConfig+0x4b0>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fa05 	bl	8001390 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8a:	f7fe fa01 	bl	8001390 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e118      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	4b6c      	ldr	r3, [pc, #432]	; (8003150 <HAL_RCC_OscConfig+0x4b0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x31e>
 8002fb0:	4b66      	ldr	r3, [pc, #408]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a65      	ldr	r2, [pc, #404]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	e01c      	b.n	8002ff8 <HAL_RCC_OscConfig+0x358>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x340>
 8002fc6:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	4a60      	ldr	r2, [pc, #384]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	f043 0304 	orr.w	r3, r3, #4
 8002fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd2:	4b5e      	ldr	r3, [pc, #376]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a5d      	ldr	r2, [pc, #372]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_OscConfig+0x358>
 8002fe0:	4b5a      	ldr	r3, [pc, #360]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	4a59      	ldr	r2, [pc, #356]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	; 0x70
 8002fec:	4b57      	ldr	r3, [pc, #348]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8002ff2:	f023 0304 	bic.w	r3, r3, #4
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fe f9c6 	bl	8001390 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe f9c2 	bl	8001390 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0d7      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301e:	4b4b      	ldr	r3, [pc, #300]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ee      	beq.n	8003008 <HAL_RCC_OscConfig+0x368>
 800302a:	e014      	b.n	8003056 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe f9b0 	bl	8001390 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003032:	e00a      	b.n	800304a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003034:	f7fe f9ac 	bl	8001390 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0c1      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304a:	4b40      	ldr	r3, [pc, #256]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1ee      	bne.n	8003034 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d105      	bne.n	8003068 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305c:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	4a3a      	ldr	r2, [pc, #232]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8003062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003066:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80ad 	beq.w	80031cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003072:	4b36      	ldr	r3, [pc, #216]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b08      	cmp	r3, #8
 800307c:	d060      	beq.n	8003140 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d145      	bne.n	8003112 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003086:	4b33      	ldr	r3, [pc, #204]	; (8003154 <HAL_RCC_OscConfig+0x4b4>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe f980 	bl	8001390 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003094:	f7fe f97c 	bl	8001390 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e093      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	019b      	lsls	r3, r3, #6
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	3b01      	subs	r3, #1
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	071b      	lsls	r3, r3, #28
 80030de:	491b      	ldr	r1, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x4b4>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe f951 	bl	8001390 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe f94d 	bl	8001390 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e064      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x452>
 8003110:	e05c      	b.n	80031cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCC_OscConfig+0x4b4>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe f93a 	bl	8001390 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe f936 	bl	8001390 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e04d      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_OscConfig+0x4ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x480>
 800313e:	e045      	b.n	80031cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d107      	bne.n	8003158 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e040      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
 800314c:	40023800 	.word	0x40023800
 8003150:	40007000 	.word	0x40007000
 8003154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003158:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <HAL_RCC_OscConfig+0x538>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d030      	beq.n	80031c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d129      	bne.n	80031c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d122      	bne.n	80031c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800318e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003190:	4293      	cmp	r3, r2
 8003192:	d119      	bne.n	80031c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	3b01      	subs	r3, #1
 80031a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d10f      	bne.n	80031c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d107      	bne.n	80031c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e073      	b.n	80032da <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7f5b      	ldrb	r3, [r3, #29]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd fe8c 	bl	8000f20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b10      	cmp	r3, #16
 800321a:	d055      	beq.n	80032c8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	22ca      	movs	r2, #202	; 0xca
 8003222:	625a      	str	r2, [r3, #36]	; 0x24
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2253      	movs	r2, #83	; 0x53
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f99d 	bl	800356c <RTC_EnterInitMode>
 8003232:	4603      	mov	r3, r0
 8003234:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d12c      	bne.n	8003296 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800324a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800324e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6899      	ldr	r1, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6919      	ldr	r1, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	041a      	lsls	r2, r3, #16
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f9a4 	bl	80035da <RTC_ExitInitMode>
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d110      	bne.n	80032be <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	22ff      	movs	r2, #255	; 0xff
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
 80032c6:	e001      	b.n	80032cc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032e2:	b590      	push	{r4, r7, lr}
 80032e4:	b087      	sub	sp, #28
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	7f1b      	ldrb	r3, [r3, #28]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_RTC_SetTime+0x1c>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e087      	b.n	800340e <HAL_RTC_SetTime+0x12c>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2202      	movs	r2, #2
 8003308:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d126      	bne.n	800335e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2200      	movs	r2, #0
 8003322:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f97b 	bl	8003624 <RTC_ByteToBcd2>
 800332e:	4603      	mov	r3, r0
 8003330:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f974 	bl	8003624 <RTC_ByteToBcd2>
 800333c:	4603      	mov	r3, r0
 800333e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003340:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	789b      	ldrb	r3, [r3, #2]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f96c 	bl	8003624 <RTC_ByteToBcd2>
 800334c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800334e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	78db      	ldrb	r3, [r3, #3]
 8003356:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e018      	b.n	8003390 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800337e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003384:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	22ca      	movs	r2, #202	; 0xca
 8003396:	625a      	str	r2, [r3, #36]	; 0x24
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2253      	movs	r2, #83	; 0x53
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f8e3 	bl	800356c <RTC_EnterInitMode>
 80033a6:	4603      	mov	r3, r0
 80033a8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d120      	bne.n	80033f2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80033ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80033be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	431a      	orrs	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f8f6 	bl	80035da <RTC_ExitInitMode>
 80033ee:	4603      	mov	r3, r0
 80033f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	22ff      	movs	r2, #255	; 0xff
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]

  return status;
 800340c:	7cfb      	ldrb	r3, [r7, #19]
}
 800340e:	4618      	mov	r0, r3
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd90      	pop	{r4, r7, pc}

08003416 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003416:	b590      	push	{r4, r7, lr}
 8003418:	b087      	sub	sp, #28
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	7f1b      	ldrb	r3, [r3, #28]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_RTC_SetDate+0x1c>
 800342e:	2302      	movs	r3, #2
 8003430:	e071      	b.n	8003516 <HAL_RTC_SetDate+0x100>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2202      	movs	r2, #2
 800343c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10e      	bne.n	8003462 <HAL_RTC_SetDate+0x4c>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	f023 0310 	bic.w	r3, r3, #16
 8003458:	b2db      	uxtb	r3, r3
 800345a:	330a      	adds	r3, #10
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d11c      	bne.n	80034a2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	78db      	ldrb	r3, [r3, #3]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 f8d9 	bl	8003624 <RTC_ByteToBcd2>
 8003472:	4603      	mov	r3, r0
 8003474:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f8d2 	bl	8003624 <RTC_ByteToBcd2>
 8003480:	4603      	mov	r3, r0
 8003482:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003484:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	789b      	ldrb	r3, [r3, #2]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f8ca 	bl	8003624 <RTC_ByteToBcd2>
 8003490:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003492:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e00e      	b.n	80034c0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	78db      	ldrb	r3, [r3, #3]
 80034a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034ae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80034b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	22ca      	movs	r2, #202	; 0xca
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2253      	movs	r2, #83	; 0x53
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f84b 	bl	800356c <RTC_EnterInitMode>
 80034d6:	4603      	mov	r3, r0
 80034d8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10c      	bne.n	80034fa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034ee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f872 	bl	80035da <RTC_ExitInitMode>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	22ff      	movs	r2, #255	; 0xff
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]

  return status;
 8003514:	7cfb      	ldrb	r3, [r7, #19]
}
 8003516:	4618      	mov	r0, r3
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd90      	pop	{r4, r7, pc}
	...

08003520 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <HAL_RTC_WaitForSynchro+0x48>)
 8003532:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003534:	f7fd ff2c 	bl	8001390 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800353a:	e009      	b.n	8003550 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800353c:	f7fd ff28 	bl	8001390 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800354a:	d901      	bls.n	8003550 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e007      	b.n	8003560 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0ee      	beq.n	800353c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	00017f5f 	.word	0x00017f5f

0800356c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d122      	bne.n	80035d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003598:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800359a:	f7fd fef9 	bl	8001390 <HAL_GetTick>
 800359e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035a0:	e00c      	b.n	80035bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035a2:	f7fd fef5 	bl	8001390 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035b0:	d904      	bls.n	80035bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2204      	movs	r2, #4
 80035b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <RTC_EnterInitMode+0x64>
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d1e8      	bne.n	80035a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ff8b 	bl	8003520 <HAL_RTC_WaitForSynchro>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2204      	movs	r2, #4
 8003614:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800361a:	7bfb      	ldrb	r3, [r7, #15]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003632:	e005      	b.n	8003640 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	3b0a      	subs	r3, #10
 800363e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	2b09      	cmp	r3, #9
 8003644:	d8f6      	bhi.n	8003634 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	b2da      	uxtb	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	4313      	orrs	r3, r2
 8003652:	b2db      	uxtb	r3, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e042      	b.n	80036f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fc74 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	; 0x24
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fa09 	bl	8003abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	d175      	bne.n	800380c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_UART_Transmit+0x2c>
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e06e      	b.n	800380e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2221      	movs	r2, #33	; 0x21
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800373e:	f7fd fe27 	bl	8001390 <HAL_GetTick>
 8003742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	88fa      	ldrh	r2, [r7, #6]
 8003748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003758:	d108      	bne.n	800376c <HAL_UART_Transmit+0x6c>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d104      	bne.n	800376c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	e003      	b.n	8003774 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003774:	e02e      	b.n	80037d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2200      	movs	r2, #0
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f8df 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e03a      	b.n	800380e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	3302      	adds	r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	e007      	b.n	80037c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	3301      	adds	r3, #1
 80037c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1cb      	bne.n	8003776 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2140      	movs	r1, #64	; 0x40
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f8ab 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e006      	b.n	800380e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b08a      	sub	sp, #40	; 0x28
 800381a:	af02      	add	r7, sp, #8
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b20      	cmp	r3, #32
 8003834:	f040 8081 	bne.w	800393a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_UART_Receive+0x2e>
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e079      	b.n	800393c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2222      	movs	r2, #34	; 0x22
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800385c:	f7fd fd98 	bl	8001390 <HAL_GetTick>
 8003860:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	88fa      	ldrh	r2, [r7, #6]
 8003866:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003876:	d108      	bne.n	800388a <HAL_UART_Receive+0x74>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	e003      	b.n	8003892 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003892:	e047      	b.n	8003924 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2200      	movs	r2, #0
 800389c:	2120      	movs	r1, #32
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f850 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e042      	b.n	800393c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10c      	bne.n	80038d6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	3302      	adds	r3, #2
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	e01f      	b.n	8003916 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d007      	beq.n	80038f0 <HAL_UART_Receive+0xda>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_UART_Receive+0xe8>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e008      	b.n	8003910 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800390a:	b2da      	uxtb	r2, r3
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1b2      	bne.n	8003894 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003954:	e03b      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800395c:	d037      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fd fd17 	bl	8001390 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	6a3a      	ldr	r2, [r7, #32]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <UART_WaitOnFlagUntilTimeout+0x30>
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e03a      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d023      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d020      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d01d      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d116      	bne.n	80039ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f81d 	bl	80039f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2208      	movs	r2, #8
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e00f      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	429a      	cmp	r2, r3
 80039dc:	bf0c      	ite	eq
 80039de:	2301      	moveq	r3, #1
 80039e0:	2300      	movne	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d0b4      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b095      	sub	sp, #84	; 0x54
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	330c      	adds	r3, #12
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a1e:	643a      	str	r2, [r7, #64]	; 0x40
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e5      	bne.n	80039fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3314      	adds	r3, #20
 8003a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e5      	bne.n	8003a32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d119      	bne.n	8003aa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f023 0310 	bic.w	r3, r3, #16
 8003a84:	647b      	str	r3, [r7, #68]	; 0x44
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a8e:	61ba      	str	r2, [r7, #24]
 8003a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6979      	ldr	r1, [r7, #20]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ab0:	bf00      	nop
 8003ab2:	3754      	adds	r7, #84	; 0x54
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac0:	b0c0      	sub	sp, #256	; 0x100
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	68d9      	ldr	r1, [r3, #12]
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	ea40 0301 	orr.w	r3, r0, r1
 8003ae4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b14:	f021 010c 	bic.w	r1, r1, #12
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b22:	430b      	orrs	r3, r1
 8003b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	6999      	ldr	r1, [r3, #24]
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	ea40 0301 	orr.w	r3, r0, r1
 8003b42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b8f      	ldr	r3, [pc, #572]	; (8003d88 <UART_SetConfig+0x2cc>)
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d005      	beq.n	8003b5c <UART_SetConfig+0xa0>
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b8d      	ldr	r3, [pc, #564]	; (8003d8c <UART_SetConfig+0x2d0>)
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d104      	bne.n	8003b66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b5c:	f7fe fac0 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8003b60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b64:	e003      	b.n	8003b6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b66:	f7fe faa7 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8003b6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b78:	f040 810c 	bne.w	8003d94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b8e:	4622      	mov	r2, r4
 8003b90:	462b      	mov	r3, r5
 8003b92:	1891      	adds	r1, r2, r2
 8003b94:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b96:	415b      	adcs	r3, r3
 8003b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	eb12 0801 	adds.w	r8, r2, r1
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	eb43 0901 	adc.w	r9, r3, r1
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bbe:	4690      	mov	r8, r2
 8003bc0:	4699      	mov	r9, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	eb18 0303 	adds.w	r3, r8, r3
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bcc:	462b      	mov	r3, r5
 8003bce:	eb49 0303 	adc.w	r3, r9, r3
 8003bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003be2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bea:	460b      	mov	r3, r1
 8003bec:	18db      	adds	r3, r3, r3
 8003bee:	653b      	str	r3, [r7, #80]	; 0x50
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	eb42 0303 	adc.w	r3, r2, r3
 8003bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c00:	f7fc fb5e 	bl	80002c0 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4b61      	ldr	r3, [pc, #388]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	011c      	lsls	r4, r3, #4
 8003c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c24:	4642      	mov	r2, r8
 8003c26:	464b      	mov	r3, r9
 8003c28:	1891      	adds	r1, r2, r2
 8003c2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c2c:	415b      	adcs	r3, r3
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c34:	4641      	mov	r1, r8
 8003c36:	eb12 0a01 	adds.w	sl, r2, r1
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c54:	4692      	mov	sl, r2
 8003c56:	469b      	mov	fp, r3
 8003c58:	4643      	mov	r3, r8
 8003c5a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c62:	464b      	mov	r3, r9
 8003c64:	eb4b 0303 	adc.w	r3, fp, r3
 8003c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c80:	460b      	mov	r3, r1
 8003c82:	18db      	adds	r3, r3, r3
 8003c84:	643b      	str	r3, [r7, #64]	; 0x40
 8003c86:	4613      	mov	r3, r2
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c96:	f7fc fb13 	bl	80002c0 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2264      	movs	r2, #100	; 0x64
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	1acb      	subs	r3, r1, r3
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cc4:	441c      	add	r4, r3
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ce8:	4641      	mov	r1, r8
 8003cea:	1851      	adds	r1, r2, r1
 8003cec:	6339      	str	r1, [r7, #48]	; 0x30
 8003cee:	4649      	mov	r1, r9
 8003cf0:	414b      	adcs	r3, r1
 8003cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d00:	4659      	mov	r1, fp
 8003d02:	00cb      	lsls	r3, r1, #3
 8003d04:	4651      	mov	r1, sl
 8003d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	00ca      	lsls	r2, r1, #3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	4642      	mov	r2, r8
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	460a      	mov	r2, r1
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	18db      	adds	r3, r3, r3
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d42:	4613      	mov	r3, r2
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d52:	f7fc fab5 	bl	80002c0 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	2164      	movs	r1, #100	; 0x64
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	3332      	adds	r3, #50	; 0x32
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	f003 0207 	and.w	r2, r3, #7
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4422      	add	r2, r4
 8003d82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d84:	e106      	b.n	8003f94 <UART_SetConfig+0x4d8>
 8003d86:	bf00      	nop
 8003d88:	40011000 	.word	0x40011000
 8003d8c:	40011400 	.word	0x40011400
 8003d90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003da2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003da6:	4642      	mov	r2, r8
 8003da8:	464b      	mov	r3, r9
 8003daa:	1891      	adds	r1, r2, r2
 8003dac:	6239      	str	r1, [r7, #32]
 8003dae:	415b      	adcs	r3, r3
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003db6:	4641      	mov	r1, r8
 8003db8:	1854      	adds	r4, r2, r1
 8003dba:	4649      	mov	r1, r9
 8003dbc:	eb43 0501 	adc.w	r5, r3, r1
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	00eb      	lsls	r3, r5, #3
 8003dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dce:	00e2      	lsls	r2, r4, #3
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	4643      	mov	r3, r8
 8003dd6:	18e3      	adds	r3, r4, r3
 8003dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ddc:	464b      	mov	r3, r9
 8003dde:	eb45 0303 	adc.w	r3, r5, r3
 8003de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003df2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e02:	4629      	mov	r1, r5
 8003e04:	008b      	lsls	r3, r1, #2
 8003e06:	4621      	mov	r1, r4
 8003e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	008a      	lsls	r2, r1, #2
 8003e10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e14:	f7fc fa54 	bl	80002c0 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4b60      	ldr	r3, [pc, #384]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	011c      	lsls	r4, r3, #4
 8003e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	1891      	adds	r1, r2, r2
 8003e3e:	61b9      	str	r1, [r7, #24]
 8003e40:	415b      	adcs	r3, r3
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e48:	4641      	mov	r1, r8
 8003e4a:	1851      	adds	r1, r2, r1
 8003e4c:	6139      	str	r1, [r7, #16]
 8003e4e:	4649      	mov	r1, r9
 8003e50:	414b      	adcs	r3, r1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e60:	4659      	mov	r1, fp
 8003e62:	00cb      	lsls	r3, r1, #3
 8003e64:	4651      	mov	r1, sl
 8003e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e6a:	4651      	mov	r1, sl
 8003e6c:	00ca      	lsls	r2, r1, #3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	4642      	mov	r2, r8
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	460a      	mov	r2, r1
 8003e80:	eb42 0303 	adc.w	r3, r2, r3
 8003e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	008b      	lsls	r3, r1, #2
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eaa:	4641      	mov	r1, r8
 8003eac:	008a      	lsls	r2, r1, #2
 8003eae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eb2:	f7fc fa05 	bl	80002c0 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003ebe:	fba3 2301 	umull	r2, r3, r3, r1
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2264      	movs	r2, #100	; 0x64
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	1acb      	subs	r3, r1, r3
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	3332      	adds	r3, #50	; 0x32
 8003ed0:	4a33      	ldr	r2, [pc, #204]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003edc:	441c      	add	r4, r3
 8003ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ee6:	677a      	str	r2, [r7, #116]	; 0x74
 8003ee8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003efc:	4641      	mov	r1, r8
 8003efe:	1851      	adds	r1, r2, r1
 8003f00:	6039      	str	r1, [r7, #0]
 8003f02:	4649      	mov	r1, r9
 8003f04:	414b      	adcs	r3, r1
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f14:	4659      	mov	r1, fp
 8003f16:	00cb      	lsls	r3, r1, #3
 8003f18:	4651      	mov	r1, sl
 8003f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1e:	4651      	mov	r1, sl
 8003f20:	00ca      	lsls	r2, r1, #3
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	4642      	mov	r2, r8
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f2e:	464b      	mov	r3, r9
 8003f30:	460a      	mov	r2, r1
 8003f32:	eb42 0303 	adc.w	r3, r2, r3
 8003f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	663b      	str	r3, [r7, #96]	; 0x60
 8003f42:	667a      	str	r2, [r7, #100]	; 0x64
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f50:	4649      	mov	r1, r9
 8003f52:	008b      	lsls	r3, r1, #2
 8003f54:	4641      	mov	r1, r8
 8003f56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f5a:	4641      	mov	r1, r8
 8003f5c:	008a      	lsls	r2, r1, #2
 8003f5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f62:	f7fc f9ad 	bl	80002c0 <__aeabi_uldivmod>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	2164      	movs	r1, #100	; 0x64
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	3332      	adds	r3, #50	; 0x32
 8003f7e:	4a08      	ldr	r2, [pc, #32]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	f003 020f 	and.w	r2, r3, #15
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4422      	add	r2, r4
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bf00      	nop
 8003f96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa0:	51eb851f 	.word	0x51eb851f

08003fa4 <std>:
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	b510      	push	{r4, lr}
 8003fa8:	4604      	mov	r4, r0
 8003faa:	e9c0 3300 	strd	r3, r3, [r0]
 8003fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fb2:	6083      	str	r3, [r0, #8]
 8003fb4:	8181      	strh	r1, [r0, #12]
 8003fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8003fb8:	81c2      	strh	r2, [r0, #14]
 8003fba:	6183      	str	r3, [r0, #24]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	305c      	adds	r0, #92	; 0x5c
 8003fc2:	f000 f91f 	bl	8004204 <memset>
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <std+0x58>)
 8003fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <std+0x5c>)
 8003fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <std+0x60>)
 8003fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <std+0x64>)
 8003fd4:	6323      	str	r3, [r4, #48]	; 0x30
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <std+0x68>)
 8003fd8:	6224      	str	r4, [r4, #32]
 8003fda:	429c      	cmp	r4, r3
 8003fdc:	d006      	beq.n	8003fec <std+0x48>
 8003fde:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003fe2:	4294      	cmp	r4, r2
 8003fe4:	d002      	beq.n	8003fec <std+0x48>
 8003fe6:	33d0      	adds	r3, #208	; 0xd0
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d105      	bne.n	8003ff8 <std+0x54>
 8003fec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ff4:	f000 b938 	b.w	8004268 <__retarget_lock_init_recursive>
 8003ff8:	bd10      	pop	{r4, pc}
 8003ffa:	bf00      	nop
 8003ffc:	08004ac9 	.word	0x08004ac9
 8004000:	08004aeb 	.word	0x08004aeb
 8004004:	08004b23 	.word	0x08004b23
 8004008:	08004b47 	.word	0x08004b47
 800400c:	2000092c 	.word	0x2000092c

08004010 <stdio_exit_handler>:
 8004010:	4a02      	ldr	r2, [pc, #8]	; (800401c <stdio_exit_handler+0xc>)
 8004012:	4903      	ldr	r1, [pc, #12]	; (8004020 <stdio_exit_handler+0x10>)
 8004014:	4803      	ldr	r0, [pc, #12]	; (8004024 <stdio_exit_handler+0x14>)
 8004016:	f000 b869 	b.w	80040ec <_fwalk_sglue>
 800401a:	bf00      	nop
 800401c:	2000000c 	.word	0x2000000c
 8004020:	08004a61 	.word	0x08004a61
 8004024:	20000018 	.word	0x20000018

08004028 <cleanup_stdio>:
 8004028:	6841      	ldr	r1, [r0, #4]
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <cleanup_stdio+0x34>)
 800402c:	4299      	cmp	r1, r3
 800402e:	b510      	push	{r4, lr}
 8004030:	4604      	mov	r4, r0
 8004032:	d001      	beq.n	8004038 <cleanup_stdio+0x10>
 8004034:	f000 fd14 	bl	8004a60 <_fflush_r>
 8004038:	68a1      	ldr	r1, [r4, #8]
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <cleanup_stdio+0x38>)
 800403c:	4299      	cmp	r1, r3
 800403e:	d002      	beq.n	8004046 <cleanup_stdio+0x1e>
 8004040:	4620      	mov	r0, r4
 8004042:	f000 fd0d 	bl	8004a60 <_fflush_r>
 8004046:	68e1      	ldr	r1, [r4, #12]
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <cleanup_stdio+0x3c>)
 800404a:	4299      	cmp	r1, r3
 800404c:	d004      	beq.n	8004058 <cleanup_stdio+0x30>
 800404e:	4620      	mov	r0, r4
 8004050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004054:	f000 bd04 	b.w	8004a60 <_fflush_r>
 8004058:	bd10      	pop	{r4, pc}
 800405a:	bf00      	nop
 800405c:	2000092c 	.word	0x2000092c
 8004060:	20000994 	.word	0x20000994
 8004064:	200009fc 	.word	0x200009fc

08004068 <global_stdio_init.part.0>:
 8004068:	b510      	push	{r4, lr}
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <global_stdio_init.part.0+0x30>)
 800406c:	4c0b      	ldr	r4, [pc, #44]	; (800409c <global_stdio_init.part.0+0x34>)
 800406e:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <global_stdio_init.part.0+0x38>)
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	4620      	mov	r0, r4
 8004074:	2200      	movs	r2, #0
 8004076:	2104      	movs	r1, #4
 8004078:	f7ff ff94 	bl	8003fa4 <std>
 800407c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004080:	2201      	movs	r2, #1
 8004082:	2109      	movs	r1, #9
 8004084:	f7ff ff8e 	bl	8003fa4 <std>
 8004088:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800408c:	2202      	movs	r2, #2
 800408e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004092:	2112      	movs	r1, #18
 8004094:	f7ff bf86 	b.w	8003fa4 <std>
 8004098:	20000a64 	.word	0x20000a64
 800409c:	2000092c 	.word	0x2000092c
 80040a0:	08004011 	.word	0x08004011

080040a4 <__sfp_lock_acquire>:
 80040a4:	4801      	ldr	r0, [pc, #4]	; (80040ac <__sfp_lock_acquire+0x8>)
 80040a6:	f000 b8e0 	b.w	800426a <__retarget_lock_acquire_recursive>
 80040aa:	bf00      	nop
 80040ac:	20000a69 	.word	0x20000a69

080040b0 <__sfp_lock_release>:
 80040b0:	4801      	ldr	r0, [pc, #4]	; (80040b8 <__sfp_lock_release+0x8>)
 80040b2:	f000 b8db 	b.w	800426c <__retarget_lock_release_recursive>
 80040b6:	bf00      	nop
 80040b8:	20000a69 	.word	0x20000a69

080040bc <__sinit>:
 80040bc:	b510      	push	{r4, lr}
 80040be:	4604      	mov	r4, r0
 80040c0:	f7ff fff0 	bl	80040a4 <__sfp_lock_acquire>
 80040c4:	6a23      	ldr	r3, [r4, #32]
 80040c6:	b11b      	cbz	r3, 80040d0 <__sinit+0x14>
 80040c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040cc:	f7ff bff0 	b.w	80040b0 <__sfp_lock_release>
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <__sinit+0x28>)
 80040d2:	6223      	str	r3, [r4, #32]
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <__sinit+0x2c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f5      	bne.n	80040c8 <__sinit+0xc>
 80040dc:	f7ff ffc4 	bl	8004068 <global_stdio_init.part.0>
 80040e0:	e7f2      	b.n	80040c8 <__sinit+0xc>
 80040e2:	bf00      	nop
 80040e4:	08004029 	.word	0x08004029
 80040e8:	20000a64 	.word	0x20000a64

080040ec <_fwalk_sglue>:
 80040ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f0:	4607      	mov	r7, r0
 80040f2:	4688      	mov	r8, r1
 80040f4:	4614      	mov	r4, r2
 80040f6:	2600      	movs	r6, #0
 80040f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004100:	d505      	bpl.n	800410e <_fwalk_sglue+0x22>
 8004102:	6824      	ldr	r4, [r4, #0]
 8004104:	2c00      	cmp	r4, #0
 8004106:	d1f7      	bne.n	80040f8 <_fwalk_sglue+0xc>
 8004108:	4630      	mov	r0, r6
 800410a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800410e:	89ab      	ldrh	r3, [r5, #12]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d907      	bls.n	8004124 <_fwalk_sglue+0x38>
 8004114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004118:	3301      	adds	r3, #1
 800411a:	d003      	beq.n	8004124 <_fwalk_sglue+0x38>
 800411c:	4629      	mov	r1, r5
 800411e:	4638      	mov	r0, r7
 8004120:	47c0      	blx	r8
 8004122:	4306      	orrs	r6, r0
 8004124:	3568      	adds	r5, #104	; 0x68
 8004126:	e7e9      	b.n	80040fc <_fwalk_sglue+0x10>

08004128 <iprintf>:
 8004128:	b40f      	push	{r0, r1, r2, r3}
 800412a:	b507      	push	{r0, r1, r2, lr}
 800412c:	4906      	ldr	r1, [pc, #24]	; (8004148 <iprintf+0x20>)
 800412e:	ab04      	add	r3, sp, #16
 8004130:	6808      	ldr	r0, [r1, #0]
 8004132:	f853 2b04 	ldr.w	r2, [r3], #4
 8004136:	6881      	ldr	r1, [r0, #8]
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	f000 f8c1 	bl	80042c0 <_vfiprintf_r>
 800413e:	b003      	add	sp, #12
 8004140:	f85d eb04 	ldr.w	lr, [sp], #4
 8004144:	b004      	add	sp, #16
 8004146:	4770      	bx	lr
 8004148:	20000064 	.word	0x20000064

0800414c <_puts_r>:
 800414c:	6a03      	ldr	r3, [r0, #32]
 800414e:	b570      	push	{r4, r5, r6, lr}
 8004150:	6884      	ldr	r4, [r0, #8]
 8004152:	4605      	mov	r5, r0
 8004154:	460e      	mov	r6, r1
 8004156:	b90b      	cbnz	r3, 800415c <_puts_r+0x10>
 8004158:	f7ff ffb0 	bl	80040bc <__sinit>
 800415c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800415e:	07db      	lsls	r3, r3, #31
 8004160:	d405      	bmi.n	800416e <_puts_r+0x22>
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	0598      	lsls	r0, r3, #22
 8004166:	d402      	bmi.n	800416e <_puts_r+0x22>
 8004168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800416a:	f000 f87e 	bl	800426a <__retarget_lock_acquire_recursive>
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	0719      	lsls	r1, r3, #28
 8004172:	d513      	bpl.n	800419c <_puts_r+0x50>
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	b18b      	cbz	r3, 800419c <_puts_r+0x50>
 8004178:	3e01      	subs	r6, #1
 800417a:	68a3      	ldr	r3, [r4, #8]
 800417c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004180:	3b01      	subs	r3, #1
 8004182:	60a3      	str	r3, [r4, #8]
 8004184:	b9e9      	cbnz	r1, 80041c2 <_puts_r+0x76>
 8004186:	2b00      	cmp	r3, #0
 8004188:	da2e      	bge.n	80041e8 <_puts_r+0x9c>
 800418a:	4622      	mov	r2, r4
 800418c:	210a      	movs	r1, #10
 800418e:	4628      	mov	r0, r5
 8004190:	f000 fcdd 	bl	8004b4e <__swbuf_r>
 8004194:	3001      	adds	r0, #1
 8004196:	d007      	beq.n	80041a8 <_puts_r+0x5c>
 8004198:	250a      	movs	r5, #10
 800419a:	e007      	b.n	80041ac <_puts_r+0x60>
 800419c:	4621      	mov	r1, r4
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 fd12 	bl	8004bc8 <__swsetup_r>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d0e7      	beq.n	8004178 <_puts_r+0x2c>
 80041a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80041ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041ae:	07da      	lsls	r2, r3, #31
 80041b0:	d405      	bmi.n	80041be <_puts_r+0x72>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	059b      	lsls	r3, r3, #22
 80041b6:	d402      	bmi.n	80041be <_puts_r+0x72>
 80041b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ba:	f000 f857 	bl	800426c <__retarget_lock_release_recursive>
 80041be:	4628      	mov	r0, r5
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da04      	bge.n	80041d0 <_puts_r+0x84>
 80041c6:	69a2      	ldr	r2, [r4, #24]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	dc06      	bgt.n	80041da <_puts_r+0x8e>
 80041cc:	290a      	cmp	r1, #10
 80041ce:	d004      	beq.n	80041da <_puts_r+0x8e>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	6022      	str	r2, [r4, #0]
 80041d6:	7019      	strb	r1, [r3, #0]
 80041d8:	e7cf      	b.n	800417a <_puts_r+0x2e>
 80041da:	4622      	mov	r2, r4
 80041dc:	4628      	mov	r0, r5
 80041de:	f000 fcb6 	bl	8004b4e <__swbuf_r>
 80041e2:	3001      	adds	r0, #1
 80041e4:	d1c9      	bne.n	800417a <_puts_r+0x2e>
 80041e6:	e7df      	b.n	80041a8 <_puts_r+0x5c>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	250a      	movs	r5, #10
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	6022      	str	r2, [r4, #0]
 80041f0:	701d      	strb	r5, [r3, #0]
 80041f2:	e7db      	b.n	80041ac <_puts_r+0x60>

080041f4 <puts>:
 80041f4:	4b02      	ldr	r3, [pc, #8]	; (8004200 <puts+0xc>)
 80041f6:	4601      	mov	r1, r0
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	f7ff bfa7 	b.w	800414c <_puts_r>
 80041fe:	bf00      	nop
 8004200:	20000064 	.word	0x20000064

08004204 <memset>:
 8004204:	4402      	add	r2, r0
 8004206:	4603      	mov	r3, r0
 8004208:	4293      	cmp	r3, r2
 800420a:	d100      	bne.n	800420e <memset+0xa>
 800420c:	4770      	bx	lr
 800420e:	f803 1b01 	strb.w	r1, [r3], #1
 8004212:	e7f9      	b.n	8004208 <memset+0x4>

08004214 <__errno>:
 8004214:	4b01      	ldr	r3, [pc, #4]	; (800421c <__errno+0x8>)
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000064 	.word	0x20000064

08004220 <__libc_init_array>:
 8004220:	b570      	push	{r4, r5, r6, lr}
 8004222:	4d0d      	ldr	r5, [pc, #52]	; (8004258 <__libc_init_array+0x38>)
 8004224:	4c0d      	ldr	r4, [pc, #52]	; (800425c <__libc_init_array+0x3c>)
 8004226:	1b64      	subs	r4, r4, r5
 8004228:	10a4      	asrs	r4, r4, #2
 800422a:	2600      	movs	r6, #0
 800422c:	42a6      	cmp	r6, r4
 800422e:	d109      	bne.n	8004244 <__libc_init_array+0x24>
 8004230:	4d0b      	ldr	r5, [pc, #44]	; (8004260 <__libc_init_array+0x40>)
 8004232:	4c0c      	ldr	r4, [pc, #48]	; (8004264 <__libc_init_array+0x44>)
 8004234:	f000 fe46 	bl	8004ec4 <_init>
 8004238:	1b64      	subs	r4, r4, r5
 800423a:	10a4      	asrs	r4, r4, #2
 800423c:	2600      	movs	r6, #0
 800423e:	42a6      	cmp	r6, r4
 8004240:	d105      	bne.n	800424e <__libc_init_array+0x2e>
 8004242:	bd70      	pop	{r4, r5, r6, pc}
 8004244:	f855 3b04 	ldr.w	r3, [r5], #4
 8004248:	4798      	blx	r3
 800424a:	3601      	adds	r6, #1
 800424c:	e7ee      	b.n	800422c <__libc_init_array+0xc>
 800424e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004252:	4798      	blx	r3
 8004254:	3601      	adds	r6, #1
 8004256:	e7f2      	b.n	800423e <__libc_init_array+0x1e>
 8004258:	080050d4 	.word	0x080050d4
 800425c:	080050d4 	.word	0x080050d4
 8004260:	080050d4 	.word	0x080050d4
 8004264:	080050d8 	.word	0x080050d8

08004268 <__retarget_lock_init_recursive>:
 8004268:	4770      	bx	lr

0800426a <__retarget_lock_acquire_recursive>:
 800426a:	4770      	bx	lr

0800426c <__retarget_lock_release_recursive>:
 800426c:	4770      	bx	lr

0800426e <__sfputc_r>:
 800426e:	6893      	ldr	r3, [r2, #8]
 8004270:	3b01      	subs	r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	b410      	push	{r4}
 8004276:	6093      	str	r3, [r2, #8]
 8004278:	da08      	bge.n	800428c <__sfputc_r+0x1e>
 800427a:	6994      	ldr	r4, [r2, #24]
 800427c:	42a3      	cmp	r3, r4
 800427e:	db01      	blt.n	8004284 <__sfputc_r+0x16>
 8004280:	290a      	cmp	r1, #10
 8004282:	d103      	bne.n	800428c <__sfputc_r+0x1e>
 8004284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004288:	f000 bc61 	b.w	8004b4e <__swbuf_r>
 800428c:	6813      	ldr	r3, [r2, #0]
 800428e:	1c58      	adds	r0, r3, #1
 8004290:	6010      	str	r0, [r2, #0]
 8004292:	7019      	strb	r1, [r3, #0]
 8004294:	4608      	mov	r0, r1
 8004296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800429a:	4770      	bx	lr

0800429c <__sfputs_r>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	4606      	mov	r6, r0
 80042a0:	460f      	mov	r7, r1
 80042a2:	4614      	mov	r4, r2
 80042a4:	18d5      	adds	r5, r2, r3
 80042a6:	42ac      	cmp	r4, r5
 80042a8:	d101      	bne.n	80042ae <__sfputs_r+0x12>
 80042aa:	2000      	movs	r0, #0
 80042ac:	e007      	b.n	80042be <__sfputs_r+0x22>
 80042ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b2:	463a      	mov	r2, r7
 80042b4:	4630      	mov	r0, r6
 80042b6:	f7ff ffda 	bl	800426e <__sfputc_r>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	d1f3      	bne.n	80042a6 <__sfputs_r+0xa>
 80042be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042c0 <_vfiprintf_r>:
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	460d      	mov	r5, r1
 80042c6:	b09d      	sub	sp, #116	; 0x74
 80042c8:	4614      	mov	r4, r2
 80042ca:	4698      	mov	r8, r3
 80042cc:	4606      	mov	r6, r0
 80042ce:	b118      	cbz	r0, 80042d8 <_vfiprintf_r+0x18>
 80042d0:	6a03      	ldr	r3, [r0, #32]
 80042d2:	b90b      	cbnz	r3, 80042d8 <_vfiprintf_r+0x18>
 80042d4:	f7ff fef2 	bl	80040bc <__sinit>
 80042d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042da:	07d9      	lsls	r1, r3, #31
 80042dc:	d405      	bmi.n	80042ea <_vfiprintf_r+0x2a>
 80042de:	89ab      	ldrh	r3, [r5, #12]
 80042e0:	059a      	lsls	r2, r3, #22
 80042e2:	d402      	bmi.n	80042ea <_vfiprintf_r+0x2a>
 80042e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042e6:	f7ff ffc0 	bl	800426a <__retarget_lock_acquire_recursive>
 80042ea:	89ab      	ldrh	r3, [r5, #12]
 80042ec:	071b      	lsls	r3, r3, #28
 80042ee:	d501      	bpl.n	80042f4 <_vfiprintf_r+0x34>
 80042f0:	692b      	ldr	r3, [r5, #16]
 80042f2:	b99b      	cbnz	r3, 800431c <_vfiprintf_r+0x5c>
 80042f4:	4629      	mov	r1, r5
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 fc66 	bl	8004bc8 <__swsetup_r>
 80042fc:	b170      	cbz	r0, 800431c <_vfiprintf_r+0x5c>
 80042fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004300:	07dc      	lsls	r4, r3, #31
 8004302:	d504      	bpl.n	800430e <_vfiprintf_r+0x4e>
 8004304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004308:	b01d      	add	sp, #116	; 0x74
 800430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800430e:	89ab      	ldrh	r3, [r5, #12]
 8004310:	0598      	lsls	r0, r3, #22
 8004312:	d4f7      	bmi.n	8004304 <_vfiprintf_r+0x44>
 8004314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004316:	f7ff ffa9 	bl	800426c <__retarget_lock_release_recursive>
 800431a:	e7f3      	b.n	8004304 <_vfiprintf_r+0x44>
 800431c:	2300      	movs	r3, #0
 800431e:	9309      	str	r3, [sp, #36]	; 0x24
 8004320:	2320      	movs	r3, #32
 8004322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004326:	f8cd 800c 	str.w	r8, [sp, #12]
 800432a:	2330      	movs	r3, #48	; 0x30
 800432c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80044e0 <_vfiprintf_r+0x220>
 8004330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004334:	f04f 0901 	mov.w	r9, #1
 8004338:	4623      	mov	r3, r4
 800433a:	469a      	mov	sl, r3
 800433c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004340:	b10a      	cbz	r2, 8004346 <_vfiprintf_r+0x86>
 8004342:	2a25      	cmp	r2, #37	; 0x25
 8004344:	d1f9      	bne.n	800433a <_vfiprintf_r+0x7a>
 8004346:	ebba 0b04 	subs.w	fp, sl, r4
 800434a:	d00b      	beq.n	8004364 <_vfiprintf_r+0xa4>
 800434c:	465b      	mov	r3, fp
 800434e:	4622      	mov	r2, r4
 8004350:	4629      	mov	r1, r5
 8004352:	4630      	mov	r0, r6
 8004354:	f7ff ffa2 	bl	800429c <__sfputs_r>
 8004358:	3001      	adds	r0, #1
 800435a:	f000 80a9 	beq.w	80044b0 <_vfiprintf_r+0x1f0>
 800435e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004360:	445a      	add	r2, fp
 8004362:	9209      	str	r2, [sp, #36]	; 0x24
 8004364:	f89a 3000 	ldrb.w	r3, [sl]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a1 	beq.w	80044b0 <_vfiprintf_r+0x1f0>
 800436e:	2300      	movs	r3, #0
 8004370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004378:	f10a 0a01 	add.w	sl, sl, #1
 800437c:	9304      	str	r3, [sp, #16]
 800437e:	9307      	str	r3, [sp, #28]
 8004380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004384:	931a      	str	r3, [sp, #104]	; 0x68
 8004386:	4654      	mov	r4, sl
 8004388:	2205      	movs	r2, #5
 800438a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800438e:	4854      	ldr	r0, [pc, #336]	; (80044e0 <_vfiprintf_r+0x220>)
 8004390:	f7fb ff46 	bl	8000220 <memchr>
 8004394:	9a04      	ldr	r2, [sp, #16]
 8004396:	b9d8      	cbnz	r0, 80043d0 <_vfiprintf_r+0x110>
 8004398:	06d1      	lsls	r1, r2, #27
 800439a:	bf44      	itt	mi
 800439c:	2320      	movmi	r3, #32
 800439e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043a2:	0713      	lsls	r3, r2, #28
 80043a4:	bf44      	itt	mi
 80043a6:	232b      	movmi	r3, #43	; 0x2b
 80043a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ac:	f89a 3000 	ldrb.w	r3, [sl]
 80043b0:	2b2a      	cmp	r3, #42	; 0x2a
 80043b2:	d015      	beq.n	80043e0 <_vfiprintf_r+0x120>
 80043b4:	9a07      	ldr	r2, [sp, #28]
 80043b6:	4654      	mov	r4, sl
 80043b8:	2000      	movs	r0, #0
 80043ba:	f04f 0c0a 	mov.w	ip, #10
 80043be:	4621      	mov	r1, r4
 80043c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043c4:	3b30      	subs	r3, #48	; 0x30
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d94d      	bls.n	8004466 <_vfiprintf_r+0x1a6>
 80043ca:	b1b0      	cbz	r0, 80043fa <_vfiprintf_r+0x13a>
 80043cc:	9207      	str	r2, [sp, #28]
 80043ce:	e014      	b.n	80043fa <_vfiprintf_r+0x13a>
 80043d0:	eba0 0308 	sub.w	r3, r0, r8
 80043d4:	fa09 f303 	lsl.w	r3, r9, r3
 80043d8:	4313      	orrs	r3, r2
 80043da:	9304      	str	r3, [sp, #16]
 80043dc:	46a2      	mov	sl, r4
 80043de:	e7d2      	b.n	8004386 <_vfiprintf_r+0xc6>
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	1d19      	adds	r1, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	9103      	str	r1, [sp, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bfbb      	ittet	lt
 80043ec:	425b      	neglt	r3, r3
 80043ee:	f042 0202 	orrlt.w	r2, r2, #2
 80043f2:	9307      	strge	r3, [sp, #28]
 80043f4:	9307      	strlt	r3, [sp, #28]
 80043f6:	bfb8      	it	lt
 80043f8:	9204      	strlt	r2, [sp, #16]
 80043fa:	7823      	ldrb	r3, [r4, #0]
 80043fc:	2b2e      	cmp	r3, #46	; 0x2e
 80043fe:	d10c      	bne.n	800441a <_vfiprintf_r+0x15a>
 8004400:	7863      	ldrb	r3, [r4, #1]
 8004402:	2b2a      	cmp	r3, #42	; 0x2a
 8004404:	d134      	bne.n	8004470 <_vfiprintf_r+0x1b0>
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	1d1a      	adds	r2, r3, #4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	9203      	str	r2, [sp, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	bfb8      	it	lt
 8004412:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004416:	3402      	adds	r4, #2
 8004418:	9305      	str	r3, [sp, #20]
 800441a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80044f0 <_vfiprintf_r+0x230>
 800441e:	7821      	ldrb	r1, [r4, #0]
 8004420:	2203      	movs	r2, #3
 8004422:	4650      	mov	r0, sl
 8004424:	f7fb fefc 	bl	8000220 <memchr>
 8004428:	b138      	cbz	r0, 800443a <_vfiprintf_r+0x17a>
 800442a:	9b04      	ldr	r3, [sp, #16]
 800442c:	eba0 000a 	sub.w	r0, r0, sl
 8004430:	2240      	movs	r2, #64	; 0x40
 8004432:	4082      	lsls	r2, r0
 8004434:	4313      	orrs	r3, r2
 8004436:	3401      	adds	r4, #1
 8004438:	9304      	str	r3, [sp, #16]
 800443a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800443e:	4829      	ldr	r0, [pc, #164]	; (80044e4 <_vfiprintf_r+0x224>)
 8004440:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004444:	2206      	movs	r2, #6
 8004446:	f7fb feeb 	bl	8000220 <memchr>
 800444a:	2800      	cmp	r0, #0
 800444c:	d03f      	beq.n	80044ce <_vfiprintf_r+0x20e>
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <_vfiprintf_r+0x228>)
 8004450:	bb1b      	cbnz	r3, 800449a <_vfiprintf_r+0x1da>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	3307      	adds	r3, #7
 8004456:	f023 0307 	bic.w	r3, r3, #7
 800445a:	3308      	adds	r3, #8
 800445c:	9303      	str	r3, [sp, #12]
 800445e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004460:	443b      	add	r3, r7
 8004462:	9309      	str	r3, [sp, #36]	; 0x24
 8004464:	e768      	b.n	8004338 <_vfiprintf_r+0x78>
 8004466:	fb0c 3202 	mla	r2, ip, r2, r3
 800446a:	460c      	mov	r4, r1
 800446c:	2001      	movs	r0, #1
 800446e:	e7a6      	b.n	80043be <_vfiprintf_r+0xfe>
 8004470:	2300      	movs	r3, #0
 8004472:	3401      	adds	r4, #1
 8004474:	9305      	str	r3, [sp, #20]
 8004476:	4619      	mov	r1, r3
 8004478:	f04f 0c0a 	mov.w	ip, #10
 800447c:	4620      	mov	r0, r4
 800447e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004482:	3a30      	subs	r2, #48	; 0x30
 8004484:	2a09      	cmp	r2, #9
 8004486:	d903      	bls.n	8004490 <_vfiprintf_r+0x1d0>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0c6      	beq.n	800441a <_vfiprintf_r+0x15a>
 800448c:	9105      	str	r1, [sp, #20]
 800448e:	e7c4      	b.n	800441a <_vfiprintf_r+0x15a>
 8004490:	fb0c 2101 	mla	r1, ip, r1, r2
 8004494:	4604      	mov	r4, r0
 8004496:	2301      	movs	r3, #1
 8004498:	e7f0      	b.n	800447c <_vfiprintf_r+0x1bc>
 800449a:	ab03      	add	r3, sp, #12
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	462a      	mov	r2, r5
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <_vfiprintf_r+0x22c>)
 80044a2:	a904      	add	r1, sp, #16
 80044a4:	4630      	mov	r0, r6
 80044a6:	f3af 8000 	nop.w
 80044aa:	4607      	mov	r7, r0
 80044ac:	1c78      	adds	r0, r7, #1
 80044ae:	d1d6      	bne.n	800445e <_vfiprintf_r+0x19e>
 80044b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044b2:	07d9      	lsls	r1, r3, #31
 80044b4:	d405      	bmi.n	80044c2 <_vfiprintf_r+0x202>
 80044b6:	89ab      	ldrh	r3, [r5, #12]
 80044b8:	059a      	lsls	r2, r3, #22
 80044ba:	d402      	bmi.n	80044c2 <_vfiprintf_r+0x202>
 80044bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044be:	f7ff fed5 	bl	800426c <__retarget_lock_release_recursive>
 80044c2:	89ab      	ldrh	r3, [r5, #12]
 80044c4:	065b      	lsls	r3, r3, #25
 80044c6:	f53f af1d 	bmi.w	8004304 <_vfiprintf_r+0x44>
 80044ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044cc:	e71c      	b.n	8004308 <_vfiprintf_r+0x48>
 80044ce:	ab03      	add	r3, sp, #12
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	462a      	mov	r2, r5
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <_vfiprintf_r+0x22c>)
 80044d6:	a904      	add	r1, sp, #16
 80044d8:	4630      	mov	r0, r6
 80044da:	f000 f919 	bl	8004710 <_printf_i>
 80044de:	e7e4      	b.n	80044aa <_vfiprintf_r+0x1ea>
 80044e0:	08005098 	.word	0x08005098
 80044e4:	080050a2 	.word	0x080050a2
 80044e8:	00000000 	.word	0x00000000
 80044ec:	0800429d 	.word	0x0800429d
 80044f0:	0800509e 	.word	0x0800509e

080044f4 <sbrk_aligned>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	4e0e      	ldr	r6, [pc, #56]	; (8004530 <sbrk_aligned+0x3c>)
 80044f8:	460c      	mov	r4, r1
 80044fa:	6831      	ldr	r1, [r6, #0]
 80044fc:	4605      	mov	r5, r0
 80044fe:	b911      	cbnz	r1, 8004506 <sbrk_aligned+0x12>
 8004500:	f000 fc72 	bl	8004de8 <_sbrk_r>
 8004504:	6030      	str	r0, [r6, #0]
 8004506:	4621      	mov	r1, r4
 8004508:	4628      	mov	r0, r5
 800450a:	f000 fc6d 	bl	8004de8 <_sbrk_r>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	d00a      	beq.n	8004528 <sbrk_aligned+0x34>
 8004512:	1cc4      	adds	r4, r0, #3
 8004514:	f024 0403 	bic.w	r4, r4, #3
 8004518:	42a0      	cmp	r0, r4
 800451a:	d007      	beq.n	800452c <sbrk_aligned+0x38>
 800451c:	1a21      	subs	r1, r4, r0
 800451e:	4628      	mov	r0, r5
 8004520:	f000 fc62 	bl	8004de8 <_sbrk_r>
 8004524:	3001      	adds	r0, #1
 8004526:	d101      	bne.n	800452c <sbrk_aligned+0x38>
 8004528:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800452c:	4620      	mov	r0, r4
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	20000a70 	.word	0x20000a70

08004534 <_malloc_r>:
 8004534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004538:	1ccd      	adds	r5, r1, #3
 800453a:	f025 0503 	bic.w	r5, r5, #3
 800453e:	3508      	adds	r5, #8
 8004540:	2d0c      	cmp	r5, #12
 8004542:	bf38      	it	cc
 8004544:	250c      	movcc	r5, #12
 8004546:	2d00      	cmp	r5, #0
 8004548:	4607      	mov	r7, r0
 800454a:	db01      	blt.n	8004550 <_malloc_r+0x1c>
 800454c:	42a9      	cmp	r1, r5
 800454e:	d905      	bls.n	800455c <_malloc_r+0x28>
 8004550:	230c      	movs	r3, #12
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	2600      	movs	r6, #0
 8004556:	4630      	mov	r0, r6
 8004558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800455c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004630 <_malloc_r+0xfc>
 8004560:	f000 faa6 	bl	8004ab0 <__malloc_lock>
 8004564:	f8d8 3000 	ldr.w	r3, [r8]
 8004568:	461c      	mov	r4, r3
 800456a:	bb5c      	cbnz	r4, 80045c4 <_malloc_r+0x90>
 800456c:	4629      	mov	r1, r5
 800456e:	4638      	mov	r0, r7
 8004570:	f7ff ffc0 	bl	80044f4 <sbrk_aligned>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	4604      	mov	r4, r0
 8004578:	d155      	bne.n	8004626 <_malloc_r+0xf2>
 800457a:	f8d8 4000 	ldr.w	r4, [r8]
 800457e:	4626      	mov	r6, r4
 8004580:	2e00      	cmp	r6, #0
 8004582:	d145      	bne.n	8004610 <_malloc_r+0xdc>
 8004584:	2c00      	cmp	r4, #0
 8004586:	d048      	beq.n	800461a <_malloc_r+0xe6>
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	4631      	mov	r1, r6
 800458c:	4638      	mov	r0, r7
 800458e:	eb04 0903 	add.w	r9, r4, r3
 8004592:	f000 fc29 	bl	8004de8 <_sbrk_r>
 8004596:	4581      	cmp	r9, r0
 8004598:	d13f      	bne.n	800461a <_malloc_r+0xe6>
 800459a:	6821      	ldr	r1, [r4, #0]
 800459c:	1a6d      	subs	r5, r5, r1
 800459e:	4629      	mov	r1, r5
 80045a0:	4638      	mov	r0, r7
 80045a2:	f7ff ffa7 	bl	80044f4 <sbrk_aligned>
 80045a6:	3001      	adds	r0, #1
 80045a8:	d037      	beq.n	800461a <_malloc_r+0xe6>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	442b      	add	r3, r5
 80045ae:	6023      	str	r3, [r4, #0]
 80045b0:	f8d8 3000 	ldr.w	r3, [r8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d038      	beq.n	800462a <_malloc_r+0xf6>
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	42a2      	cmp	r2, r4
 80045bc:	d12b      	bne.n	8004616 <_malloc_r+0xe2>
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	e00f      	b.n	80045e4 <_malloc_r+0xb0>
 80045c4:	6822      	ldr	r2, [r4, #0]
 80045c6:	1b52      	subs	r2, r2, r5
 80045c8:	d41f      	bmi.n	800460a <_malloc_r+0xd6>
 80045ca:	2a0b      	cmp	r2, #11
 80045cc:	d917      	bls.n	80045fe <_malloc_r+0xca>
 80045ce:	1961      	adds	r1, r4, r5
 80045d0:	42a3      	cmp	r3, r4
 80045d2:	6025      	str	r5, [r4, #0]
 80045d4:	bf18      	it	ne
 80045d6:	6059      	strne	r1, [r3, #4]
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	bf08      	it	eq
 80045dc:	f8c8 1000 	streq.w	r1, [r8]
 80045e0:	5162      	str	r2, [r4, r5]
 80045e2:	604b      	str	r3, [r1, #4]
 80045e4:	4638      	mov	r0, r7
 80045e6:	f104 060b 	add.w	r6, r4, #11
 80045ea:	f000 fa67 	bl	8004abc <__malloc_unlock>
 80045ee:	f026 0607 	bic.w	r6, r6, #7
 80045f2:	1d23      	adds	r3, r4, #4
 80045f4:	1af2      	subs	r2, r6, r3
 80045f6:	d0ae      	beq.n	8004556 <_malloc_r+0x22>
 80045f8:	1b9b      	subs	r3, r3, r6
 80045fa:	50a3      	str	r3, [r4, r2]
 80045fc:	e7ab      	b.n	8004556 <_malloc_r+0x22>
 80045fe:	42a3      	cmp	r3, r4
 8004600:	6862      	ldr	r2, [r4, #4]
 8004602:	d1dd      	bne.n	80045c0 <_malloc_r+0x8c>
 8004604:	f8c8 2000 	str.w	r2, [r8]
 8004608:	e7ec      	b.n	80045e4 <_malloc_r+0xb0>
 800460a:	4623      	mov	r3, r4
 800460c:	6864      	ldr	r4, [r4, #4]
 800460e:	e7ac      	b.n	800456a <_malloc_r+0x36>
 8004610:	4634      	mov	r4, r6
 8004612:	6876      	ldr	r6, [r6, #4]
 8004614:	e7b4      	b.n	8004580 <_malloc_r+0x4c>
 8004616:	4613      	mov	r3, r2
 8004618:	e7cc      	b.n	80045b4 <_malloc_r+0x80>
 800461a:	230c      	movs	r3, #12
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4638      	mov	r0, r7
 8004620:	f000 fa4c 	bl	8004abc <__malloc_unlock>
 8004624:	e797      	b.n	8004556 <_malloc_r+0x22>
 8004626:	6025      	str	r5, [r4, #0]
 8004628:	e7dc      	b.n	80045e4 <_malloc_r+0xb0>
 800462a:	605b      	str	r3, [r3, #4]
 800462c:	deff      	udf	#255	; 0xff
 800462e:	bf00      	nop
 8004630:	20000a6c 	.word	0x20000a6c

08004634 <_printf_common>:
 8004634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004638:	4616      	mov	r6, r2
 800463a:	4699      	mov	r9, r3
 800463c:	688a      	ldr	r2, [r1, #8]
 800463e:	690b      	ldr	r3, [r1, #16]
 8004640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004644:	4293      	cmp	r3, r2
 8004646:	bfb8      	it	lt
 8004648:	4613      	movlt	r3, r2
 800464a:	6033      	str	r3, [r6, #0]
 800464c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004650:	4607      	mov	r7, r0
 8004652:	460c      	mov	r4, r1
 8004654:	b10a      	cbz	r2, 800465a <_printf_common+0x26>
 8004656:	3301      	adds	r3, #1
 8004658:	6033      	str	r3, [r6, #0]
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	0699      	lsls	r1, r3, #26
 800465e:	bf42      	ittt	mi
 8004660:	6833      	ldrmi	r3, [r6, #0]
 8004662:	3302      	addmi	r3, #2
 8004664:	6033      	strmi	r3, [r6, #0]
 8004666:	6825      	ldr	r5, [r4, #0]
 8004668:	f015 0506 	ands.w	r5, r5, #6
 800466c:	d106      	bne.n	800467c <_printf_common+0x48>
 800466e:	f104 0a19 	add.w	sl, r4, #25
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	6832      	ldr	r2, [r6, #0]
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	42ab      	cmp	r3, r5
 800467a:	dc26      	bgt.n	80046ca <_printf_common+0x96>
 800467c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004680:	1e13      	subs	r3, r2, #0
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	bf18      	it	ne
 8004686:	2301      	movne	r3, #1
 8004688:	0692      	lsls	r2, r2, #26
 800468a:	d42b      	bmi.n	80046e4 <_printf_common+0xb0>
 800468c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004690:	4649      	mov	r1, r9
 8004692:	4638      	mov	r0, r7
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d01e      	beq.n	80046d8 <_printf_common+0xa4>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	6922      	ldr	r2, [r4, #16]
 800469e:	f003 0306 	and.w	r3, r3, #6
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	bf02      	ittt	eq
 80046a6:	68e5      	ldreq	r5, [r4, #12]
 80046a8:	6833      	ldreq	r3, [r6, #0]
 80046aa:	1aed      	subeq	r5, r5, r3
 80046ac:	68a3      	ldr	r3, [r4, #8]
 80046ae:	bf0c      	ite	eq
 80046b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b4:	2500      	movne	r5, #0
 80046b6:	4293      	cmp	r3, r2
 80046b8:	bfc4      	itt	gt
 80046ba:	1a9b      	subgt	r3, r3, r2
 80046bc:	18ed      	addgt	r5, r5, r3
 80046be:	2600      	movs	r6, #0
 80046c0:	341a      	adds	r4, #26
 80046c2:	42b5      	cmp	r5, r6
 80046c4:	d11a      	bne.n	80046fc <_printf_common+0xc8>
 80046c6:	2000      	movs	r0, #0
 80046c8:	e008      	b.n	80046dc <_printf_common+0xa8>
 80046ca:	2301      	movs	r3, #1
 80046cc:	4652      	mov	r2, sl
 80046ce:	4649      	mov	r1, r9
 80046d0:	4638      	mov	r0, r7
 80046d2:	47c0      	blx	r8
 80046d4:	3001      	adds	r0, #1
 80046d6:	d103      	bne.n	80046e0 <_printf_common+0xac>
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e0:	3501      	adds	r5, #1
 80046e2:	e7c6      	b.n	8004672 <_printf_common+0x3e>
 80046e4:	18e1      	adds	r1, r4, r3
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	2030      	movs	r0, #48	; 0x30
 80046ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ee:	4422      	add	r2, r4
 80046f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046f8:	3302      	adds	r3, #2
 80046fa:	e7c7      	b.n	800468c <_printf_common+0x58>
 80046fc:	2301      	movs	r3, #1
 80046fe:	4622      	mov	r2, r4
 8004700:	4649      	mov	r1, r9
 8004702:	4638      	mov	r0, r7
 8004704:	47c0      	blx	r8
 8004706:	3001      	adds	r0, #1
 8004708:	d0e6      	beq.n	80046d8 <_printf_common+0xa4>
 800470a:	3601      	adds	r6, #1
 800470c:	e7d9      	b.n	80046c2 <_printf_common+0x8e>
	...

08004710 <_printf_i>:
 8004710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	7e0f      	ldrb	r7, [r1, #24]
 8004716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004718:	2f78      	cmp	r7, #120	; 0x78
 800471a:	4691      	mov	r9, r2
 800471c:	4680      	mov	r8, r0
 800471e:	460c      	mov	r4, r1
 8004720:	469a      	mov	sl, r3
 8004722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004726:	d807      	bhi.n	8004738 <_printf_i+0x28>
 8004728:	2f62      	cmp	r7, #98	; 0x62
 800472a:	d80a      	bhi.n	8004742 <_printf_i+0x32>
 800472c:	2f00      	cmp	r7, #0
 800472e:	f000 80d4 	beq.w	80048da <_printf_i+0x1ca>
 8004732:	2f58      	cmp	r7, #88	; 0x58
 8004734:	f000 80c0 	beq.w	80048b8 <_printf_i+0x1a8>
 8004738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800473c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004740:	e03a      	b.n	80047b8 <_printf_i+0xa8>
 8004742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004746:	2b15      	cmp	r3, #21
 8004748:	d8f6      	bhi.n	8004738 <_printf_i+0x28>
 800474a:	a101      	add	r1, pc, #4	; (adr r1, 8004750 <_printf_i+0x40>)
 800474c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004750:	080047a9 	.word	0x080047a9
 8004754:	080047bd 	.word	0x080047bd
 8004758:	08004739 	.word	0x08004739
 800475c:	08004739 	.word	0x08004739
 8004760:	08004739 	.word	0x08004739
 8004764:	08004739 	.word	0x08004739
 8004768:	080047bd 	.word	0x080047bd
 800476c:	08004739 	.word	0x08004739
 8004770:	08004739 	.word	0x08004739
 8004774:	08004739 	.word	0x08004739
 8004778:	08004739 	.word	0x08004739
 800477c:	080048c1 	.word	0x080048c1
 8004780:	080047e9 	.word	0x080047e9
 8004784:	0800487b 	.word	0x0800487b
 8004788:	08004739 	.word	0x08004739
 800478c:	08004739 	.word	0x08004739
 8004790:	080048e3 	.word	0x080048e3
 8004794:	08004739 	.word	0x08004739
 8004798:	080047e9 	.word	0x080047e9
 800479c:	08004739 	.word	0x08004739
 80047a0:	08004739 	.word	0x08004739
 80047a4:	08004883 	.word	0x08004883
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	1d1a      	adds	r2, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	602a      	str	r2, [r5, #0]
 80047b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047b8:	2301      	movs	r3, #1
 80047ba:	e09f      	b.n	80048fc <_printf_i+0x1ec>
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	682b      	ldr	r3, [r5, #0]
 80047c0:	0607      	lsls	r7, r0, #24
 80047c2:	f103 0104 	add.w	r1, r3, #4
 80047c6:	6029      	str	r1, [r5, #0]
 80047c8:	d501      	bpl.n	80047ce <_printf_i+0xbe>
 80047ca:	681e      	ldr	r6, [r3, #0]
 80047cc:	e003      	b.n	80047d6 <_printf_i+0xc6>
 80047ce:	0646      	lsls	r6, r0, #25
 80047d0:	d5fb      	bpl.n	80047ca <_printf_i+0xba>
 80047d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047d6:	2e00      	cmp	r6, #0
 80047d8:	da03      	bge.n	80047e2 <_printf_i+0xd2>
 80047da:	232d      	movs	r3, #45	; 0x2d
 80047dc:	4276      	negs	r6, r6
 80047de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e2:	485a      	ldr	r0, [pc, #360]	; (800494c <_printf_i+0x23c>)
 80047e4:	230a      	movs	r3, #10
 80047e6:	e012      	b.n	800480e <_printf_i+0xfe>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	1d19      	adds	r1, r3, #4
 80047ee:	6029      	str	r1, [r5, #0]
 80047f0:	0605      	lsls	r5, r0, #24
 80047f2:	d501      	bpl.n	80047f8 <_printf_i+0xe8>
 80047f4:	681e      	ldr	r6, [r3, #0]
 80047f6:	e002      	b.n	80047fe <_printf_i+0xee>
 80047f8:	0641      	lsls	r1, r0, #25
 80047fa:	d5fb      	bpl.n	80047f4 <_printf_i+0xe4>
 80047fc:	881e      	ldrh	r6, [r3, #0]
 80047fe:	4853      	ldr	r0, [pc, #332]	; (800494c <_printf_i+0x23c>)
 8004800:	2f6f      	cmp	r7, #111	; 0x6f
 8004802:	bf0c      	ite	eq
 8004804:	2308      	moveq	r3, #8
 8004806:	230a      	movne	r3, #10
 8004808:	2100      	movs	r1, #0
 800480a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800480e:	6865      	ldr	r5, [r4, #4]
 8004810:	60a5      	str	r5, [r4, #8]
 8004812:	2d00      	cmp	r5, #0
 8004814:	bfa2      	ittt	ge
 8004816:	6821      	ldrge	r1, [r4, #0]
 8004818:	f021 0104 	bicge.w	r1, r1, #4
 800481c:	6021      	strge	r1, [r4, #0]
 800481e:	b90e      	cbnz	r6, 8004824 <_printf_i+0x114>
 8004820:	2d00      	cmp	r5, #0
 8004822:	d04b      	beq.n	80048bc <_printf_i+0x1ac>
 8004824:	4615      	mov	r5, r2
 8004826:	fbb6 f1f3 	udiv	r1, r6, r3
 800482a:	fb03 6711 	mls	r7, r3, r1, r6
 800482e:	5dc7      	ldrb	r7, [r0, r7]
 8004830:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004834:	4637      	mov	r7, r6
 8004836:	42bb      	cmp	r3, r7
 8004838:	460e      	mov	r6, r1
 800483a:	d9f4      	bls.n	8004826 <_printf_i+0x116>
 800483c:	2b08      	cmp	r3, #8
 800483e:	d10b      	bne.n	8004858 <_printf_i+0x148>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	07de      	lsls	r6, r3, #31
 8004844:	d508      	bpl.n	8004858 <_printf_i+0x148>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	6861      	ldr	r1, [r4, #4]
 800484a:	4299      	cmp	r1, r3
 800484c:	bfde      	ittt	le
 800484e:	2330      	movle	r3, #48	; 0x30
 8004850:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004854:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004858:	1b52      	subs	r2, r2, r5
 800485a:	6122      	str	r2, [r4, #16]
 800485c:	f8cd a000 	str.w	sl, [sp]
 8004860:	464b      	mov	r3, r9
 8004862:	aa03      	add	r2, sp, #12
 8004864:	4621      	mov	r1, r4
 8004866:	4640      	mov	r0, r8
 8004868:	f7ff fee4 	bl	8004634 <_printf_common>
 800486c:	3001      	adds	r0, #1
 800486e:	d14a      	bne.n	8004906 <_printf_i+0x1f6>
 8004870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004874:	b004      	add	sp, #16
 8004876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f043 0320 	orr.w	r3, r3, #32
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	4833      	ldr	r0, [pc, #204]	; (8004950 <_printf_i+0x240>)
 8004884:	2778      	movs	r7, #120	; 0x78
 8004886:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	6829      	ldr	r1, [r5, #0]
 800488e:	061f      	lsls	r7, r3, #24
 8004890:	f851 6b04 	ldr.w	r6, [r1], #4
 8004894:	d402      	bmi.n	800489c <_printf_i+0x18c>
 8004896:	065f      	lsls	r7, r3, #25
 8004898:	bf48      	it	mi
 800489a:	b2b6      	uxthmi	r6, r6
 800489c:	07df      	lsls	r7, r3, #31
 800489e:	bf48      	it	mi
 80048a0:	f043 0320 	orrmi.w	r3, r3, #32
 80048a4:	6029      	str	r1, [r5, #0]
 80048a6:	bf48      	it	mi
 80048a8:	6023      	strmi	r3, [r4, #0]
 80048aa:	b91e      	cbnz	r6, 80048b4 <_printf_i+0x1a4>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	f023 0320 	bic.w	r3, r3, #32
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	2310      	movs	r3, #16
 80048b6:	e7a7      	b.n	8004808 <_printf_i+0xf8>
 80048b8:	4824      	ldr	r0, [pc, #144]	; (800494c <_printf_i+0x23c>)
 80048ba:	e7e4      	b.n	8004886 <_printf_i+0x176>
 80048bc:	4615      	mov	r5, r2
 80048be:	e7bd      	b.n	800483c <_printf_i+0x12c>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	6826      	ldr	r6, [r4, #0]
 80048c4:	6961      	ldr	r1, [r4, #20]
 80048c6:	1d18      	adds	r0, r3, #4
 80048c8:	6028      	str	r0, [r5, #0]
 80048ca:	0635      	lsls	r5, r6, #24
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	d501      	bpl.n	80048d4 <_printf_i+0x1c4>
 80048d0:	6019      	str	r1, [r3, #0]
 80048d2:	e002      	b.n	80048da <_printf_i+0x1ca>
 80048d4:	0670      	lsls	r0, r6, #25
 80048d6:	d5fb      	bpl.n	80048d0 <_printf_i+0x1c0>
 80048d8:	8019      	strh	r1, [r3, #0]
 80048da:	2300      	movs	r3, #0
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	4615      	mov	r5, r2
 80048e0:	e7bc      	b.n	800485c <_printf_i+0x14c>
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	602a      	str	r2, [r5, #0]
 80048e8:	681d      	ldr	r5, [r3, #0]
 80048ea:	6862      	ldr	r2, [r4, #4]
 80048ec:	2100      	movs	r1, #0
 80048ee:	4628      	mov	r0, r5
 80048f0:	f7fb fc96 	bl	8000220 <memchr>
 80048f4:	b108      	cbz	r0, 80048fa <_printf_i+0x1ea>
 80048f6:	1b40      	subs	r0, r0, r5
 80048f8:	6060      	str	r0, [r4, #4]
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	6123      	str	r3, [r4, #16]
 80048fe:	2300      	movs	r3, #0
 8004900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004904:	e7aa      	b.n	800485c <_printf_i+0x14c>
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	462a      	mov	r2, r5
 800490a:	4649      	mov	r1, r9
 800490c:	4640      	mov	r0, r8
 800490e:	47d0      	blx	sl
 8004910:	3001      	adds	r0, #1
 8004912:	d0ad      	beq.n	8004870 <_printf_i+0x160>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	079b      	lsls	r3, r3, #30
 8004918:	d413      	bmi.n	8004942 <_printf_i+0x232>
 800491a:	68e0      	ldr	r0, [r4, #12]
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	4298      	cmp	r0, r3
 8004920:	bfb8      	it	lt
 8004922:	4618      	movlt	r0, r3
 8004924:	e7a6      	b.n	8004874 <_printf_i+0x164>
 8004926:	2301      	movs	r3, #1
 8004928:	4632      	mov	r2, r6
 800492a:	4649      	mov	r1, r9
 800492c:	4640      	mov	r0, r8
 800492e:	47d0      	blx	sl
 8004930:	3001      	adds	r0, #1
 8004932:	d09d      	beq.n	8004870 <_printf_i+0x160>
 8004934:	3501      	adds	r5, #1
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	9903      	ldr	r1, [sp, #12]
 800493a:	1a5b      	subs	r3, r3, r1
 800493c:	42ab      	cmp	r3, r5
 800493e:	dcf2      	bgt.n	8004926 <_printf_i+0x216>
 8004940:	e7eb      	b.n	800491a <_printf_i+0x20a>
 8004942:	2500      	movs	r5, #0
 8004944:	f104 0619 	add.w	r6, r4, #25
 8004948:	e7f5      	b.n	8004936 <_printf_i+0x226>
 800494a:	bf00      	nop
 800494c:	080050a9 	.word	0x080050a9
 8004950:	080050ba 	.word	0x080050ba

08004954 <__sflush_r>:
 8004954:	898a      	ldrh	r2, [r1, #12]
 8004956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800495a:	4605      	mov	r5, r0
 800495c:	0710      	lsls	r0, r2, #28
 800495e:	460c      	mov	r4, r1
 8004960:	d458      	bmi.n	8004a14 <__sflush_r+0xc0>
 8004962:	684b      	ldr	r3, [r1, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	dc05      	bgt.n	8004974 <__sflush_r+0x20>
 8004968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	dc02      	bgt.n	8004974 <__sflush_r+0x20>
 800496e:	2000      	movs	r0, #0
 8004970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004976:	2e00      	cmp	r6, #0
 8004978:	d0f9      	beq.n	800496e <__sflush_r+0x1a>
 800497a:	2300      	movs	r3, #0
 800497c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004980:	682f      	ldr	r7, [r5, #0]
 8004982:	6a21      	ldr	r1, [r4, #32]
 8004984:	602b      	str	r3, [r5, #0]
 8004986:	d032      	beq.n	80049ee <__sflush_r+0x9a>
 8004988:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	075a      	lsls	r2, r3, #29
 800498e:	d505      	bpl.n	800499c <__sflush_r+0x48>
 8004990:	6863      	ldr	r3, [r4, #4]
 8004992:	1ac0      	subs	r0, r0, r3
 8004994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004996:	b10b      	cbz	r3, 800499c <__sflush_r+0x48>
 8004998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800499a:	1ac0      	subs	r0, r0, r3
 800499c:	2300      	movs	r3, #0
 800499e:	4602      	mov	r2, r0
 80049a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049a2:	6a21      	ldr	r1, [r4, #32]
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b0      	blx	r6
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	d106      	bne.n	80049bc <__sflush_r+0x68>
 80049ae:	6829      	ldr	r1, [r5, #0]
 80049b0:	291d      	cmp	r1, #29
 80049b2:	d82b      	bhi.n	8004a0c <__sflush_r+0xb8>
 80049b4:	4a29      	ldr	r2, [pc, #164]	; (8004a5c <__sflush_r+0x108>)
 80049b6:	410a      	asrs	r2, r1
 80049b8:	07d6      	lsls	r6, r2, #31
 80049ba:	d427      	bmi.n	8004a0c <__sflush_r+0xb8>
 80049bc:	2200      	movs	r2, #0
 80049be:	6062      	str	r2, [r4, #4]
 80049c0:	04d9      	lsls	r1, r3, #19
 80049c2:	6922      	ldr	r2, [r4, #16]
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	d504      	bpl.n	80049d2 <__sflush_r+0x7e>
 80049c8:	1c42      	adds	r2, r0, #1
 80049ca:	d101      	bne.n	80049d0 <__sflush_r+0x7c>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b903      	cbnz	r3, 80049d2 <__sflush_r+0x7e>
 80049d0:	6560      	str	r0, [r4, #84]	; 0x54
 80049d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049d4:	602f      	str	r7, [r5, #0]
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d0c9      	beq.n	800496e <__sflush_r+0x1a>
 80049da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049de:	4299      	cmp	r1, r3
 80049e0:	d002      	beq.n	80049e8 <__sflush_r+0x94>
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 fa22 	bl	8004e2c <_free_r>
 80049e8:	2000      	movs	r0, #0
 80049ea:	6360      	str	r0, [r4, #52]	; 0x34
 80049ec:	e7c0      	b.n	8004970 <__sflush_r+0x1c>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b0      	blx	r6
 80049f4:	1c41      	adds	r1, r0, #1
 80049f6:	d1c8      	bne.n	800498a <__sflush_r+0x36>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0c5      	beq.n	800498a <__sflush_r+0x36>
 80049fe:	2b1d      	cmp	r3, #29
 8004a00:	d001      	beq.n	8004a06 <__sflush_r+0xb2>
 8004a02:	2b16      	cmp	r3, #22
 8004a04:	d101      	bne.n	8004a0a <__sflush_r+0xb6>
 8004a06:	602f      	str	r7, [r5, #0]
 8004a08:	e7b1      	b.n	800496e <__sflush_r+0x1a>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	e7ad      	b.n	8004970 <__sflush_r+0x1c>
 8004a14:	690f      	ldr	r7, [r1, #16]
 8004a16:	2f00      	cmp	r7, #0
 8004a18:	d0a9      	beq.n	800496e <__sflush_r+0x1a>
 8004a1a:	0793      	lsls	r3, r2, #30
 8004a1c:	680e      	ldr	r6, [r1, #0]
 8004a1e:	bf08      	it	eq
 8004a20:	694b      	ldreq	r3, [r1, #20]
 8004a22:	600f      	str	r7, [r1, #0]
 8004a24:	bf18      	it	ne
 8004a26:	2300      	movne	r3, #0
 8004a28:	eba6 0807 	sub.w	r8, r6, r7
 8004a2c:	608b      	str	r3, [r1, #8]
 8004a2e:	f1b8 0f00 	cmp.w	r8, #0
 8004a32:	dd9c      	ble.n	800496e <__sflush_r+0x1a>
 8004a34:	6a21      	ldr	r1, [r4, #32]
 8004a36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a38:	4643      	mov	r3, r8
 8004a3a:	463a      	mov	r2, r7
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	47b0      	blx	r6
 8004a40:	2800      	cmp	r0, #0
 8004a42:	dc06      	bgt.n	8004a52 <__sflush_r+0xfe>
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a50:	e78e      	b.n	8004970 <__sflush_r+0x1c>
 8004a52:	4407      	add	r7, r0
 8004a54:	eba8 0800 	sub.w	r8, r8, r0
 8004a58:	e7e9      	b.n	8004a2e <__sflush_r+0xda>
 8004a5a:	bf00      	nop
 8004a5c:	dfbffffe 	.word	0xdfbffffe

08004a60 <_fflush_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	690b      	ldr	r3, [r1, #16]
 8004a64:	4605      	mov	r5, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	b913      	cbnz	r3, 8004a70 <_fflush_r+0x10>
 8004a6a:	2500      	movs	r5, #0
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	b118      	cbz	r0, 8004a7a <_fflush_r+0x1a>
 8004a72:	6a03      	ldr	r3, [r0, #32]
 8004a74:	b90b      	cbnz	r3, 8004a7a <_fflush_r+0x1a>
 8004a76:	f7ff fb21 	bl	80040bc <__sinit>
 8004a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f3      	beq.n	8004a6a <_fflush_r+0xa>
 8004a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a84:	07d0      	lsls	r0, r2, #31
 8004a86:	d404      	bmi.n	8004a92 <_fflush_r+0x32>
 8004a88:	0599      	lsls	r1, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_fflush_r+0x32>
 8004a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a8e:	f7ff fbec 	bl	800426a <__retarget_lock_acquire_recursive>
 8004a92:	4628      	mov	r0, r5
 8004a94:	4621      	mov	r1, r4
 8004a96:	f7ff ff5d 	bl	8004954 <__sflush_r>
 8004a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a9c:	07da      	lsls	r2, r3, #31
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	d4e4      	bmi.n	8004a6c <_fflush_r+0xc>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	059b      	lsls	r3, r3, #22
 8004aa6:	d4e1      	bmi.n	8004a6c <_fflush_r+0xc>
 8004aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aaa:	f7ff fbdf 	bl	800426c <__retarget_lock_release_recursive>
 8004aae:	e7dd      	b.n	8004a6c <_fflush_r+0xc>

08004ab0 <__malloc_lock>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	; (8004ab8 <__malloc_lock+0x8>)
 8004ab2:	f7ff bbda 	b.w	800426a <__retarget_lock_acquire_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	20000a68 	.word	0x20000a68

08004abc <__malloc_unlock>:
 8004abc:	4801      	ldr	r0, [pc, #4]	; (8004ac4 <__malloc_unlock+0x8>)
 8004abe:	f7ff bbd5 	b.w	800426c <__retarget_lock_release_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	20000a68 	.word	0x20000a68

08004ac8 <__sread>:
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	460c      	mov	r4, r1
 8004acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad0:	f000 f978 	bl	8004dc4 <_read_r>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	bfab      	itete	ge
 8004ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ada:	89a3      	ldrhlt	r3, [r4, #12]
 8004adc:	181b      	addge	r3, r3, r0
 8004ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ae2:	bfac      	ite	ge
 8004ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ae6:	81a3      	strhlt	r3, [r4, #12]
 8004ae8:	bd10      	pop	{r4, pc}

08004aea <__swrite>:
 8004aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aee:	461f      	mov	r7, r3
 8004af0:	898b      	ldrh	r3, [r1, #12]
 8004af2:	05db      	lsls	r3, r3, #23
 8004af4:	4605      	mov	r5, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	4616      	mov	r6, r2
 8004afa:	d505      	bpl.n	8004b08 <__swrite+0x1e>
 8004afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b00:	2302      	movs	r3, #2
 8004b02:	2200      	movs	r2, #0
 8004b04:	f000 f94c 	bl	8004da0 <_lseek_r>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	4632      	mov	r2, r6
 8004b16:	463b      	mov	r3, r7
 8004b18:	4628      	mov	r0, r5
 8004b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1e:	f000 b973 	b.w	8004e08 <_write_r>

08004b22 <__sseek>:
 8004b22:	b510      	push	{r4, lr}
 8004b24:	460c      	mov	r4, r1
 8004b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2a:	f000 f939 	bl	8004da0 <_lseek_r>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	bf15      	itete	ne
 8004b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b3e:	81a3      	strheq	r3, [r4, #12]
 8004b40:	bf18      	it	ne
 8004b42:	81a3      	strhne	r3, [r4, #12]
 8004b44:	bd10      	pop	{r4, pc}

08004b46 <__sclose>:
 8004b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4a:	f000 b8f7 	b.w	8004d3c <_close_r>

08004b4e <__swbuf_r>:
 8004b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b50:	460e      	mov	r6, r1
 8004b52:	4614      	mov	r4, r2
 8004b54:	4605      	mov	r5, r0
 8004b56:	b118      	cbz	r0, 8004b60 <__swbuf_r+0x12>
 8004b58:	6a03      	ldr	r3, [r0, #32]
 8004b5a:	b90b      	cbnz	r3, 8004b60 <__swbuf_r+0x12>
 8004b5c:	f7ff faae 	bl	80040bc <__sinit>
 8004b60:	69a3      	ldr	r3, [r4, #24]
 8004b62:	60a3      	str	r3, [r4, #8]
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	071a      	lsls	r2, r3, #28
 8004b68:	d525      	bpl.n	8004bb6 <__swbuf_r+0x68>
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	b31b      	cbz	r3, 8004bb6 <__swbuf_r+0x68>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	6922      	ldr	r2, [r4, #16]
 8004b72:	1a98      	subs	r0, r3, r2
 8004b74:	6963      	ldr	r3, [r4, #20]
 8004b76:	b2f6      	uxtb	r6, r6
 8004b78:	4283      	cmp	r3, r0
 8004b7a:	4637      	mov	r7, r6
 8004b7c:	dc04      	bgt.n	8004b88 <__swbuf_r+0x3a>
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4628      	mov	r0, r5
 8004b82:	f7ff ff6d 	bl	8004a60 <_fflush_r>
 8004b86:	b9e0      	cbnz	r0, 8004bc2 <__swbuf_r+0x74>
 8004b88:	68a3      	ldr	r3, [r4, #8]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	60a3      	str	r3, [r4, #8]
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	6022      	str	r2, [r4, #0]
 8004b94:	701e      	strb	r6, [r3, #0]
 8004b96:	6962      	ldr	r2, [r4, #20]
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d004      	beq.n	8004ba8 <__swbuf_r+0x5a>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	07db      	lsls	r3, r3, #31
 8004ba2:	d506      	bpl.n	8004bb2 <__swbuf_r+0x64>
 8004ba4:	2e0a      	cmp	r6, #10
 8004ba6:	d104      	bne.n	8004bb2 <__swbuf_r+0x64>
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4628      	mov	r0, r5
 8004bac:	f7ff ff58 	bl	8004a60 <_fflush_r>
 8004bb0:	b938      	cbnz	r0, 8004bc2 <__swbuf_r+0x74>
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 f805 	bl	8004bc8 <__swsetup_r>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d0d5      	beq.n	8004b6e <__swbuf_r+0x20>
 8004bc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bc6:	e7f4      	b.n	8004bb2 <__swbuf_r+0x64>

08004bc8 <__swsetup_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4b2a      	ldr	r3, [pc, #168]	; (8004c74 <__swsetup_r+0xac>)
 8004bcc:	4605      	mov	r5, r0
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	b118      	cbz	r0, 8004bdc <__swsetup_r+0x14>
 8004bd4:	6a03      	ldr	r3, [r0, #32]
 8004bd6:	b90b      	cbnz	r3, 8004bdc <__swsetup_r+0x14>
 8004bd8:	f7ff fa70 	bl	80040bc <__sinit>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004be2:	0718      	lsls	r0, r3, #28
 8004be4:	d422      	bmi.n	8004c2c <__swsetup_r+0x64>
 8004be6:	06d9      	lsls	r1, r3, #27
 8004be8:	d407      	bmi.n	8004bfa <__swsetup_r+0x32>
 8004bea:	2309      	movs	r3, #9
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bf8:	e034      	b.n	8004c64 <__swsetup_r+0x9c>
 8004bfa:	0758      	lsls	r0, r3, #29
 8004bfc:	d512      	bpl.n	8004c24 <__swsetup_r+0x5c>
 8004bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c00:	b141      	cbz	r1, 8004c14 <__swsetup_r+0x4c>
 8004c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c06:	4299      	cmp	r1, r3
 8004c08:	d002      	beq.n	8004c10 <__swsetup_r+0x48>
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f000 f90e 	bl	8004e2c <_free_r>
 8004c10:	2300      	movs	r3, #0
 8004c12:	6363      	str	r3, [r4, #52]	; 0x34
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6063      	str	r3, [r4, #4]
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	f043 0308 	orr.w	r3, r3, #8
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	b94b      	cbnz	r3, 8004c44 <__swsetup_r+0x7c>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3a:	d003      	beq.n	8004c44 <__swsetup_r+0x7c>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 f840 	bl	8004cc4 <__smakebuf_r>
 8004c44:	89a0      	ldrh	r0, [r4, #12]
 8004c46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c4a:	f010 0301 	ands.w	r3, r0, #1
 8004c4e:	d00a      	beq.n	8004c66 <__swsetup_r+0x9e>
 8004c50:	2300      	movs	r3, #0
 8004c52:	60a3      	str	r3, [r4, #8]
 8004c54:	6963      	ldr	r3, [r4, #20]
 8004c56:	425b      	negs	r3, r3
 8004c58:	61a3      	str	r3, [r4, #24]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	b943      	cbnz	r3, 8004c70 <__swsetup_r+0xa8>
 8004c5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c62:	d1c4      	bne.n	8004bee <__swsetup_r+0x26>
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	0781      	lsls	r1, r0, #30
 8004c68:	bf58      	it	pl
 8004c6a:	6963      	ldrpl	r3, [r4, #20]
 8004c6c:	60a3      	str	r3, [r4, #8]
 8004c6e:	e7f4      	b.n	8004c5a <__swsetup_r+0x92>
 8004c70:	2000      	movs	r0, #0
 8004c72:	e7f7      	b.n	8004c64 <__swsetup_r+0x9c>
 8004c74:	20000064 	.word	0x20000064

08004c78 <__swhatbuf_r>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c80:	2900      	cmp	r1, #0
 8004c82:	b096      	sub	sp, #88	; 0x58
 8004c84:	4615      	mov	r5, r2
 8004c86:	461e      	mov	r6, r3
 8004c88:	da0d      	bge.n	8004ca6 <__swhatbuf_r+0x2e>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	bf0c      	ite	eq
 8004c96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c9a:	2340      	movne	r3, #64	; 0x40
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	6031      	str	r1, [r6, #0]
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	b016      	add	sp, #88	; 0x58
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
 8004ca6:	466a      	mov	r2, sp
 8004ca8:	f000 f858 	bl	8004d5c <_fstat_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	dbec      	blt.n	8004c8a <__swhatbuf_r+0x12>
 8004cb0:	9901      	ldr	r1, [sp, #4]
 8004cb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004cb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004cba:	4259      	negs	r1, r3
 8004cbc:	4159      	adcs	r1, r3
 8004cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cc2:	e7eb      	b.n	8004c9c <__swhatbuf_r+0x24>

08004cc4 <__smakebuf_r>:
 8004cc4:	898b      	ldrh	r3, [r1, #12]
 8004cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cc8:	079d      	lsls	r5, r3, #30
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	d507      	bpl.n	8004ce0 <__smakebuf_r+0x1c>
 8004cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	2301      	movs	r3, #1
 8004cda:	6163      	str	r3, [r4, #20]
 8004cdc:	b002      	add	sp, #8
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	ab01      	add	r3, sp, #4
 8004ce2:	466a      	mov	r2, sp
 8004ce4:	f7ff ffc8 	bl	8004c78 <__swhatbuf_r>
 8004ce8:	9900      	ldr	r1, [sp, #0]
 8004cea:	4605      	mov	r5, r0
 8004cec:	4630      	mov	r0, r6
 8004cee:	f7ff fc21 	bl	8004534 <_malloc_r>
 8004cf2:	b948      	cbnz	r0, 8004d08 <__smakebuf_r+0x44>
 8004cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf8:	059a      	lsls	r2, r3, #22
 8004cfa:	d4ef      	bmi.n	8004cdc <__smakebuf_r+0x18>
 8004cfc:	f023 0303 	bic.w	r3, r3, #3
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	e7e3      	b.n	8004cd0 <__smakebuf_r+0xc>
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	6020      	str	r0, [r4, #0]
 8004d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d10:	81a3      	strh	r3, [r4, #12]
 8004d12:	9b00      	ldr	r3, [sp, #0]
 8004d14:	6163      	str	r3, [r4, #20]
 8004d16:	9b01      	ldr	r3, [sp, #4]
 8004d18:	6120      	str	r0, [r4, #16]
 8004d1a:	b15b      	cbz	r3, 8004d34 <__smakebuf_r+0x70>
 8004d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 f82d 	bl	8004d80 <_isatty_r>
 8004d26:	b128      	cbz	r0, 8004d34 <__smakebuf_r+0x70>
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	81a3      	strh	r3, [r4, #12]
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	431d      	orrs	r5, r3
 8004d38:	81a5      	strh	r5, [r4, #12]
 8004d3a:	e7cf      	b.n	8004cdc <__smakebuf_r+0x18>

08004d3c <_close_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4d06      	ldr	r5, [pc, #24]	; (8004d58 <_close_r+0x1c>)
 8004d40:	2300      	movs	r3, #0
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	f7fc f9df 	bl	800110a <_close>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_close_r+0x1a>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_close_r+0x1a>
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	20000a74 	.word	0x20000a74

08004d5c <_fstat_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d07      	ldr	r5, [pc, #28]	; (8004d7c <_fstat_r+0x20>)
 8004d60:	2300      	movs	r3, #0
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	f7fc f9da 	bl	8001122 <_fstat>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	d102      	bne.n	8004d78 <_fstat_r+0x1c>
 8004d72:	682b      	ldr	r3, [r5, #0]
 8004d74:	b103      	cbz	r3, 8004d78 <_fstat_r+0x1c>
 8004d76:	6023      	str	r3, [r4, #0]
 8004d78:	bd38      	pop	{r3, r4, r5, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000a74 	.word	0x20000a74

08004d80 <_isatty_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4d06      	ldr	r5, [pc, #24]	; (8004d9c <_isatty_r+0x1c>)
 8004d84:	2300      	movs	r3, #0
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	602b      	str	r3, [r5, #0]
 8004d8c:	f7fc f9d9 	bl	8001142 <_isatty>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_isatty_r+0x1a>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_isatty_r+0x1a>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	20000a74 	.word	0x20000a74

08004da0 <_lseek_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d07      	ldr	r5, [pc, #28]	; (8004dc0 <_lseek_r+0x20>)
 8004da4:	4604      	mov	r4, r0
 8004da6:	4608      	mov	r0, r1
 8004da8:	4611      	mov	r1, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	602a      	str	r2, [r5, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f7fc f9d2 	bl	8001158 <_lseek>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_lseek_r+0x1e>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_lseek_r+0x1e>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	20000a74 	.word	0x20000a74

08004dc4 <_read_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d07      	ldr	r5, [pc, #28]	; (8004de4 <_read_r+0x20>)
 8004dc8:	4604      	mov	r4, r0
 8004dca:	4608      	mov	r0, r1
 8004dcc:	4611      	mov	r1, r2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	602a      	str	r2, [r5, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f7fc f960 	bl	8001098 <_read>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d102      	bne.n	8004de2 <_read_r+0x1e>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	b103      	cbz	r3, 8004de2 <_read_r+0x1e>
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	20000a74 	.word	0x20000a74

08004de8 <_sbrk_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4d06      	ldr	r5, [pc, #24]	; (8004e04 <_sbrk_r+0x1c>)
 8004dec:	2300      	movs	r3, #0
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	602b      	str	r3, [r5, #0]
 8004df4:	f7fc f9be 	bl	8001174 <_sbrk>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_sbrk_r+0x1a>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_sbrk_r+0x1a>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	20000a74 	.word	0x20000a74

08004e08 <_write_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d07      	ldr	r5, [pc, #28]	; (8004e28 <_write_r+0x20>)
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	4608      	mov	r0, r1
 8004e10:	4611      	mov	r1, r2
 8004e12:	2200      	movs	r2, #0
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fc f95b 	bl	80010d2 <_write>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_write_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_write_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20000a74 	.word	0x20000a74

08004e2c <_free_r>:
 8004e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	d044      	beq.n	8004ebc <_free_r+0x90>
 8004e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e36:	9001      	str	r0, [sp, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e3e:	bfb8      	it	lt
 8004e40:	18e4      	addlt	r4, r4, r3
 8004e42:	f7ff fe35 	bl	8004ab0 <__malloc_lock>
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <_free_r+0x94>)
 8004e48:	9801      	ldr	r0, [sp, #4]
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	b933      	cbnz	r3, 8004e5c <_free_r+0x30>
 8004e4e:	6063      	str	r3, [r4, #4]
 8004e50:	6014      	str	r4, [r2, #0]
 8004e52:	b003      	add	sp, #12
 8004e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e58:	f7ff be30 	b.w	8004abc <__malloc_unlock>
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d908      	bls.n	8004e72 <_free_r+0x46>
 8004e60:	6825      	ldr	r5, [r4, #0]
 8004e62:	1961      	adds	r1, r4, r5
 8004e64:	428b      	cmp	r3, r1
 8004e66:	bf01      	itttt	eq
 8004e68:	6819      	ldreq	r1, [r3, #0]
 8004e6a:	685b      	ldreq	r3, [r3, #4]
 8004e6c:	1949      	addeq	r1, r1, r5
 8004e6e:	6021      	streq	r1, [r4, #0]
 8004e70:	e7ed      	b.n	8004e4e <_free_r+0x22>
 8004e72:	461a      	mov	r2, r3
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	b10b      	cbz	r3, 8004e7c <_free_r+0x50>
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	d9fa      	bls.n	8004e72 <_free_r+0x46>
 8004e7c:	6811      	ldr	r1, [r2, #0]
 8004e7e:	1855      	adds	r5, r2, r1
 8004e80:	42a5      	cmp	r5, r4
 8004e82:	d10b      	bne.n	8004e9c <_free_r+0x70>
 8004e84:	6824      	ldr	r4, [r4, #0]
 8004e86:	4421      	add	r1, r4
 8004e88:	1854      	adds	r4, r2, r1
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	d1e0      	bne.n	8004e52 <_free_r+0x26>
 8004e90:	681c      	ldr	r4, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	6053      	str	r3, [r2, #4]
 8004e96:	440c      	add	r4, r1
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	e7da      	b.n	8004e52 <_free_r+0x26>
 8004e9c:	d902      	bls.n	8004ea4 <_free_r+0x78>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	6003      	str	r3, [r0, #0]
 8004ea2:	e7d6      	b.n	8004e52 <_free_r+0x26>
 8004ea4:	6825      	ldr	r5, [r4, #0]
 8004ea6:	1961      	adds	r1, r4, r5
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	bf04      	itt	eq
 8004eac:	6819      	ldreq	r1, [r3, #0]
 8004eae:	685b      	ldreq	r3, [r3, #4]
 8004eb0:	6063      	str	r3, [r4, #4]
 8004eb2:	bf04      	itt	eq
 8004eb4:	1949      	addeq	r1, r1, r5
 8004eb6:	6021      	streq	r1, [r4, #0]
 8004eb8:	6054      	str	r4, [r2, #4]
 8004eba:	e7ca      	b.n	8004e52 <_free_r+0x26>
 8004ebc:	b003      	add	sp, #12
 8004ebe:	bd30      	pop	{r4, r5, pc}
 8004ec0:	20000a6c 	.word	0x20000a6c

08004ec4 <_init>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	bf00      	nop
 8004ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eca:	bc08      	pop	{r3}
 8004ecc:	469e      	mov	lr, r3
 8004ece:	4770      	bx	lr

08004ed0 <_fini>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr
